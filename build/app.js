(()=>{var __webpack_modules__={589:function(module,exports,__webpack_require__){eval("var __WEBPACK_AMD_DEFINE_RESULT__;;/*! showdown v 1.9.1 - 02-11-2019 */\r\n(function(){\r\n/**\r\n * Created by Tivie on 13-07-2015.\r\n */\r\n\r\nfunction getDefaultOpts (simple) {\r\n  'use strict';\r\n\r\n  var defaultOptions = {\r\n    omitExtraWLInCodeBlocks: {\r\n      defaultValue: false,\r\n      describe: 'Omit the default extra whiteline added to code blocks',\r\n      type: 'boolean'\r\n    },\r\n    noHeaderId: {\r\n      defaultValue: false,\r\n      describe: 'Turn on/off generated header id',\r\n      type: 'boolean'\r\n    },\r\n    prefixHeaderId: {\r\n      defaultValue: false,\r\n      describe: 'Add a prefix to the generated header ids. Passing a string will prefix that string to the header id. Setting to true will add a generic \\'section-\\' prefix',\r\n      type: 'string'\r\n    },\r\n    rawPrefixHeaderId: {\r\n      defaultValue: false,\r\n      describe: 'Setting this option to true will prevent showdown from modifying the prefix. This might result in malformed IDs (if, for instance, the \" char is used in the prefix)',\r\n      type: 'boolean'\r\n    },\r\n    ghCompatibleHeaderId: {\r\n      defaultValue: false,\r\n      describe: 'Generate header ids compatible with github style (spaces are replaced with dashes, a bunch of non alphanumeric chars are removed)',\r\n      type: 'boolean'\r\n    },\r\n    rawHeaderId: {\r\n      defaultValue: false,\r\n      describe: 'Remove only spaces, \\' and \" from generated header ids (including prefixes), replacing them with dashes (-). WARNING: This might result in malformed ids',\r\n      type: 'boolean'\r\n    },\r\n    headerLevelStart: {\r\n      defaultValue: false,\r\n      describe: 'The header blocks level start',\r\n      type: 'integer'\r\n    },\r\n    parseImgDimensions: {\r\n      defaultValue: false,\r\n      describe: 'Turn on/off image dimension parsing',\r\n      type: 'boolean'\r\n    },\r\n    simplifiedAutoLink: {\r\n      defaultValue: false,\r\n      describe: 'Turn on/off GFM autolink style',\r\n      type: 'boolean'\r\n    },\r\n    excludeTrailingPunctuationFromURLs: {\r\n      defaultValue: false,\r\n      describe: 'Excludes trailing punctuation from links generated with autoLinking',\r\n      type: 'boolean'\r\n    },\r\n    literalMidWordUnderscores: {\r\n      defaultValue: false,\r\n      describe: 'Parse midword underscores as literal underscores',\r\n      type: 'boolean'\r\n    },\r\n    literalMidWordAsterisks: {\r\n      defaultValue: false,\r\n      describe: 'Parse midword asterisks as literal asterisks',\r\n      type: 'boolean'\r\n    },\r\n    strikethrough: {\r\n      defaultValue: false,\r\n      describe: 'Turn on/off strikethrough support',\r\n      type: 'boolean'\r\n    },\r\n    tables: {\r\n      defaultValue: false,\r\n      describe: 'Turn on/off tables support',\r\n      type: 'boolean'\r\n    },\r\n    tablesHeaderId: {\r\n      defaultValue: false,\r\n      describe: 'Add an id to table headers',\r\n      type: 'boolean'\r\n    },\r\n    ghCodeBlocks: {\r\n      defaultValue: true,\r\n      describe: 'Turn on/off GFM fenced code blocks support',\r\n      type: 'boolean'\r\n    },\r\n    tasklists: {\r\n      defaultValue: false,\r\n      describe: 'Turn on/off GFM tasklist support',\r\n      type: 'boolean'\r\n    },\r\n    smoothLivePreview: {\r\n      defaultValue: false,\r\n      describe: 'Prevents weird effects in live previews due to incomplete input',\r\n      type: 'boolean'\r\n    },\r\n    smartIndentationFix: {\r\n      defaultValue: false,\r\n      description: 'Tries to smartly fix indentation in es6 strings',\r\n      type: 'boolean'\r\n    },\r\n    disableForced4SpacesIndentedSublists: {\r\n      defaultValue: false,\r\n      description: 'Disables the requirement of indenting nested sublists by 4 spaces',\r\n      type: 'boolean'\r\n    },\r\n    simpleLineBreaks: {\r\n      defaultValue: false,\r\n      description: 'Parses simple line breaks as <br> (GFM Style)',\r\n      type: 'boolean'\r\n    },\r\n    requireSpaceBeforeHeadingText: {\r\n      defaultValue: false,\r\n      description: 'Makes adding a space between `#` and the header text mandatory (GFM Style)',\r\n      type: 'boolean'\r\n    },\r\n    ghMentions: {\r\n      defaultValue: false,\r\n      description: 'Enables github @mentions',\r\n      type: 'boolean'\r\n    },\r\n    ghMentionsLink: {\r\n      defaultValue: 'https://github.com/{u}',\r\n      description: 'Changes the link generated by @mentions. Only applies if ghMentions option is enabled.',\r\n      type: 'string'\r\n    },\r\n    encodeEmails: {\r\n      defaultValue: true,\r\n      description: 'Encode e-mail addresses through the use of Character Entities, transforming ASCII e-mail addresses into its equivalent decimal entities',\r\n      type: 'boolean'\r\n    },\r\n    openLinksInNewWindow: {\r\n      defaultValue: false,\r\n      description: 'Open all links in new windows',\r\n      type: 'boolean'\r\n    },\r\n    backslashEscapesHTMLTags: {\r\n      defaultValue: false,\r\n      description: 'Support for HTML Tag escaping. ex: \\<div>foo\\</div>',\r\n      type: 'boolean'\r\n    },\r\n    emoji: {\r\n      defaultValue: false,\r\n      description: 'Enable emoji support. Ex: `this is a :smile: emoji`',\r\n      type: 'boolean'\r\n    },\r\n    underline: {\r\n      defaultValue: false,\r\n      description: 'Enable support for underline. Syntax is double or triple underscores: `__underline word__`. With this option enabled, underscores no longer parses into `<em>` and `<strong>`',\r\n      type: 'boolean'\r\n    },\r\n    completeHTMLDocument: {\r\n      defaultValue: false,\r\n      description: 'Outputs a complete html document, including `<html>`, `<head>` and `<body>` tags',\r\n      type: 'boolean'\r\n    },\r\n    metadata: {\r\n      defaultValue: false,\r\n      description: 'Enable support for document metadata (defined at the top of the document between `«««` and `»»»` or between `---` and `---`).',\r\n      type: 'boolean'\r\n    },\r\n    splitAdjacentBlockquotes: {\r\n      defaultValue: false,\r\n      description: 'Split adjacent blockquote blocks',\r\n      type: 'boolean'\r\n    }\r\n  };\r\n  if (simple === false) {\r\n    return JSON.parse(JSON.stringify(defaultOptions));\r\n  }\r\n  var ret = {};\r\n  for (var opt in defaultOptions) {\r\n    if (defaultOptions.hasOwnProperty(opt)) {\r\n      ret[opt] = defaultOptions[opt].defaultValue;\r\n    }\r\n  }\r\n  return ret;\r\n}\r\n\r\nfunction allOptionsOn () {\r\n  'use strict';\r\n  var options = getDefaultOpts(true),\r\n      ret = {};\r\n  for (var opt in options) {\r\n    if (options.hasOwnProperty(opt)) {\r\n      ret[opt] = true;\r\n    }\r\n  }\r\n  return ret;\r\n}\r\n\r\n/**\r\n * Created by Tivie on 06-01-2015.\r\n */\r\n\r\n// Private properties\r\nvar showdown = {},\r\n    parsers = {},\r\n    extensions = {},\r\n    globalOptions = getDefaultOpts(true),\r\n    setFlavor = 'vanilla',\r\n    flavor = {\r\n      github: {\r\n        omitExtraWLInCodeBlocks:              true,\r\n        simplifiedAutoLink:                   true,\r\n        excludeTrailingPunctuationFromURLs:   true,\r\n        literalMidWordUnderscores:            true,\r\n        strikethrough:                        true,\r\n        tables:                               true,\r\n        tablesHeaderId:                       true,\r\n        ghCodeBlocks:                         true,\r\n        tasklists:                            true,\r\n        disableForced4SpacesIndentedSublists: true,\r\n        simpleLineBreaks:                     true,\r\n        requireSpaceBeforeHeadingText:        true,\r\n        ghCompatibleHeaderId:                 true,\r\n        ghMentions:                           true,\r\n        backslashEscapesHTMLTags:             true,\r\n        emoji:                                true,\r\n        splitAdjacentBlockquotes:             true\r\n      },\r\n      original: {\r\n        noHeaderId:                           true,\r\n        ghCodeBlocks:                         false\r\n      },\r\n      ghost: {\r\n        omitExtraWLInCodeBlocks:              true,\r\n        parseImgDimensions:                   true,\r\n        simplifiedAutoLink:                   true,\r\n        excludeTrailingPunctuationFromURLs:   true,\r\n        literalMidWordUnderscores:            true,\r\n        strikethrough:                        true,\r\n        tables:                               true,\r\n        tablesHeaderId:                       true,\r\n        ghCodeBlocks:                         true,\r\n        tasklists:                            true,\r\n        smoothLivePreview:                    true,\r\n        simpleLineBreaks:                     true,\r\n        requireSpaceBeforeHeadingText:        true,\r\n        ghMentions:                           false,\r\n        encodeEmails:                         true\r\n      },\r\n      vanilla: getDefaultOpts(true),\r\n      allOn: allOptionsOn()\r\n    };\r\n\r\n/**\r\n * helper namespace\r\n * @type {{}}\r\n */\r\nshowdown.helper = {};\r\n\r\n/**\r\n * TODO LEGACY SUPPORT CODE\r\n * @type {{}}\r\n */\r\nshowdown.extensions = {};\r\n\r\n/**\r\n * Set a global option\r\n * @static\r\n * @param {string} key\r\n * @param {*} value\r\n * @returns {showdown}\r\n */\r\nshowdown.setOption = function (key, value) {\r\n  'use strict';\r\n  globalOptions[key] = value;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Get a global option\r\n * @static\r\n * @param {string} key\r\n * @returns {*}\r\n */\r\nshowdown.getOption = function (key) {\r\n  'use strict';\r\n  return globalOptions[key];\r\n};\r\n\r\n/**\r\n * Get the global options\r\n * @static\r\n * @returns {{}}\r\n */\r\nshowdown.getOptions = function () {\r\n  'use strict';\r\n  return globalOptions;\r\n};\r\n\r\n/**\r\n * Reset global options to the default values\r\n * @static\r\n */\r\nshowdown.resetOptions = function () {\r\n  'use strict';\r\n  globalOptions = getDefaultOpts(true);\r\n};\r\n\r\n/**\r\n * Set the flavor showdown should use as default\r\n * @param {string} name\r\n */\r\nshowdown.setFlavor = function (name) {\r\n  'use strict';\r\n  if (!flavor.hasOwnProperty(name)) {\r\n    throw Error(name + ' flavor was not found');\r\n  }\r\n  showdown.resetOptions();\r\n  var preset = flavor[name];\r\n  setFlavor = name;\r\n  for (var option in preset) {\r\n    if (preset.hasOwnProperty(option)) {\r\n      globalOptions[option] = preset[option];\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Get the currently set flavor\r\n * @returns {string}\r\n */\r\nshowdown.getFlavor = function () {\r\n  'use strict';\r\n  return setFlavor;\r\n};\r\n\r\n/**\r\n * Get the options of a specified flavor. Returns undefined if the flavor was not found\r\n * @param {string} name Name of the flavor\r\n * @returns {{}|undefined}\r\n */\r\nshowdown.getFlavorOptions = function (name) {\r\n  'use strict';\r\n  if (flavor.hasOwnProperty(name)) {\r\n    return flavor[name];\r\n  }\r\n};\r\n\r\n/**\r\n * Get the default options\r\n * @static\r\n * @param {boolean} [simple=true]\r\n * @returns {{}}\r\n */\r\nshowdown.getDefaultOptions = function (simple) {\r\n  'use strict';\r\n  return getDefaultOpts(simple);\r\n};\r\n\r\n/**\r\n * Get or set a subParser\r\n *\r\n * subParser(name)       - Get a registered subParser\r\n * subParser(name, func) - Register a subParser\r\n * @static\r\n * @param {string} name\r\n * @param {function} [func]\r\n * @returns {*}\r\n */\r\nshowdown.subParser = function (name, func) {\r\n  'use strict';\r\n  if (showdown.helper.isString(name)) {\r\n    if (typeof func !== 'undefined') {\r\n      parsers[name] = func;\r\n    } else {\r\n      if (parsers.hasOwnProperty(name)) {\r\n        return parsers[name];\r\n      } else {\r\n        throw Error('SubParser named ' + name + ' not registered!');\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Gets or registers an extension\r\n * @static\r\n * @param {string} name\r\n * @param {object|function=} ext\r\n * @returns {*}\r\n */\r\nshowdown.extension = function (name, ext) {\r\n  'use strict';\r\n\r\n  if (!showdown.helper.isString(name)) {\r\n    throw Error('Extension \\'name\\' must be a string');\r\n  }\r\n\r\n  name = showdown.helper.stdExtName(name);\r\n\r\n  // Getter\r\n  if (showdown.helper.isUndefined(ext)) {\r\n    if (!extensions.hasOwnProperty(name)) {\r\n      throw Error('Extension named ' + name + ' is not registered!');\r\n    }\r\n    return extensions[name];\r\n\r\n    // Setter\r\n  } else {\r\n    // Expand extension if it's wrapped in a function\r\n    if (typeof ext === 'function') {\r\n      ext = ext();\r\n    }\r\n\r\n    // Ensure extension is an array\r\n    if (!showdown.helper.isArray(ext)) {\r\n      ext = [ext];\r\n    }\r\n\r\n    var validExtension = validate(ext, name);\r\n\r\n    if (validExtension.valid) {\r\n      extensions[name] = ext;\r\n    } else {\r\n      throw Error(validExtension.error);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Gets all extensions registered\r\n * @returns {{}}\r\n */\r\nshowdown.getAllExtensions = function () {\r\n  'use strict';\r\n  return extensions;\r\n};\r\n\r\n/**\r\n * Remove an extension\r\n * @param {string} name\r\n */\r\nshowdown.removeExtension = function (name) {\r\n  'use strict';\r\n  delete extensions[name];\r\n};\r\n\r\n/**\r\n * Removes all extensions\r\n */\r\nshowdown.resetExtensions = function () {\r\n  'use strict';\r\n  extensions = {};\r\n};\r\n\r\n/**\r\n * Validate extension\r\n * @param {array} extension\r\n * @param {string} name\r\n * @returns {{valid: boolean, error: string}}\r\n */\r\nfunction validate (extension, name) {\r\n  'use strict';\r\n\r\n  var errMsg = (name) ? 'Error in ' + name + ' extension->' : 'Error in unnamed extension',\r\n      ret = {\r\n        valid: true,\r\n        error: ''\r\n      };\r\n\r\n  if (!showdown.helper.isArray(extension)) {\r\n    extension = [extension];\r\n  }\r\n\r\n  for (var i = 0; i < extension.length; ++i) {\r\n    var baseMsg = errMsg + ' sub-extension ' + i + ': ',\r\n        ext = extension[i];\r\n    if (typeof ext !== 'object') {\r\n      ret.valid = false;\r\n      ret.error = baseMsg + 'must be an object, but ' + typeof ext + ' given';\r\n      return ret;\r\n    }\r\n\r\n    if (!showdown.helper.isString(ext.type)) {\r\n      ret.valid = false;\r\n      ret.error = baseMsg + 'property \"type\" must be a string, but ' + typeof ext.type + ' given';\r\n      return ret;\r\n    }\r\n\r\n    var type = ext.type = ext.type.toLowerCase();\r\n\r\n    // normalize extension type\r\n    if (type === 'language') {\r\n      type = ext.type = 'lang';\r\n    }\r\n\r\n    if (type === 'html') {\r\n      type = ext.type = 'output';\r\n    }\r\n\r\n    if (type !== 'lang' && type !== 'output' && type !== 'listener') {\r\n      ret.valid = false;\r\n      ret.error = baseMsg + 'type ' + type + ' is not recognized. Valid values: \"lang/language\", \"output/html\" or \"listener\"';\r\n      return ret;\r\n    }\r\n\r\n    if (type === 'listener') {\r\n      if (showdown.helper.isUndefined(ext.listeners)) {\r\n        ret.valid = false;\r\n        ret.error = baseMsg + '. Extensions of type \"listener\" must have a property called \"listeners\"';\r\n        return ret;\r\n      }\r\n    } else {\r\n      if (showdown.helper.isUndefined(ext.filter) && showdown.helper.isUndefined(ext.regex)) {\r\n        ret.valid = false;\r\n        ret.error = baseMsg + type + ' extensions must define either a \"regex\" property or a \"filter\" method';\r\n        return ret;\r\n      }\r\n    }\r\n\r\n    if (ext.listeners) {\r\n      if (typeof ext.listeners !== 'object') {\r\n        ret.valid = false;\r\n        ret.error = baseMsg + '\"listeners\" property must be an object but ' + typeof ext.listeners + ' given';\r\n        return ret;\r\n      }\r\n      for (var ln in ext.listeners) {\r\n        if (ext.listeners.hasOwnProperty(ln)) {\r\n          if (typeof ext.listeners[ln] !== 'function') {\r\n            ret.valid = false;\r\n            ret.error = baseMsg + '\"listeners\" property must be an hash of [event name]: [callback]. listeners.' + ln +\r\n              ' must be a function but ' + typeof ext.listeners[ln] + ' given';\r\n            return ret;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (ext.filter) {\r\n      if (typeof ext.filter !== 'function') {\r\n        ret.valid = false;\r\n        ret.error = baseMsg + '\"filter\" must be a function, but ' + typeof ext.filter + ' given';\r\n        return ret;\r\n      }\r\n    } else if (ext.regex) {\r\n      if (showdown.helper.isString(ext.regex)) {\r\n        ext.regex = new RegExp(ext.regex, 'g');\r\n      }\r\n      if (!(ext.regex instanceof RegExp)) {\r\n        ret.valid = false;\r\n        ret.error = baseMsg + '\"regex\" property must either be a string or a RegExp object, but ' + typeof ext.regex + ' given';\r\n        return ret;\r\n      }\r\n      if (showdown.helper.isUndefined(ext.replace)) {\r\n        ret.valid = false;\r\n        ret.error = baseMsg + '\"regex\" extensions must implement a replace string or function';\r\n        return ret;\r\n      }\r\n    }\r\n  }\r\n  return ret;\r\n}\r\n\r\n/**\r\n * Validate extension\r\n * @param {object} ext\r\n * @returns {boolean}\r\n */\r\nshowdown.validateExtension = function (ext) {\r\n  'use strict';\r\n\r\n  var validateExtension = validate(ext, null);\r\n  if (!validateExtension.valid) {\r\n    console.warn(validateExtension.error);\r\n    return false;\r\n  }\r\n  return true;\r\n};\r\n\r\n/**\r\n * showdownjs helper functions\r\n */\r\n\r\nif (!showdown.hasOwnProperty('helper')) {\r\n  showdown.helper = {};\r\n}\r\n\r\n/**\r\n * Check if var is string\r\n * @static\r\n * @param {string} a\r\n * @returns {boolean}\r\n */\r\nshowdown.helper.isString = function (a) {\r\n  'use strict';\r\n  return (typeof a === 'string' || a instanceof String);\r\n};\r\n\r\n/**\r\n * Check if var is a function\r\n * @static\r\n * @param {*} a\r\n * @returns {boolean}\r\n */\r\nshowdown.helper.isFunction = function (a) {\r\n  'use strict';\r\n  var getType = {};\r\n  return a && getType.toString.call(a) === '[object Function]';\r\n};\r\n\r\n/**\r\n * isArray helper function\r\n * @static\r\n * @param {*} a\r\n * @returns {boolean}\r\n */\r\nshowdown.helper.isArray = function (a) {\r\n  'use strict';\r\n  return Array.isArray(a);\r\n};\r\n\r\n/**\r\n * Check if value is undefined\r\n * @static\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\r\n */\r\nshowdown.helper.isUndefined = function (value) {\r\n  'use strict';\r\n  return typeof value === 'undefined';\r\n};\r\n\r\n/**\r\n * ForEach helper function\r\n * Iterates over Arrays and Objects (own properties only)\r\n * @static\r\n * @param {*} obj\r\n * @param {function} callback Accepts 3 params: 1. value, 2. key, 3. the original array/object\r\n */\r\nshowdown.helper.forEach = function (obj, callback) {\r\n  'use strict';\r\n  // check if obj is defined\r\n  if (showdown.helper.isUndefined(obj)) {\r\n    throw new Error('obj param is required');\r\n  }\r\n\r\n  if (showdown.helper.isUndefined(callback)) {\r\n    throw new Error('callback param is required');\r\n  }\r\n\r\n  if (!showdown.helper.isFunction(callback)) {\r\n    throw new Error('callback param must be a function/closure');\r\n  }\r\n\r\n  if (typeof obj.forEach === 'function') {\r\n    obj.forEach(callback);\r\n  } else if (showdown.helper.isArray(obj)) {\r\n    for (var i = 0; i < obj.length; i++) {\r\n      callback(obj[i], i, obj);\r\n    }\r\n  } else if (typeof (obj) === 'object') {\r\n    for (var prop in obj) {\r\n      if (obj.hasOwnProperty(prop)) {\r\n        callback(obj[prop], prop, obj);\r\n      }\r\n    }\r\n  } else {\r\n    throw new Error('obj does not seem to be an array or an iterable object');\r\n  }\r\n};\r\n\r\n/**\r\n * Standardidize extension name\r\n * @static\r\n * @param {string} s extension name\r\n * @returns {string}\r\n */\r\nshowdown.helper.stdExtName = function (s) {\r\n  'use strict';\r\n  return s.replace(/[_?*+\\/\\\\.^-]/g, '').replace(/\\s/g, '').toLowerCase();\r\n};\r\n\r\nfunction escapeCharactersCallback (wholeMatch, m1) {\r\n  'use strict';\r\n  var charCodeToEscape = m1.charCodeAt(0);\r\n  return '¨E' + charCodeToEscape + 'E';\r\n}\r\n\r\n/**\r\n * Callback used to escape characters when passing through String.replace\r\n * @static\r\n * @param {string} wholeMatch\r\n * @param {string} m1\r\n * @returns {string}\r\n */\r\nshowdown.helper.escapeCharactersCallback = escapeCharactersCallback;\r\n\r\n/**\r\n * Escape characters in a string\r\n * @static\r\n * @param {string} text\r\n * @param {string} charsToEscape\r\n * @param {boolean} afterBackslash\r\n * @returns {XML|string|void|*}\r\n */\r\nshowdown.helper.escapeCharacters = function (text, charsToEscape, afterBackslash) {\r\n  'use strict';\r\n  // First we have to escape the escape characters so that\r\n  // we can build a character class out of them\r\n  var regexString = '([' + charsToEscape.replace(/([\\[\\]\\\\])/g, '\\\\$1') + '])';\r\n\r\n  if (afterBackslash) {\r\n    regexString = '\\\\\\\\' + regexString;\r\n  }\r\n\r\n  var regex = new RegExp(regexString, 'g');\r\n  text = text.replace(regex, escapeCharactersCallback);\r\n\r\n  return text;\r\n};\r\n\r\n/**\r\n * Unescape HTML entities\r\n * @param txt\r\n * @returns {string}\r\n */\r\nshowdown.helper.unescapeHTMLEntities = function (txt) {\r\n  'use strict';\r\n\r\n  return txt\r\n    .replace(/&quot;/g, '\"')\r\n    .replace(/&lt;/g, '<')\r\n    .replace(/&gt;/g, '>')\r\n    .replace(/&amp;/g, '&');\r\n};\r\n\r\nvar rgxFindMatchPos = function (str, left, right, flags) {\r\n  'use strict';\r\n  var f = flags || '',\r\n      g = f.indexOf('g') > -1,\r\n      x = new RegExp(left + '|' + right, 'g' + f.replace(/g/g, '')),\r\n      l = new RegExp(left, f.replace(/g/g, '')),\r\n      pos = [],\r\n      t, s, m, start, end;\r\n\r\n  do {\r\n    t = 0;\r\n    while ((m = x.exec(str))) {\r\n      if (l.test(m[0])) {\r\n        if (!(t++)) {\r\n          s = x.lastIndex;\r\n          start = s - m[0].length;\r\n        }\r\n      } else if (t) {\r\n        if (!--t) {\r\n          end = m.index + m[0].length;\r\n          var obj = {\r\n            left: {start: start, end: s},\r\n            match: {start: s, end: m.index},\r\n            right: {start: m.index, end: end},\r\n            wholeMatch: {start: start, end: end}\r\n          };\r\n          pos.push(obj);\r\n          if (!g) {\r\n            return pos;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  } while (t && (x.lastIndex = s));\r\n\r\n  return pos;\r\n};\r\n\r\n/**\r\n * matchRecursiveRegExp\r\n *\r\n * (c) 2007 Steven Levithan <stevenlevithan.com>\r\n * MIT License\r\n *\r\n * Accepts a string to search, a left and right format delimiter\r\n * as regex patterns, and optional regex flags. Returns an array\r\n * of matches, allowing nested instances of left/right delimiters.\r\n * Use the \"g\" flag to return all matches, otherwise only the\r\n * first is returned. Be careful to ensure that the left and\r\n * right format delimiters produce mutually exclusive matches.\r\n * Backreferences are not supported within the right delimiter\r\n * due to how it is internally combined with the left delimiter.\r\n * When matching strings whose format delimiters are unbalanced\r\n * to the left or right, the output is intentionally as a\r\n * conventional regex library with recursion support would\r\n * produce, e.g. \"<<x>\" and \"<x>>\" both produce [\"x\"] when using\r\n * \"<\" and \">\" as the delimiters (both strings contain a single,\r\n * balanced instance of \"<x>\").\r\n *\r\n * examples:\r\n * matchRecursiveRegExp(\"test\", \"\\\\(\", \"\\\\)\")\r\n * returns: []\r\n * matchRecursiveRegExp(\"<t<<e>><s>>t<>\", \"<\", \">\", \"g\")\r\n * returns: [\"t<<e>><s>\", \"\"]\r\n * matchRecursiveRegExp(\"<div id=\\\"x\\\">test</div>\", \"<div\\\\b[^>]*>\", \"</div>\", \"gi\")\r\n * returns: [\"test\"]\r\n */\r\nshowdown.helper.matchRecursiveRegExp = function (str, left, right, flags) {\r\n  'use strict';\r\n\r\n  var matchPos = rgxFindMatchPos (str, left, right, flags),\r\n      results = [];\r\n\r\n  for (var i = 0; i < matchPos.length; ++i) {\r\n    results.push([\r\n      str.slice(matchPos[i].wholeMatch.start, matchPos[i].wholeMatch.end),\r\n      str.slice(matchPos[i].match.start, matchPos[i].match.end),\r\n      str.slice(matchPos[i].left.start, matchPos[i].left.end),\r\n      str.slice(matchPos[i].right.start, matchPos[i].right.end)\r\n    ]);\r\n  }\r\n  return results;\r\n};\r\n\r\n/**\r\n *\r\n * @param {string} str\r\n * @param {string|function} replacement\r\n * @param {string} left\r\n * @param {string} right\r\n * @param {string} flags\r\n * @returns {string}\r\n */\r\nshowdown.helper.replaceRecursiveRegExp = function (str, replacement, left, right, flags) {\r\n  'use strict';\r\n\r\n  if (!showdown.helper.isFunction(replacement)) {\r\n    var repStr = replacement;\r\n    replacement = function () {\r\n      return repStr;\r\n    };\r\n  }\r\n\r\n  var matchPos = rgxFindMatchPos(str, left, right, flags),\r\n      finalStr = str,\r\n      lng = matchPos.length;\r\n\r\n  if (lng > 0) {\r\n    var bits = [];\r\n    if (matchPos[0].wholeMatch.start !== 0) {\r\n      bits.push(str.slice(0, matchPos[0].wholeMatch.start));\r\n    }\r\n    for (var i = 0; i < lng; ++i) {\r\n      bits.push(\r\n        replacement(\r\n          str.slice(matchPos[i].wholeMatch.start, matchPos[i].wholeMatch.end),\r\n          str.slice(matchPos[i].match.start, matchPos[i].match.end),\r\n          str.slice(matchPos[i].left.start, matchPos[i].left.end),\r\n          str.slice(matchPos[i].right.start, matchPos[i].right.end)\r\n        )\r\n      );\r\n      if (i < lng - 1) {\r\n        bits.push(str.slice(matchPos[i].wholeMatch.end, matchPos[i + 1].wholeMatch.start));\r\n      }\r\n    }\r\n    if (matchPos[lng - 1].wholeMatch.end < str.length) {\r\n      bits.push(str.slice(matchPos[lng - 1].wholeMatch.end));\r\n    }\r\n    finalStr = bits.join('');\r\n  }\r\n  return finalStr;\r\n};\r\n\r\n/**\r\n * Returns the index within the passed String object of the first occurrence of the specified regex,\r\n * starting the search at fromIndex. Returns -1 if the value is not found.\r\n *\r\n * @param {string} str string to search\r\n * @param {RegExp} regex Regular expression to search\r\n * @param {int} [fromIndex = 0] Index to start the search\r\n * @returns {Number}\r\n * @throws InvalidArgumentError\r\n */\r\nshowdown.helper.regexIndexOf = function (str, regex, fromIndex) {\r\n  'use strict';\r\n  if (!showdown.helper.isString(str)) {\r\n    throw 'InvalidArgumentError: first parameter of showdown.helper.regexIndexOf function must be a string';\r\n  }\r\n  if (regex instanceof RegExp === false) {\r\n    throw 'InvalidArgumentError: second parameter of showdown.helper.regexIndexOf function must be an instance of RegExp';\r\n  }\r\n  var indexOf = str.substring(fromIndex || 0).search(regex);\r\n  return (indexOf >= 0) ? (indexOf + (fromIndex || 0)) : indexOf;\r\n};\r\n\r\n/**\r\n * Splits the passed string object at the defined index, and returns an array composed of the two substrings\r\n * @param {string} str string to split\r\n * @param {int} index index to split string at\r\n * @returns {[string,string]}\r\n * @throws InvalidArgumentError\r\n */\r\nshowdown.helper.splitAtIndex = function (str, index) {\r\n  'use strict';\r\n  if (!showdown.helper.isString(str)) {\r\n    throw 'InvalidArgumentError: first parameter of showdown.helper.regexIndexOf function must be a string';\r\n  }\r\n  return [str.substring(0, index), str.substring(index)];\r\n};\r\n\r\n/**\r\n * Obfuscate an e-mail address through the use of Character Entities,\r\n * transforming ASCII characters into their equivalent decimal or hex entities.\r\n *\r\n * Since it has a random component, subsequent calls to this function produce different results\r\n *\r\n * @param {string} mail\r\n * @returns {string}\r\n */\r\nshowdown.helper.encodeEmailAddress = function (mail) {\r\n  'use strict';\r\n  var encode = [\r\n    function (ch) {\r\n      return '&#' + ch.charCodeAt(0) + ';';\r\n    },\r\n    function (ch) {\r\n      return '&#x' + ch.charCodeAt(0).toString(16) + ';';\r\n    },\r\n    function (ch) {\r\n      return ch;\r\n    }\r\n  ];\r\n\r\n  mail = mail.replace(/./g, function (ch) {\r\n    if (ch === '@') {\r\n      // this *must* be encoded. I insist.\r\n      ch = encode[Math.floor(Math.random() * 2)](ch);\r\n    } else {\r\n      var r = Math.random();\r\n      // roughly 10% raw, 45% hex, 45% dec\r\n      ch = (\r\n        r > 0.9 ? encode[2](ch) : r > 0.45 ? encode[1](ch) : encode[0](ch)\r\n      );\r\n    }\r\n    return ch;\r\n  });\r\n\r\n  return mail;\r\n};\r\n\r\n/**\r\n *\r\n * @param str\r\n * @param targetLength\r\n * @param padString\r\n * @returns {string}\r\n */\r\nshowdown.helper.padEnd = function padEnd (str, targetLength, padString) {\r\n  'use strict';\r\n  /*jshint bitwise: false*/\r\n  // eslint-disable-next-line space-infix-ops\r\n  targetLength = targetLength>>0; //floor if number or convert non-number to 0;\r\n  /*jshint bitwise: true*/\r\n  padString = String(padString || ' ');\r\n  if (str.length > targetLength) {\r\n    return String(str);\r\n  } else {\r\n    targetLength = targetLength - str.length;\r\n    if (targetLength > padString.length) {\r\n      padString += padString.repeat(targetLength / padString.length); //append to original to ensure we are longer than needed\r\n    }\r\n    return String(str) + padString.slice(0,targetLength);\r\n  }\r\n};\r\n\r\n/**\r\n * POLYFILLS\r\n */\r\n// use this instead of builtin is undefined for IE8 compatibility\r\nif (typeof console === 'undefined') {\r\n  console = {\r\n    warn: function (msg) {\r\n      'use strict';\r\n      alert(msg);\r\n    },\r\n    log: function (msg) {\r\n      'use strict';\r\n      alert(msg);\r\n    },\r\n    error: function (msg) {\r\n      'use strict';\r\n      throw msg;\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Common regexes.\r\n * We declare some common regexes to improve performance\r\n */\r\nshowdown.helper.regexes = {\r\n  asteriskDashAndColon: /([*_:~])/g\r\n};\r\n\r\n/**\r\n * EMOJIS LIST\r\n */\r\nshowdown.helper.emojis = {\r\n  '+1':'\\ud83d\\udc4d',\r\n  '-1':'\\ud83d\\udc4e',\r\n  '100':'\\ud83d\\udcaf',\r\n  '1234':'\\ud83d\\udd22',\r\n  '1st_place_medal':'\\ud83e\\udd47',\r\n  '2nd_place_medal':'\\ud83e\\udd48',\r\n  '3rd_place_medal':'\\ud83e\\udd49',\r\n  '8ball':'\\ud83c\\udfb1',\r\n  'a':'\\ud83c\\udd70\\ufe0f',\r\n  'ab':'\\ud83c\\udd8e',\r\n  'abc':'\\ud83d\\udd24',\r\n  'abcd':'\\ud83d\\udd21',\r\n  'accept':'\\ud83c\\ude51',\r\n  'aerial_tramway':'\\ud83d\\udea1',\r\n  'airplane':'\\u2708\\ufe0f',\r\n  'alarm_clock':'\\u23f0',\r\n  'alembic':'\\u2697\\ufe0f',\r\n  'alien':'\\ud83d\\udc7d',\r\n  'ambulance':'\\ud83d\\ude91',\r\n  'amphora':'\\ud83c\\udffa',\r\n  'anchor':'\\u2693\\ufe0f',\r\n  'angel':'\\ud83d\\udc7c',\r\n  'anger':'\\ud83d\\udca2',\r\n  'angry':'\\ud83d\\ude20',\r\n  'anguished':'\\ud83d\\ude27',\r\n  'ant':'\\ud83d\\udc1c',\r\n  'apple':'\\ud83c\\udf4e',\r\n  'aquarius':'\\u2652\\ufe0f',\r\n  'aries':'\\u2648\\ufe0f',\r\n  'arrow_backward':'\\u25c0\\ufe0f',\r\n  'arrow_double_down':'\\u23ec',\r\n  'arrow_double_up':'\\u23eb',\r\n  'arrow_down':'\\u2b07\\ufe0f',\r\n  'arrow_down_small':'\\ud83d\\udd3d',\r\n  'arrow_forward':'\\u25b6\\ufe0f',\r\n  'arrow_heading_down':'\\u2935\\ufe0f',\r\n  'arrow_heading_up':'\\u2934\\ufe0f',\r\n  'arrow_left':'\\u2b05\\ufe0f',\r\n  'arrow_lower_left':'\\u2199\\ufe0f',\r\n  'arrow_lower_right':'\\u2198\\ufe0f',\r\n  'arrow_right':'\\u27a1\\ufe0f',\r\n  'arrow_right_hook':'\\u21aa\\ufe0f',\r\n  'arrow_up':'\\u2b06\\ufe0f',\r\n  'arrow_up_down':'\\u2195\\ufe0f',\r\n  'arrow_up_small':'\\ud83d\\udd3c',\r\n  'arrow_upper_left':'\\u2196\\ufe0f',\r\n  'arrow_upper_right':'\\u2197\\ufe0f',\r\n  'arrows_clockwise':'\\ud83d\\udd03',\r\n  'arrows_counterclockwise':'\\ud83d\\udd04',\r\n  'art':'\\ud83c\\udfa8',\r\n  'articulated_lorry':'\\ud83d\\ude9b',\r\n  'artificial_satellite':'\\ud83d\\udef0',\r\n  'astonished':'\\ud83d\\ude32',\r\n  'athletic_shoe':'\\ud83d\\udc5f',\r\n  'atm':'\\ud83c\\udfe7',\r\n  'atom_symbol':'\\u269b\\ufe0f',\r\n  'avocado':'\\ud83e\\udd51',\r\n  'b':'\\ud83c\\udd71\\ufe0f',\r\n  'baby':'\\ud83d\\udc76',\r\n  'baby_bottle':'\\ud83c\\udf7c',\r\n  'baby_chick':'\\ud83d\\udc24',\r\n  'baby_symbol':'\\ud83d\\udebc',\r\n  'back':'\\ud83d\\udd19',\r\n  'bacon':'\\ud83e\\udd53',\r\n  'badminton':'\\ud83c\\udff8',\r\n  'baggage_claim':'\\ud83d\\udec4',\r\n  'baguette_bread':'\\ud83e\\udd56',\r\n  'balance_scale':'\\u2696\\ufe0f',\r\n  'balloon':'\\ud83c\\udf88',\r\n  'ballot_box':'\\ud83d\\uddf3',\r\n  'ballot_box_with_check':'\\u2611\\ufe0f',\r\n  'bamboo':'\\ud83c\\udf8d',\r\n  'banana':'\\ud83c\\udf4c',\r\n  'bangbang':'\\u203c\\ufe0f',\r\n  'bank':'\\ud83c\\udfe6',\r\n  'bar_chart':'\\ud83d\\udcca',\r\n  'barber':'\\ud83d\\udc88',\r\n  'baseball':'\\u26be\\ufe0f',\r\n  'basketball':'\\ud83c\\udfc0',\r\n  'basketball_man':'\\u26f9\\ufe0f',\r\n  'basketball_woman':'\\u26f9\\ufe0f&zwj;\\u2640\\ufe0f',\r\n  'bat':'\\ud83e\\udd87',\r\n  'bath':'\\ud83d\\udec0',\r\n  'bathtub':'\\ud83d\\udec1',\r\n  'battery':'\\ud83d\\udd0b',\r\n  'beach_umbrella':'\\ud83c\\udfd6',\r\n  'bear':'\\ud83d\\udc3b',\r\n  'bed':'\\ud83d\\udecf',\r\n  'bee':'\\ud83d\\udc1d',\r\n  'beer':'\\ud83c\\udf7a',\r\n  'beers':'\\ud83c\\udf7b',\r\n  'beetle':'\\ud83d\\udc1e',\r\n  'beginner':'\\ud83d\\udd30',\r\n  'bell':'\\ud83d\\udd14',\r\n  'bellhop_bell':'\\ud83d\\udece',\r\n  'bento':'\\ud83c\\udf71',\r\n  'biking_man':'\\ud83d\\udeb4',\r\n  'bike':'\\ud83d\\udeb2',\r\n  'biking_woman':'\\ud83d\\udeb4&zwj;\\u2640\\ufe0f',\r\n  'bikini':'\\ud83d\\udc59',\r\n  'biohazard':'\\u2623\\ufe0f',\r\n  'bird':'\\ud83d\\udc26',\r\n  'birthday':'\\ud83c\\udf82',\r\n  'black_circle':'\\u26ab\\ufe0f',\r\n  'black_flag':'\\ud83c\\udff4',\r\n  'black_heart':'\\ud83d\\udda4',\r\n  'black_joker':'\\ud83c\\udccf',\r\n  'black_large_square':'\\u2b1b\\ufe0f',\r\n  'black_medium_small_square':'\\u25fe\\ufe0f',\r\n  'black_medium_square':'\\u25fc\\ufe0f',\r\n  'black_nib':'\\u2712\\ufe0f',\r\n  'black_small_square':'\\u25aa\\ufe0f',\r\n  'black_square_button':'\\ud83d\\udd32',\r\n  'blonde_man':'\\ud83d\\udc71',\r\n  'blonde_woman':'\\ud83d\\udc71&zwj;\\u2640\\ufe0f',\r\n  'blossom':'\\ud83c\\udf3c',\r\n  'blowfish':'\\ud83d\\udc21',\r\n  'blue_book':'\\ud83d\\udcd8',\r\n  'blue_car':'\\ud83d\\ude99',\r\n  'blue_heart':'\\ud83d\\udc99',\r\n  'blush':'\\ud83d\\ude0a',\r\n  'boar':'\\ud83d\\udc17',\r\n  'boat':'\\u26f5\\ufe0f',\r\n  'bomb':'\\ud83d\\udca3',\r\n  'book':'\\ud83d\\udcd6',\r\n  'bookmark':'\\ud83d\\udd16',\r\n  'bookmark_tabs':'\\ud83d\\udcd1',\r\n  'books':'\\ud83d\\udcda',\r\n  'boom':'\\ud83d\\udca5',\r\n  'boot':'\\ud83d\\udc62',\r\n  'bouquet':'\\ud83d\\udc90',\r\n  'bowing_man':'\\ud83d\\ude47',\r\n  'bow_and_arrow':'\\ud83c\\udff9',\r\n  'bowing_woman':'\\ud83d\\ude47&zwj;\\u2640\\ufe0f',\r\n  'bowling':'\\ud83c\\udfb3',\r\n  'boxing_glove':'\\ud83e\\udd4a',\r\n  'boy':'\\ud83d\\udc66',\r\n  'bread':'\\ud83c\\udf5e',\r\n  'bride_with_veil':'\\ud83d\\udc70',\r\n  'bridge_at_night':'\\ud83c\\udf09',\r\n  'briefcase':'\\ud83d\\udcbc',\r\n  'broken_heart':'\\ud83d\\udc94',\r\n  'bug':'\\ud83d\\udc1b',\r\n  'building_construction':'\\ud83c\\udfd7',\r\n  'bulb':'\\ud83d\\udca1',\r\n  'bullettrain_front':'\\ud83d\\ude85',\r\n  'bullettrain_side':'\\ud83d\\ude84',\r\n  'burrito':'\\ud83c\\udf2f',\r\n  'bus':'\\ud83d\\ude8c',\r\n  'business_suit_levitating':'\\ud83d\\udd74',\r\n  'busstop':'\\ud83d\\ude8f',\r\n  'bust_in_silhouette':'\\ud83d\\udc64',\r\n  'busts_in_silhouette':'\\ud83d\\udc65',\r\n  'butterfly':'\\ud83e\\udd8b',\r\n  'cactus':'\\ud83c\\udf35',\r\n  'cake':'\\ud83c\\udf70',\r\n  'calendar':'\\ud83d\\udcc6',\r\n  'call_me_hand':'\\ud83e\\udd19',\r\n  'calling':'\\ud83d\\udcf2',\r\n  'camel':'\\ud83d\\udc2b',\r\n  'camera':'\\ud83d\\udcf7',\r\n  'camera_flash':'\\ud83d\\udcf8',\r\n  'camping':'\\ud83c\\udfd5',\r\n  'cancer':'\\u264b\\ufe0f',\r\n  'candle':'\\ud83d\\udd6f',\r\n  'candy':'\\ud83c\\udf6c',\r\n  'canoe':'\\ud83d\\udef6',\r\n  'capital_abcd':'\\ud83d\\udd20',\r\n  'capricorn':'\\u2651\\ufe0f',\r\n  'car':'\\ud83d\\ude97',\r\n  'card_file_box':'\\ud83d\\uddc3',\r\n  'card_index':'\\ud83d\\udcc7',\r\n  'card_index_dividers':'\\ud83d\\uddc2',\r\n  'carousel_horse':'\\ud83c\\udfa0',\r\n  'carrot':'\\ud83e\\udd55',\r\n  'cat':'\\ud83d\\udc31',\r\n  'cat2':'\\ud83d\\udc08',\r\n  'cd':'\\ud83d\\udcbf',\r\n  'chains':'\\u26d3',\r\n  'champagne':'\\ud83c\\udf7e',\r\n  'chart':'\\ud83d\\udcb9',\r\n  'chart_with_downwards_trend':'\\ud83d\\udcc9',\r\n  'chart_with_upwards_trend':'\\ud83d\\udcc8',\r\n  'checkered_flag':'\\ud83c\\udfc1',\r\n  'cheese':'\\ud83e\\uddc0',\r\n  'cherries':'\\ud83c\\udf52',\r\n  'cherry_blossom':'\\ud83c\\udf38',\r\n  'chestnut':'\\ud83c\\udf30',\r\n  'chicken':'\\ud83d\\udc14',\r\n  'children_crossing':'\\ud83d\\udeb8',\r\n  'chipmunk':'\\ud83d\\udc3f',\r\n  'chocolate_bar':'\\ud83c\\udf6b',\r\n  'christmas_tree':'\\ud83c\\udf84',\r\n  'church':'\\u26ea\\ufe0f',\r\n  'cinema':'\\ud83c\\udfa6',\r\n  'circus_tent':'\\ud83c\\udfaa',\r\n  'city_sunrise':'\\ud83c\\udf07',\r\n  'city_sunset':'\\ud83c\\udf06',\r\n  'cityscape':'\\ud83c\\udfd9',\r\n  'cl':'\\ud83c\\udd91',\r\n  'clamp':'\\ud83d\\udddc',\r\n  'clap':'\\ud83d\\udc4f',\r\n  'clapper':'\\ud83c\\udfac',\r\n  'classical_building':'\\ud83c\\udfdb',\r\n  'clinking_glasses':'\\ud83e\\udd42',\r\n  'clipboard':'\\ud83d\\udccb',\r\n  'clock1':'\\ud83d\\udd50',\r\n  'clock10':'\\ud83d\\udd59',\r\n  'clock1030':'\\ud83d\\udd65',\r\n  'clock11':'\\ud83d\\udd5a',\r\n  'clock1130':'\\ud83d\\udd66',\r\n  'clock12':'\\ud83d\\udd5b',\r\n  'clock1230':'\\ud83d\\udd67',\r\n  'clock130':'\\ud83d\\udd5c',\r\n  'clock2':'\\ud83d\\udd51',\r\n  'clock230':'\\ud83d\\udd5d',\r\n  'clock3':'\\ud83d\\udd52',\r\n  'clock330':'\\ud83d\\udd5e',\r\n  'clock4':'\\ud83d\\udd53',\r\n  'clock430':'\\ud83d\\udd5f',\r\n  'clock5':'\\ud83d\\udd54',\r\n  'clock530':'\\ud83d\\udd60',\r\n  'clock6':'\\ud83d\\udd55',\r\n  'clock630':'\\ud83d\\udd61',\r\n  'clock7':'\\ud83d\\udd56',\r\n  'clock730':'\\ud83d\\udd62',\r\n  'clock8':'\\ud83d\\udd57',\r\n  'clock830':'\\ud83d\\udd63',\r\n  'clock9':'\\ud83d\\udd58',\r\n  'clock930':'\\ud83d\\udd64',\r\n  'closed_book':'\\ud83d\\udcd5',\r\n  'closed_lock_with_key':'\\ud83d\\udd10',\r\n  'closed_umbrella':'\\ud83c\\udf02',\r\n  'cloud':'\\u2601\\ufe0f',\r\n  'cloud_with_lightning':'\\ud83c\\udf29',\r\n  'cloud_with_lightning_and_rain':'\\u26c8',\r\n  'cloud_with_rain':'\\ud83c\\udf27',\r\n  'cloud_with_snow':'\\ud83c\\udf28',\r\n  'clown_face':'\\ud83e\\udd21',\r\n  'clubs':'\\u2663\\ufe0f',\r\n  'cocktail':'\\ud83c\\udf78',\r\n  'coffee':'\\u2615\\ufe0f',\r\n  'coffin':'\\u26b0\\ufe0f',\r\n  'cold_sweat':'\\ud83d\\ude30',\r\n  'comet':'\\u2604\\ufe0f',\r\n  'computer':'\\ud83d\\udcbb',\r\n  'computer_mouse':'\\ud83d\\uddb1',\r\n  'confetti_ball':'\\ud83c\\udf8a',\r\n  'confounded':'\\ud83d\\ude16',\r\n  'confused':'\\ud83d\\ude15',\r\n  'congratulations':'\\u3297\\ufe0f',\r\n  'construction':'\\ud83d\\udea7',\r\n  'construction_worker_man':'\\ud83d\\udc77',\r\n  'construction_worker_woman':'\\ud83d\\udc77&zwj;\\u2640\\ufe0f',\r\n  'control_knobs':'\\ud83c\\udf9b',\r\n  'convenience_store':'\\ud83c\\udfea',\r\n  'cookie':'\\ud83c\\udf6a',\r\n  'cool':'\\ud83c\\udd92',\r\n  'policeman':'\\ud83d\\udc6e',\r\n  'copyright':'\\u00a9\\ufe0f',\r\n  'corn':'\\ud83c\\udf3d',\r\n  'couch_and_lamp':'\\ud83d\\udecb',\r\n  'couple':'\\ud83d\\udc6b',\r\n  'couple_with_heart_woman_man':'\\ud83d\\udc91',\r\n  'couple_with_heart_man_man':'\\ud83d\\udc68&zwj;\\u2764\\ufe0f&zwj;\\ud83d\\udc68',\r\n  'couple_with_heart_woman_woman':'\\ud83d\\udc69&zwj;\\u2764\\ufe0f&zwj;\\ud83d\\udc69',\r\n  'couplekiss_man_man':'\\ud83d\\udc68&zwj;\\u2764\\ufe0f&zwj;\\ud83d\\udc8b&zwj;\\ud83d\\udc68',\r\n  'couplekiss_man_woman':'\\ud83d\\udc8f',\r\n  'couplekiss_woman_woman':'\\ud83d\\udc69&zwj;\\u2764\\ufe0f&zwj;\\ud83d\\udc8b&zwj;\\ud83d\\udc69',\r\n  'cow':'\\ud83d\\udc2e',\r\n  'cow2':'\\ud83d\\udc04',\r\n  'cowboy_hat_face':'\\ud83e\\udd20',\r\n  'crab':'\\ud83e\\udd80',\r\n  'crayon':'\\ud83d\\udd8d',\r\n  'credit_card':'\\ud83d\\udcb3',\r\n  'crescent_moon':'\\ud83c\\udf19',\r\n  'cricket':'\\ud83c\\udfcf',\r\n  'crocodile':'\\ud83d\\udc0a',\r\n  'croissant':'\\ud83e\\udd50',\r\n  'crossed_fingers':'\\ud83e\\udd1e',\r\n  'crossed_flags':'\\ud83c\\udf8c',\r\n  'crossed_swords':'\\u2694\\ufe0f',\r\n  'crown':'\\ud83d\\udc51',\r\n  'cry':'\\ud83d\\ude22',\r\n  'crying_cat_face':'\\ud83d\\ude3f',\r\n  'crystal_ball':'\\ud83d\\udd2e',\r\n  'cucumber':'\\ud83e\\udd52',\r\n  'cupid':'\\ud83d\\udc98',\r\n  'curly_loop':'\\u27b0',\r\n  'currency_exchange':'\\ud83d\\udcb1',\r\n  'curry':'\\ud83c\\udf5b',\r\n  'custard':'\\ud83c\\udf6e',\r\n  'customs':'\\ud83d\\udec3',\r\n  'cyclone':'\\ud83c\\udf00',\r\n  'dagger':'\\ud83d\\udde1',\r\n  'dancer':'\\ud83d\\udc83',\r\n  'dancing_women':'\\ud83d\\udc6f',\r\n  'dancing_men':'\\ud83d\\udc6f&zwj;\\u2642\\ufe0f',\r\n  'dango':'\\ud83c\\udf61',\r\n  'dark_sunglasses':'\\ud83d\\udd76',\r\n  'dart':'\\ud83c\\udfaf',\r\n  'dash':'\\ud83d\\udca8',\r\n  'date':'\\ud83d\\udcc5',\r\n  'deciduous_tree':'\\ud83c\\udf33',\r\n  'deer':'\\ud83e\\udd8c',\r\n  'department_store':'\\ud83c\\udfec',\r\n  'derelict_house':'\\ud83c\\udfda',\r\n  'desert':'\\ud83c\\udfdc',\r\n  'desert_island':'\\ud83c\\udfdd',\r\n  'desktop_computer':'\\ud83d\\udda5',\r\n  'male_detective':'\\ud83d\\udd75\\ufe0f',\r\n  'diamond_shape_with_a_dot_inside':'\\ud83d\\udca0',\r\n  'diamonds':'\\u2666\\ufe0f',\r\n  'disappointed':'\\ud83d\\ude1e',\r\n  'disappointed_relieved':'\\ud83d\\ude25',\r\n  'dizzy':'\\ud83d\\udcab',\r\n  'dizzy_face':'\\ud83d\\ude35',\r\n  'do_not_litter':'\\ud83d\\udeaf',\r\n  'dog':'\\ud83d\\udc36',\r\n  'dog2':'\\ud83d\\udc15',\r\n  'dollar':'\\ud83d\\udcb5',\r\n  'dolls':'\\ud83c\\udf8e',\r\n  'dolphin':'\\ud83d\\udc2c',\r\n  'door':'\\ud83d\\udeaa',\r\n  'doughnut':'\\ud83c\\udf69',\r\n  'dove':'\\ud83d\\udd4a',\r\n  'dragon':'\\ud83d\\udc09',\r\n  'dragon_face':'\\ud83d\\udc32',\r\n  'dress':'\\ud83d\\udc57',\r\n  'dromedary_camel':'\\ud83d\\udc2a',\r\n  'drooling_face':'\\ud83e\\udd24',\r\n  'droplet':'\\ud83d\\udca7',\r\n  'drum':'\\ud83e\\udd41',\r\n  'duck':'\\ud83e\\udd86',\r\n  'dvd':'\\ud83d\\udcc0',\r\n  'e-mail':'\\ud83d\\udce7',\r\n  'eagle':'\\ud83e\\udd85',\r\n  'ear':'\\ud83d\\udc42',\r\n  'ear_of_rice':'\\ud83c\\udf3e',\r\n  'earth_africa':'\\ud83c\\udf0d',\r\n  'earth_americas':'\\ud83c\\udf0e',\r\n  'earth_asia':'\\ud83c\\udf0f',\r\n  'egg':'\\ud83e\\udd5a',\r\n  'eggplant':'\\ud83c\\udf46',\r\n  'eight_pointed_black_star':'\\u2734\\ufe0f',\r\n  'eight_spoked_asterisk':'\\u2733\\ufe0f',\r\n  'electric_plug':'\\ud83d\\udd0c',\r\n  'elephant':'\\ud83d\\udc18',\r\n  'email':'\\u2709\\ufe0f',\r\n  'end':'\\ud83d\\udd1a',\r\n  'envelope_with_arrow':'\\ud83d\\udce9',\r\n  'euro':'\\ud83d\\udcb6',\r\n  'european_castle':'\\ud83c\\udff0',\r\n  'european_post_office':'\\ud83c\\udfe4',\r\n  'evergreen_tree':'\\ud83c\\udf32',\r\n  'exclamation':'\\u2757\\ufe0f',\r\n  'expressionless':'\\ud83d\\ude11',\r\n  'eye':'\\ud83d\\udc41',\r\n  'eye_speech_bubble':'\\ud83d\\udc41&zwj;\\ud83d\\udde8',\r\n  'eyeglasses':'\\ud83d\\udc53',\r\n  'eyes':'\\ud83d\\udc40',\r\n  'face_with_head_bandage':'\\ud83e\\udd15',\r\n  'face_with_thermometer':'\\ud83e\\udd12',\r\n  'fist_oncoming':'\\ud83d\\udc4a',\r\n  'factory':'\\ud83c\\udfed',\r\n  'fallen_leaf':'\\ud83c\\udf42',\r\n  'family_man_woman_boy':'\\ud83d\\udc6a',\r\n  'family_man_boy':'\\ud83d\\udc68&zwj;\\ud83d\\udc66',\r\n  'family_man_boy_boy':'\\ud83d\\udc68&zwj;\\ud83d\\udc66&zwj;\\ud83d\\udc66',\r\n  'family_man_girl':'\\ud83d\\udc68&zwj;\\ud83d\\udc67',\r\n  'family_man_girl_boy':'\\ud83d\\udc68&zwj;\\ud83d\\udc67&zwj;\\ud83d\\udc66',\r\n  'family_man_girl_girl':'\\ud83d\\udc68&zwj;\\ud83d\\udc67&zwj;\\ud83d\\udc67',\r\n  'family_man_man_boy':'\\ud83d\\udc68&zwj;\\ud83d\\udc68&zwj;\\ud83d\\udc66',\r\n  'family_man_man_boy_boy':'\\ud83d\\udc68&zwj;\\ud83d\\udc68&zwj;\\ud83d\\udc66&zwj;\\ud83d\\udc66',\r\n  'family_man_man_girl':'\\ud83d\\udc68&zwj;\\ud83d\\udc68&zwj;\\ud83d\\udc67',\r\n  'family_man_man_girl_boy':'\\ud83d\\udc68&zwj;\\ud83d\\udc68&zwj;\\ud83d\\udc67&zwj;\\ud83d\\udc66',\r\n  'family_man_man_girl_girl':'\\ud83d\\udc68&zwj;\\ud83d\\udc68&zwj;\\ud83d\\udc67&zwj;\\ud83d\\udc67',\r\n  'family_man_woman_boy_boy':'\\ud83d\\udc68&zwj;\\ud83d\\udc69&zwj;\\ud83d\\udc66&zwj;\\ud83d\\udc66',\r\n  'family_man_woman_girl':'\\ud83d\\udc68&zwj;\\ud83d\\udc69&zwj;\\ud83d\\udc67',\r\n  'family_man_woman_girl_boy':'\\ud83d\\udc68&zwj;\\ud83d\\udc69&zwj;\\ud83d\\udc67&zwj;\\ud83d\\udc66',\r\n  'family_man_woman_girl_girl':'\\ud83d\\udc68&zwj;\\ud83d\\udc69&zwj;\\ud83d\\udc67&zwj;\\ud83d\\udc67',\r\n  'family_woman_boy':'\\ud83d\\udc69&zwj;\\ud83d\\udc66',\r\n  'family_woman_boy_boy':'\\ud83d\\udc69&zwj;\\ud83d\\udc66&zwj;\\ud83d\\udc66',\r\n  'family_woman_girl':'\\ud83d\\udc69&zwj;\\ud83d\\udc67',\r\n  'family_woman_girl_boy':'\\ud83d\\udc69&zwj;\\ud83d\\udc67&zwj;\\ud83d\\udc66',\r\n  'family_woman_girl_girl':'\\ud83d\\udc69&zwj;\\ud83d\\udc67&zwj;\\ud83d\\udc67',\r\n  'family_woman_woman_boy':'\\ud83d\\udc69&zwj;\\ud83d\\udc69&zwj;\\ud83d\\udc66',\r\n  'family_woman_woman_boy_boy':'\\ud83d\\udc69&zwj;\\ud83d\\udc69&zwj;\\ud83d\\udc66&zwj;\\ud83d\\udc66',\r\n  'family_woman_woman_girl':'\\ud83d\\udc69&zwj;\\ud83d\\udc69&zwj;\\ud83d\\udc67',\r\n  'family_woman_woman_girl_boy':'\\ud83d\\udc69&zwj;\\ud83d\\udc69&zwj;\\ud83d\\udc67&zwj;\\ud83d\\udc66',\r\n  'family_woman_woman_girl_girl':'\\ud83d\\udc69&zwj;\\ud83d\\udc69&zwj;\\ud83d\\udc67&zwj;\\ud83d\\udc67',\r\n  'fast_forward':'\\u23e9',\r\n  'fax':'\\ud83d\\udce0',\r\n  'fearful':'\\ud83d\\ude28',\r\n  'feet':'\\ud83d\\udc3e',\r\n  'female_detective':'\\ud83d\\udd75\\ufe0f&zwj;\\u2640\\ufe0f',\r\n  'ferris_wheel':'\\ud83c\\udfa1',\r\n  'ferry':'\\u26f4',\r\n  'field_hockey':'\\ud83c\\udfd1',\r\n  'file_cabinet':'\\ud83d\\uddc4',\r\n  'file_folder':'\\ud83d\\udcc1',\r\n  'film_projector':'\\ud83d\\udcfd',\r\n  'film_strip':'\\ud83c\\udf9e',\r\n  'fire':'\\ud83d\\udd25',\r\n  'fire_engine':'\\ud83d\\ude92',\r\n  'fireworks':'\\ud83c\\udf86',\r\n  'first_quarter_moon':'\\ud83c\\udf13',\r\n  'first_quarter_moon_with_face':'\\ud83c\\udf1b',\r\n  'fish':'\\ud83d\\udc1f',\r\n  'fish_cake':'\\ud83c\\udf65',\r\n  'fishing_pole_and_fish':'\\ud83c\\udfa3',\r\n  'fist_raised':'\\u270a',\r\n  'fist_left':'\\ud83e\\udd1b',\r\n  'fist_right':'\\ud83e\\udd1c',\r\n  'flags':'\\ud83c\\udf8f',\r\n  'flashlight':'\\ud83d\\udd26',\r\n  'fleur_de_lis':'\\u269c\\ufe0f',\r\n  'flight_arrival':'\\ud83d\\udeec',\r\n  'flight_departure':'\\ud83d\\udeeb',\r\n  'floppy_disk':'\\ud83d\\udcbe',\r\n  'flower_playing_cards':'\\ud83c\\udfb4',\r\n  'flushed':'\\ud83d\\ude33',\r\n  'fog':'\\ud83c\\udf2b',\r\n  'foggy':'\\ud83c\\udf01',\r\n  'football':'\\ud83c\\udfc8',\r\n  'footprints':'\\ud83d\\udc63',\r\n  'fork_and_knife':'\\ud83c\\udf74',\r\n  'fountain':'\\u26f2\\ufe0f',\r\n  'fountain_pen':'\\ud83d\\udd8b',\r\n  'four_leaf_clover':'\\ud83c\\udf40',\r\n  'fox_face':'\\ud83e\\udd8a',\r\n  'framed_picture':'\\ud83d\\uddbc',\r\n  'free':'\\ud83c\\udd93',\r\n  'fried_egg':'\\ud83c\\udf73',\r\n  'fried_shrimp':'\\ud83c\\udf64',\r\n  'fries':'\\ud83c\\udf5f',\r\n  'frog':'\\ud83d\\udc38',\r\n  'frowning':'\\ud83d\\ude26',\r\n  'frowning_face':'\\u2639\\ufe0f',\r\n  'frowning_man':'\\ud83d\\ude4d&zwj;\\u2642\\ufe0f',\r\n  'frowning_woman':'\\ud83d\\ude4d',\r\n  'middle_finger':'\\ud83d\\udd95',\r\n  'fuelpump':'\\u26fd\\ufe0f',\r\n  'full_moon':'\\ud83c\\udf15',\r\n  'full_moon_with_face':'\\ud83c\\udf1d',\r\n  'funeral_urn':'\\u26b1\\ufe0f',\r\n  'game_die':'\\ud83c\\udfb2',\r\n  'gear':'\\u2699\\ufe0f',\r\n  'gem':'\\ud83d\\udc8e',\r\n  'gemini':'\\u264a\\ufe0f',\r\n  'ghost':'\\ud83d\\udc7b',\r\n  'gift':'\\ud83c\\udf81',\r\n  'gift_heart':'\\ud83d\\udc9d',\r\n  'girl':'\\ud83d\\udc67',\r\n  'globe_with_meridians':'\\ud83c\\udf10',\r\n  'goal_net':'\\ud83e\\udd45',\r\n  'goat':'\\ud83d\\udc10',\r\n  'golf':'\\u26f3\\ufe0f',\r\n  'golfing_man':'\\ud83c\\udfcc\\ufe0f',\r\n  'golfing_woman':'\\ud83c\\udfcc\\ufe0f&zwj;\\u2640\\ufe0f',\r\n  'gorilla':'\\ud83e\\udd8d',\r\n  'grapes':'\\ud83c\\udf47',\r\n  'green_apple':'\\ud83c\\udf4f',\r\n  'green_book':'\\ud83d\\udcd7',\r\n  'green_heart':'\\ud83d\\udc9a',\r\n  'green_salad':'\\ud83e\\udd57',\r\n  'grey_exclamation':'\\u2755',\r\n  'grey_question':'\\u2754',\r\n  'grimacing':'\\ud83d\\ude2c',\r\n  'grin':'\\ud83d\\ude01',\r\n  'grinning':'\\ud83d\\ude00',\r\n  'guardsman':'\\ud83d\\udc82',\r\n  'guardswoman':'\\ud83d\\udc82&zwj;\\u2640\\ufe0f',\r\n  'guitar':'\\ud83c\\udfb8',\r\n  'gun':'\\ud83d\\udd2b',\r\n  'haircut_woman':'\\ud83d\\udc87',\r\n  'haircut_man':'\\ud83d\\udc87&zwj;\\u2642\\ufe0f',\r\n  'hamburger':'\\ud83c\\udf54',\r\n  'hammer':'\\ud83d\\udd28',\r\n  'hammer_and_pick':'\\u2692',\r\n  'hammer_and_wrench':'\\ud83d\\udee0',\r\n  'hamster':'\\ud83d\\udc39',\r\n  'hand':'\\u270b',\r\n  'handbag':'\\ud83d\\udc5c',\r\n  'handshake':'\\ud83e\\udd1d',\r\n  'hankey':'\\ud83d\\udca9',\r\n  'hatched_chick':'\\ud83d\\udc25',\r\n  'hatching_chick':'\\ud83d\\udc23',\r\n  'headphones':'\\ud83c\\udfa7',\r\n  'hear_no_evil':'\\ud83d\\ude49',\r\n  'heart':'\\u2764\\ufe0f',\r\n  'heart_decoration':'\\ud83d\\udc9f',\r\n  'heart_eyes':'\\ud83d\\ude0d',\r\n  'heart_eyes_cat':'\\ud83d\\ude3b',\r\n  'heartbeat':'\\ud83d\\udc93',\r\n  'heartpulse':'\\ud83d\\udc97',\r\n  'hearts':'\\u2665\\ufe0f',\r\n  'heavy_check_mark':'\\u2714\\ufe0f',\r\n  'heavy_division_sign':'\\u2797',\r\n  'heavy_dollar_sign':'\\ud83d\\udcb2',\r\n  'heavy_heart_exclamation':'\\u2763\\ufe0f',\r\n  'heavy_minus_sign':'\\u2796',\r\n  'heavy_multiplication_x':'\\u2716\\ufe0f',\r\n  'heavy_plus_sign':'\\u2795',\r\n  'helicopter':'\\ud83d\\ude81',\r\n  'herb':'\\ud83c\\udf3f',\r\n  'hibiscus':'\\ud83c\\udf3a',\r\n  'high_brightness':'\\ud83d\\udd06',\r\n  'high_heel':'\\ud83d\\udc60',\r\n  'hocho':'\\ud83d\\udd2a',\r\n  'hole':'\\ud83d\\udd73',\r\n  'honey_pot':'\\ud83c\\udf6f',\r\n  'horse':'\\ud83d\\udc34',\r\n  'horse_racing':'\\ud83c\\udfc7',\r\n  'hospital':'\\ud83c\\udfe5',\r\n  'hot_pepper':'\\ud83c\\udf36',\r\n  'hotdog':'\\ud83c\\udf2d',\r\n  'hotel':'\\ud83c\\udfe8',\r\n  'hotsprings':'\\u2668\\ufe0f',\r\n  'hourglass':'\\u231b\\ufe0f',\r\n  'hourglass_flowing_sand':'\\u23f3',\r\n  'house':'\\ud83c\\udfe0',\r\n  'house_with_garden':'\\ud83c\\udfe1',\r\n  'houses':'\\ud83c\\udfd8',\r\n  'hugs':'\\ud83e\\udd17',\r\n  'hushed':'\\ud83d\\ude2f',\r\n  'ice_cream':'\\ud83c\\udf68',\r\n  'ice_hockey':'\\ud83c\\udfd2',\r\n  'ice_skate':'\\u26f8',\r\n  'icecream':'\\ud83c\\udf66',\r\n  'id':'\\ud83c\\udd94',\r\n  'ideograph_advantage':'\\ud83c\\ude50',\r\n  'imp':'\\ud83d\\udc7f',\r\n  'inbox_tray':'\\ud83d\\udce5',\r\n  'incoming_envelope':'\\ud83d\\udce8',\r\n  'tipping_hand_woman':'\\ud83d\\udc81',\r\n  'information_source':'\\u2139\\ufe0f',\r\n  'innocent':'\\ud83d\\ude07',\r\n  'interrobang':'\\u2049\\ufe0f',\r\n  'iphone':'\\ud83d\\udcf1',\r\n  'izakaya_lantern':'\\ud83c\\udfee',\r\n  'jack_o_lantern':'\\ud83c\\udf83',\r\n  'japan':'\\ud83d\\uddfe',\r\n  'japanese_castle':'\\ud83c\\udfef',\r\n  'japanese_goblin':'\\ud83d\\udc7a',\r\n  'japanese_ogre':'\\ud83d\\udc79',\r\n  'jeans':'\\ud83d\\udc56',\r\n  'joy':'\\ud83d\\ude02',\r\n  'joy_cat':'\\ud83d\\ude39',\r\n  'joystick':'\\ud83d\\udd79',\r\n  'kaaba':'\\ud83d\\udd4b',\r\n  'key':'\\ud83d\\udd11',\r\n  'keyboard':'\\u2328\\ufe0f',\r\n  'keycap_ten':'\\ud83d\\udd1f',\r\n  'kick_scooter':'\\ud83d\\udef4',\r\n  'kimono':'\\ud83d\\udc58',\r\n  'kiss':'\\ud83d\\udc8b',\r\n  'kissing':'\\ud83d\\ude17',\r\n  'kissing_cat':'\\ud83d\\ude3d',\r\n  'kissing_closed_eyes':'\\ud83d\\ude1a',\r\n  'kissing_heart':'\\ud83d\\ude18',\r\n  'kissing_smiling_eyes':'\\ud83d\\ude19',\r\n  'kiwi_fruit':'\\ud83e\\udd5d',\r\n  'koala':'\\ud83d\\udc28',\r\n  'koko':'\\ud83c\\ude01',\r\n  'label':'\\ud83c\\udff7',\r\n  'large_blue_circle':'\\ud83d\\udd35',\r\n  'large_blue_diamond':'\\ud83d\\udd37',\r\n  'large_orange_diamond':'\\ud83d\\udd36',\r\n  'last_quarter_moon':'\\ud83c\\udf17',\r\n  'last_quarter_moon_with_face':'\\ud83c\\udf1c',\r\n  'latin_cross':'\\u271d\\ufe0f',\r\n  'laughing':'\\ud83d\\ude06',\r\n  'leaves':'\\ud83c\\udf43',\r\n  'ledger':'\\ud83d\\udcd2',\r\n  'left_luggage':'\\ud83d\\udec5',\r\n  'left_right_arrow':'\\u2194\\ufe0f',\r\n  'leftwards_arrow_with_hook':'\\u21a9\\ufe0f',\r\n  'lemon':'\\ud83c\\udf4b',\r\n  'leo':'\\u264c\\ufe0f',\r\n  'leopard':'\\ud83d\\udc06',\r\n  'level_slider':'\\ud83c\\udf9a',\r\n  'libra':'\\u264e\\ufe0f',\r\n  'light_rail':'\\ud83d\\ude88',\r\n  'link':'\\ud83d\\udd17',\r\n  'lion':'\\ud83e\\udd81',\r\n  'lips':'\\ud83d\\udc44',\r\n  'lipstick':'\\ud83d\\udc84',\r\n  'lizard':'\\ud83e\\udd8e',\r\n  'lock':'\\ud83d\\udd12',\r\n  'lock_with_ink_pen':'\\ud83d\\udd0f',\r\n  'lollipop':'\\ud83c\\udf6d',\r\n  'loop':'\\u27bf',\r\n  'loud_sound':'\\ud83d\\udd0a',\r\n  'loudspeaker':'\\ud83d\\udce2',\r\n  'love_hotel':'\\ud83c\\udfe9',\r\n  'love_letter':'\\ud83d\\udc8c',\r\n  'low_brightness':'\\ud83d\\udd05',\r\n  'lying_face':'\\ud83e\\udd25',\r\n  'm':'\\u24c2\\ufe0f',\r\n  'mag':'\\ud83d\\udd0d',\r\n  'mag_right':'\\ud83d\\udd0e',\r\n  'mahjong':'\\ud83c\\udc04\\ufe0f',\r\n  'mailbox':'\\ud83d\\udceb',\r\n  'mailbox_closed':'\\ud83d\\udcea',\r\n  'mailbox_with_mail':'\\ud83d\\udcec',\r\n  'mailbox_with_no_mail':'\\ud83d\\udced',\r\n  'man':'\\ud83d\\udc68',\r\n  'man_artist':'\\ud83d\\udc68&zwj;\\ud83c\\udfa8',\r\n  'man_astronaut':'\\ud83d\\udc68&zwj;\\ud83d\\ude80',\r\n  'man_cartwheeling':'\\ud83e\\udd38&zwj;\\u2642\\ufe0f',\r\n  'man_cook':'\\ud83d\\udc68&zwj;\\ud83c\\udf73',\r\n  'man_dancing':'\\ud83d\\udd7a',\r\n  'man_facepalming':'\\ud83e\\udd26&zwj;\\u2642\\ufe0f',\r\n  'man_factory_worker':'\\ud83d\\udc68&zwj;\\ud83c\\udfed',\r\n  'man_farmer':'\\ud83d\\udc68&zwj;\\ud83c\\udf3e',\r\n  'man_firefighter':'\\ud83d\\udc68&zwj;\\ud83d\\ude92',\r\n  'man_health_worker':'\\ud83d\\udc68&zwj;\\u2695\\ufe0f',\r\n  'man_in_tuxedo':'\\ud83e\\udd35',\r\n  'man_judge':'\\ud83d\\udc68&zwj;\\u2696\\ufe0f',\r\n  'man_juggling':'\\ud83e\\udd39&zwj;\\u2642\\ufe0f',\r\n  'man_mechanic':'\\ud83d\\udc68&zwj;\\ud83d\\udd27',\r\n  'man_office_worker':'\\ud83d\\udc68&zwj;\\ud83d\\udcbc',\r\n  'man_pilot':'\\ud83d\\udc68&zwj;\\u2708\\ufe0f',\r\n  'man_playing_handball':'\\ud83e\\udd3e&zwj;\\u2642\\ufe0f',\r\n  'man_playing_water_polo':'\\ud83e\\udd3d&zwj;\\u2642\\ufe0f',\r\n  'man_scientist':'\\ud83d\\udc68&zwj;\\ud83d\\udd2c',\r\n  'man_shrugging':'\\ud83e\\udd37&zwj;\\u2642\\ufe0f',\r\n  'man_singer':'\\ud83d\\udc68&zwj;\\ud83c\\udfa4',\r\n  'man_student':'\\ud83d\\udc68&zwj;\\ud83c\\udf93',\r\n  'man_teacher':'\\ud83d\\udc68&zwj;\\ud83c\\udfeb',\r\n  'man_technologist':'\\ud83d\\udc68&zwj;\\ud83d\\udcbb',\r\n  'man_with_gua_pi_mao':'\\ud83d\\udc72',\r\n  'man_with_turban':'\\ud83d\\udc73',\r\n  'tangerine':'\\ud83c\\udf4a',\r\n  'mans_shoe':'\\ud83d\\udc5e',\r\n  'mantelpiece_clock':'\\ud83d\\udd70',\r\n  'maple_leaf':'\\ud83c\\udf41',\r\n  'martial_arts_uniform':'\\ud83e\\udd4b',\r\n  'mask':'\\ud83d\\ude37',\r\n  'massage_woman':'\\ud83d\\udc86',\r\n  'massage_man':'\\ud83d\\udc86&zwj;\\u2642\\ufe0f',\r\n  'meat_on_bone':'\\ud83c\\udf56',\r\n  'medal_military':'\\ud83c\\udf96',\r\n  'medal_sports':'\\ud83c\\udfc5',\r\n  'mega':'\\ud83d\\udce3',\r\n  'melon':'\\ud83c\\udf48',\r\n  'memo':'\\ud83d\\udcdd',\r\n  'men_wrestling':'\\ud83e\\udd3c&zwj;\\u2642\\ufe0f',\r\n  'menorah':'\\ud83d\\udd4e',\r\n  'mens':'\\ud83d\\udeb9',\r\n  'metal':'\\ud83e\\udd18',\r\n  'metro':'\\ud83d\\ude87',\r\n  'microphone':'\\ud83c\\udfa4',\r\n  'microscope':'\\ud83d\\udd2c',\r\n  'milk_glass':'\\ud83e\\udd5b',\r\n  'milky_way':'\\ud83c\\udf0c',\r\n  'minibus':'\\ud83d\\ude90',\r\n  'minidisc':'\\ud83d\\udcbd',\r\n  'mobile_phone_off':'\\ud83d\\udcf4',\r\n  'money_mouth_face':'\\ud83e\\udd11',\r\n  'money_with_wings':'\\ud83d\\udcb8',\r\n  'moneybag':'\\ud83d\\udcb0',\r\n  'monkey':'\\ud83d\\udc12',\r\n  'monkey_face':'\\ud83d\\udc35',\r\n  'monorail':'\\ud83d\\ude9d',\r\n  'moon':'\\ud83c\\udf14',\r\n  'mortar_board':'\\ud83c\\udf93',\r\n  'mosque':'\\ud83d\\udd4c',\r\n  'motor_boat':'\\ud83d\\udee5',\r\n  'motor_scooter':'\\ud83d\\udef5',\r\n  'motorcycle':'\\ud83c\\udfcd',\r\n  'motorway':'\\ud83d\\udee3',\r\n  'mount_fuji':'\\ud83d\\uddfb',\r\n  'mountain':'\\u26f0',\r\n  'mountain_biking_man':'\\ud83d\\udeb5',\r\n  'mountain_biking_woman':'\\ud83d\\udeb5&zwj;\\u2640\\ufe0f',\r\n  'mountain_cableway':'\\ud83d\\udea0',\r\n  'mountain_railway':'\\ud83d\\ude9e',\r\n  'mountain_snow':'\\ud83c\\udfd4',\r\n  'mouse':'\\ud83d\\udc2d',\r\n  'mouse2':'\\ud83d\\udc01',\r\n  'movie_camera':'\\ud83c\\udfa5',\r\n  'moyai':'\\ud83d\\uddff',\r\n  'mrs_claus':'\\ud83e\\udd36',\r\n  'muscle':'\\ud83d\\udcaa',\r\n  'mushroom':'\\ud83c\\udf44',\r\n  'musical_keyboard':'\\ud83c\\udfb9',\r\n  'musical_note':'\\ud83c\\udfb5',\r\n  'musical_score':'\\ud83c\\udfbc',\r\n  'mute':'\\ud83d\\udd07',\r\n  'nail_care':'\\ud83d\\udc85',\r\n  'name_badge':'\\ud83d\\udcdb',\r\n  'national_park':'\\ud83c\\udfde',\r\n  'nauseated_face':'\\ud83e\\udd22',\r\n  'necktie':'\\ud83d\\udc54',\r\n  'negative_squared_cross_mark':'\\u274e',\r\n  'nerd_face':'\\ud83e\\udd13',\r\n  'neutral_face':'\\ud83d\\ude10',\r\n  'new':'\\ud83c\\udd95',\r\n  'new_moon':'\\ud83c\\udf11',\r\n  'new_moon_with_face':'\\ud83c\\udf1a',\r\n  'newspaper':'\\ud83d\\udcf0',\r\n  'newspaper_roll':'\\ud83d\\uddde',\r\n  'next_track_button':'\\u23ed',\r\n  'ng':'\\ud83c\\udd96',\r\n  'no_good_man':'\\ud83d\\ude45&zwj;\\u2642\\ufe0f',\r\n  'no_good_woman':'\\ud83d\\ude45',\r\n  'night_with_stars':'\\ud83c\\udf03',\r\n  'no_bell':'\\ud83d\\udd15',\r\n  'no_bicycles':'\\ud83d\\udeb3',\r\n  'no_entry':'\\u26d4\\ufe0f',\r\n  'no_entry_sign':'\\ud83d\\udeab',\r\n  'no_mobile_phones':'\\ud83d\\udcf5',\r\n  'no_mouth':'\\ud83d\\ude36',\r\n  'no_pedestrians':'\\ud83d\\udeb7',\r\n  'no_smoking':'\\ud83d\\udead',\r\n  'non-potable_water':'\\ud83d\\udeb1',\r\n  'nose':'\\ud83d\\udc43',\r\n  'notebook':'\\ud83d\\udcd3',\r\n  'notebook_with_decorative_cover':'\\ud83d\\udcd4',\r\n  'notes':'\\ud83c\\udfb6',\r\n  'nut_and_bolt':'\\ud83d\\udd29',\r\n  'o':'\\u2b55\\ufe0f',\r\n  'o2':'\\ud83c\\udd7e\\ufe0f',\r\n  'ocean':'\\ud83c\\udf0a',\r\n  'octopus':'\\ud83d\\udc19',\r\n  'oden':'\\ud83c\\udf62',\r\n  'office':'\\ud83c\\udfe2',\r\n  'oil_drum':'\\ud83d\\udee2',\r\n  'ok':'\\ud83c\\udd97',\r\n  'ok_hand':'\\ud83d\\udc4c',\r\n  'ok_man':'\\ud83d\\ude46&zwj;\\u2642\\ufe0f',\r\n  'ok_woman':'\\ud83d\\ude46',\r\n  'old_key':'\\ud83d\\udddd',\r\n  'older_man':'\\ud83d\\udc74',\r\n  'older_woman':'\\ud83d\\udc75',\r\n  'om':'\\ud83d\\udd49',\r\n  'on':'\\ud83d\\udd1b',\r\n  'oncoming_automobile':'\\ud83d\\ude98',\r\n  'oncoming_bus':'\\ud83d\\ude8d',\r\n  'oncoming_police_car':'\\ud83d\\ude94',\r\n  'oncoming_taxi':'\\ud83d\\ude96',\r\n  'open_file_folder':'\\ud83d\\udcc2',\r\n  'open_hands':'\\ud83d\\udc50',\r\n  'open_mouth':'\\ud83d\\ude2e',\r\n  'open_umbrella':'\\u2602\\ufe0f',\r\n  'ophiuchus':'\\u26ce',\r\n  'orange_book':'\\ud83d\\udcd9',\r\n  'orthodox_cross':'\\u2626\\ufe0f',\r\n  'outbox_tray':'\\ud83d\\udce4',\r\n  'owl':'\\ud83e\\udd89',\r\n  'ox':'\\ud83d\\udc02',\r\n  'package':'\\ud83d\\udce6',\r\n  'page_facing_up':'\\ud83d\\udcc4',\r\n  'page_with_curl':'\\ud83d\\udcc3',\r\n  'pager':'\\ud83d\\udcdf',\r\n  'paintbrush':'\\ud83d\\udd8c',\r\n  'palm_tree':'\\ud83c\\udf34',\r\n  'pancakes':'\\ud83e\\udd5e',\r\n  'panda_face':'\\ud83d\\udc3c',\r\n  'paperclip':'\\ud83d\\udcce',\r\n  'paperclips':'\\ud83d\\udd87',\r\n  'parasol_on_ground':'\\u26f1',\r\n  'parking':'\\ud83c\\udd7f\\ufe0f',\r\n  'part_alternation_mark':'\\u303d\\ufe0f',\r\n  'partly_sunny':'\\u26c5\\ufe0f',\r\n  'passenger_ship':'\\ud83d\\udef3',\r\n  'passport_control':'\\ud83d\\udec2',\r\n  'pause_button':'\\u23f8',\r\n  'peace_symbol':'\\u262e\\ufe0f',\r\n  'peach':'\\ud83c\\udf51',\r\n  'peanuts':'\\ud83e\\udd5c',\r\n  'pear':'\\ud83c\\udf50',\r\n  'pen':'\\ud83d\\udd8a',\r\n  'pencil2':'\\u270f\\ufe0f',\r\n  'penguin':'\\ud83d\\udc27',\r\n  'pensive':'\\ud83d\\ude14',\r\n  'performing_arts':'\\ud83c\\udfad',\r\n  'persevere':'\\ud83d\\ude23',\r\n  'person_fencing':'\\ud83e\\udd3a',\r\n  'pouting_woman':'\\ud83d\\ude4e',\r\n  'phone':'\\u260e\\ufe0f',\r\n  'pick':'\\u26cf',\r\n  'pig':'\\ud83d\\udc37',\r\n  'pig2':'\\ud83d\\udc16',\r\n  'pig_nose':'\\ud83d\\udc3d',\r\n  'pill':'\\ud83d\\udc8a',\r\n  'pineapple':'\\ud83c\\udf4d',\r\n  'ping_pong':'\\ud83c\\udfd3',\r\n  'pisces':'\\u2653\\ufe0f',\r\n  'pizza':'\\ud83c\\udf55',\r\n  'place_of_worship':'\\ud83d\\uded0',\r\n  'plate_with_cutlery':'\\ud83c\\udf7d',\r\n  'play_or_pause_button':'\\u23ef',\r\n  'point_down':'\\ud83d\\udc47',\r\n  'point_left':'\\ud83d\\udc48',\r\n  'point_right':'\\ud83d\\udc49',\r\n  'point_up':'\\u261d\\ufe0f',\r\n  'point_up_2':'\\ud83d\\udc46',\r\n  'police_car':'\\ud83d\\ude93',\r\n  'policewoman':'\\ud83d\\udc6e&zwj;\\u2640\\ufe0f',\r\n  'poodle':'\\ud83d\\udc29',\r\n  'popcorn':'\\ud83c\\udf7f',\r\n  'post_office':'\\ud83c\\udfe3',\r\n  'postal_horn':'\\ud83d\\udcef',\r\n  'postbox':'\\ud83d\\udcee',\r\n  'potable_water':'\\ud83d\\udeb0',\r\n  'potato':'\\ud83e\\udd54',\r\n  'pouch':'\\ud83d\\udc5d',\r\n  'poultry_leg':'\\ud83c\\udf57',\r\n  'pound':'\\ud83d\\udcb7',\r\n  'rage':'\\ud83d\\ude21',\r\n  'pouting_cat':'\\ud83d\\ude3e',\r\n  'pouting_man':'\\ud83d\\ude4e&zwj;\\u2642\\ufe0f',\r\n  'pray':'\\ud83d\\ude4f',\r\n  'prayer_beads':'\\ud83d\\udcff',\r\n  'pregnant_woman':'\\ud83e\\udd30',\r\n  'previous_track_button':'\\u23ee',\r\n  'prince':'\\ud83e\\udd34',\r\n  'princess':'\\ud83d\\udc78',\r\n  'printer':'\\ud83d\\udda8',\r\n  'purple_heart':'\\ud83d\\udc9c',\r\n  'purse':'\\ud83d\\udc5b',\r\n  'pushpin':'\\ud83d\\udccc',\r\n  'put_litter_in_its_place':'\\ud83d\\udeae',\r\n  'question':'\\u2753',\r\n  'rabbit':'\\ud83d\\udc30',\r\n  'rabbit2':'\\ud83d\\udc07',\r\n  'racehorse':'\\ud83d\\udc0e',\r\n  'racing_car':'\\ud83c\\udfce',\r\n  'radio':'\\ud83d\\udcfb',\r\n  'radio_button':'\\ud83d\\udd18',\r\n  'radioactive':'\\u2622\\ufe0f',\r\n  'railway_car':'\\ud83d\\ude83',\r\n  'railway_track':'\\ud83d\\udee4',\r\n  'rainbow':'\\ud83c\\udf08',\r\n  'rainbow_flag':'\\ud83c\\udff3\\ufe0f&zwj;\\ud83c\\udf08',\r\n  'raised_back_of_hand':'\\ud83e\\udd1a',\r\n  'raised_hand_with_fingers_splayed':'\\ud83d\\udd90',\r\n  'raised_hands':'\\ud83d\\ude4c',\r\n  'raising_hand_woman':'\\ud83d\\ude4b',\r\n  'raising_hand_man':'\\ud83d\\ude4b&zwj;\\u2642\\ufe0f',\r\n  'ram':'\\ud83d\\udc0f',\r\n  'ramen':'\\ud83c\\udf5c',\r\n  'rat':'\\ud83d\\udc00',\r\n  'record_button':'\\u23fa',\r\n  'recycle':'\\u267b\\ufe0f',\r\n  'red_circle':'\\ud83d\\udd34',\r\n  'registered':'\\u00ae\\ufe0f',\r\n  'relaxed':'\\u263a\\ufe0f',\r\n  'relieved':'\\ud83d\\ude0c',\r\n  'reminder_ribbon':'\\ud83c\\udf97',\r\n  'repeat':'\\ud83d\\udd01',\r\n  'repeat_one':'\\ud83d\\udd02',\r\n  'rescue_worker_helmet':'\\u26d1',\r\n  'restroom':'\\ud83d\\udebb',\r\n  'revolving_hearts':'\\ud83d\\udc9e',\r\n  'rewind':'\\u23ea',\r\n  'rhinoceros':'\\ud83e\\udd8f',\r\n  'ribbon':'\\ud83c\\udf80',\r\n  'rice':'\\ud83c\\udf5a',\r\n  'rice_ball':'\\ud83c\\udf59',\r\n  'rice_cracker':'\\ud83c\\udf58',\r\n  'rice_scene':'\\ud83c\\udf91',\r\n  'right_anger_bubble':'\\ud83d\\uddef',\r\n  'ring':'\\ud83d\\udc8d',\r\n  'robot':'\\ud83e\\udd16',\r\n  'rocket':'\\ud83d\\ude80',\r\n  'rofl':'\\ud83e\\udd23',\r\n  'roll_eyes':'\\ud83d\\ude44',\r\n  'roller_coaster':'\\ud83c\\udfa2',\r\n  'rooster':'\\ud83d\\udc13',\r\n  'rose':'\\ud83c\\udf39',\r\n  'rosette':'\\ud83c\\udff5',\r\n  'rotating_light':'\\ud83d\\udea8',\r\n  'round_pushpin':'\\ud83d\\udccd',\r\n  'rowing_man':'\\ud83d\\udea3',\r\n  'rowing_woman':'\\ud83d\\udea3&zwj;\\u2640\\ufe0f',\r\n  'rugby_football':'\\ud83c\\udfc9',\r\n  'running_man':'\\ud83c\\udfc3',\r\n  'running_shirt_with_sash':'\\ud83c\\udfbd',\r\n  'running_woman':'\\ud83c\\udfc3&zwj;\\u2640\\ufe0f',\r\n  'sa':'\\ud83c\\ude02\\ufe0f',\r\n  'sagittarius':'\\u2650\\ufe0f',\r\n  'sake':'\\ud83c\\udf76',\r\n  'sandal':'\\ud83d\\udc61',\r\n  'santa':'\\ud83c\\udf85',\r\n  'satellite':'\\ud83d\\udce1',\r\n  'saxophone':'\\ud83c\\udfb7',\r\n  'school':'\\ud83c\\udfeb',\r\n  'school_satchel':'\\ud83c\\udf92',\r\n  'scissors':'\\u2702\\ufe0f',\r\n  'scorpion':'\\ud83e\\udd82',\r\n  'scorpius':'\\u264f\\ufe0f',\r\n  'scream':'\\ud83d\\ude31',\r\n  'scream_cat':'\\ud83d\\ude40',\r\n  'scroll':'\\ud83d\\udcdc',\r\n  'seat':'\\ud83d\\udcba',\r\n  'secret':'\\u3299\\ufe0f',\r\n  'see_no_evil':'\\ud83d\\ude48',\r\n  'seedling':'\\ud83c\\udf31',\r\n  'selfie':'\\ud83e\\udd33',\r\n  'shallow_pan_of_food':'\\ud83e\\udd58',\r\n  'shamrock':'\\u2618\\ufe0f',\r\n  'shark':'\\ud83e\\udd88',\r\n  'shaved_ice':'\\ud83c\\udf67',\r\n  'sheep':'\\ud83d\\udc11',\r\n  'shell':'\\ud83d\\udc1a',\r\n  'shield':'\\ud83d\\udee1',\r\n  'shinto_shrine':'\\u26e9',\r\n  'ship':'\\ud83d\\udea2',\r\n  'shirt':'\\ud83d\\udc55',\r\n  'shopping':'\\ud83d\\udecd',\r\n  'shopping_cart':'\\ud83d\\uded2',\r\n  'shower':'\\ud83d\\udebf',\r\n  'shrimp':'\\ud83e\\udd90',\r\n  'signal_strength':'\\ud83d\\udcf6',\r\n  'six_pointed_star':'\\ud83d\\udd2f',\r\n  'ski':'\\ud83c\\udfbf',\r\n  'skier':'\\u26f7',\r\n  'skull':'\\ud83d\\udc80',\r\n  'skull_and_crossbones':'\\u2620\\ufe0f',\r\n  'sleeping':'\\ud83d\\ude34',\r\n  'sleeping_bed':'\\ud83d\\udecc',\r\n  'sleepy':'\\ud83d\\ude2a',\r\n  'slightly_frowning_face':'\\ud83d\\ude41',\r\n  'slightly_smiling_face':'\\ud83d\\ude42',\r\n  'slot_machine':'\\ud83c\\udfb0',\r\n  'small_airplane':'\\ud83d\\udee9',\r\n  'small_blue_diamond':'\\ud83d\\udd39',\r\n  'small_orange_diamond':'\\ud83d\\udd38',\r\n  'small_red_triangle':'\\ud83d\\udd3a',\r\n  'small_red_triangle_down':'\\ud83d\\udd3b',\r\n  'smile':'\\ud83d\\ude04',\r\n  'smile_cat':'\\ud83d\\ude38',\r\n  'smiley':'\\ud83d\\ude03',\r\n  'smiley_cat':'\\ud83d\\ude3a',\r\n  'smiling_imp':'\\ud83d\\ude08',\r\n  'smirk':'\\ud83d\\ude0f',\r\n  'smirk_cat':'\\ud83d\\ude3c',\r\n  'smoking':'\\ud83d\\udeac',\r\n  'snail':'\\ud83d\\udc0c',\r\n  'snake':'\\ud83d\\udc0d',\r\n  'sneezing_face':'\\ud83e\\udd27',\r\n  'snowboarder':'\\ud83c\\udfc2',\r\n  'snowflake':'\\u2744\\ufe0f',\r\n  'snowman':'\\u26c4\\ufe0f',\r\n  'snowman_with_snow':'\\u2603\\ufe0f',\r\n  'sob':'\\ud83d\\ude2d',\r\n  'soccer':'\\u26bd\\ufe0f',\r\n  'soon':'\\ud83d\\udd1c',\r\n  'sos':'\\ud83c\\udd98',\r\n  'sound':'\\ud83d\\udd09',\r\n  'space_invader':'\\ud83d\\udc7e',\r\n  'spades':'\\u2660\\ufe0f',\r\n  'spaghetti':'\\ud83c\\udf5d',\r\n  'sparkle':'\\u2747\\ufe0f',\r\n  'sparkler':'\\ud83c\\udf87',\r\n  'sparkles':'\\u2728',\r\n  'sparkling_heart':'\\ud83d\\udc96',\r\n  'speak_no_evil':'\\ud83d\\ude4a',\r\n  'speaker':'\\ud83d\\udd08',\r\n  'speaking_head':'\\ud83d\\udde3',\r\n  'speech_balloon':'\\ud83d\\udcac',\r\n  'speedboat':'\\ud83d\\udea4',\r\n  'spider':'\\ud83d\\udd77',\r\n  'spider_web':'\\ud83d\\udd78',\r\n  'spiral_calendar':'\\ud83d\\uddd3',\r\n  'spiral_notepad':'\\ud83d\\uddd2',\r\n  'spoon':'\\ud83e\\udd44',\r\n  'squid':'\\ud83e\\udd91',\r\n  'stadium':'\\ud83c\\udfdf',\r\n  'star':'\\u2b50\\ufe0f',\r\n  'star2':'\\ud83c\\udf1f',\r\n  'star_and_crescent':'\\u262a\\ufe0f',\r\n  'star_of_david':'\\u2721\\ufe0f',\r\n  'stars':'\\ud83c\\udf20',\r\n  'station':'\\ud83d\\ude89',\r\n  'statue_of_liberty':'\\ud83d\\uddfd',\r\n  'steam_locomotive':'\\ud83d\\ude82',\r\n  'stew':'\\ud83c\\udf72',\r\n  'stop_button':'\\u23f9',\r\n  'stop_sign':'\\ud83d\\uded1',\r\n  'stopwatch':'\\u23f1',\r\n  'straight_ruler':'\\ud83d\\udccf',\r\n  'strawberry':'\\ud83c\\udf53',\r\n  'stuck_out_tongue':'\\ud83d\\ude1b',\r\n  'stuck_out_tongue_closed_eyes':'\\ud83d\\ude1d',\r\n  'stuck_out_tongue_winking_eye':'\\ud83d\\ude1c',\r\n  'studio_microphone':'\\ud83c\\udf99',\r\n  'stuffed_flatbread':'\\ud83e\\udd59',\r\n  'sun_behind_large_cloud':'\\ud83c\\udf25',\r\n  'sun_behind_rain_cloud':'\\ud83c\\udf26',\r\n  'sun_behind_small_cloud':'\\ud83c\\udf24',\r\n  'sun_with_face':'\\ud83c\\udf1e',\r\n  'sunflower':'\\ud83c\\udf3b',\r\n  'sunglasses':'\\ud83d\\ude0e',\r\n  'sunny':'\\u2600\\ufe0f',\r\n  'sunrise':'\\ud83c\\udf05',\r\n  'sunrise_over_mountains':'\\ud83c\\udf04',\r\n  'surfing_man':'\\ud83c\\udfc4',\r\n  'surfing_woman':'\\ud83c\\udfc4&zwj;\\u2640\\ufe0f',\r\n  'sushi':'\\ud83c\\udf63',\r\n  'suspension_railway':'\\ud83d\\ude9f',\r\n  'sweat':'\\ud83d\\ude13',\r\n  'sweat_drops':'\\ud83d\\udca6',\r\n  'sweat_smile':'\\ud83d\\ude05',\r\n  'sweet_potato':'\\ud83c\\udf60',\r\n  'swimming_man':'\\ud83c\\udfca',\r\n  'swimming_woman':'\\ud83c\\udfca&zwj;\\u2640\\ufe0f',\r\n  'symbols':'\\ud83d\\udd23',\r\n  'synagogue':'\\ud83d\\udd4d',\r\n  'syringe':'\\ud83d\\udc89',\r\n  'taco':'\\ud83c\\udf2e',\r\n  'tada':'\\ud83c\\udf89',\r\n  'tanabata_tree':'\\ud83c\\udf8b',\r\n  'taurus':'\\u2649\\ufe0f',\r\n  'taxi':'\\ud83d\\ude95',\r\n  'tea':'\\ud83c\\udf75',\r\n  'telephone_receiver':'\\ud83d\\udcde',\r\n  'telescope':'\\ud83d\\udd2d',\r\n  'tennis':'\\ud83c\\udfbe',\r\n  'tent':'\\u26fa\\ufe0f',\r\n  'thermometer':'\\ud83c\\udf21',\r\n  'thinking':'\\ud83e\\udd14',\r\n  'thought_balloon':'\\ud83d\\udcad',\r\n  'ticket':'\\ud83c\\udfab',\r\n  'tickets':'\\ud83c\\udf9f',\r\n  'tiger':'\\ud83d\\udc2f',\r\n  'tiger2':'\\ud83d\\udc05',\r\n  'timer_clock':'\\u23f2',\r\n  'tipping_hand_man':'\\ud83d\\udc81&zwj;\\u2642\\ufe0f',\r\n  'tired_face':'\\ud83d\\ude2b',\r\n  'tm':'\\u2122\\ufe0f',\r\n  'toilet':'\\ud83d\\udebd',\r\n  'tokyo_tower':'\\ud83d\\uddfc',\r\n  'tomato':'\\ud83c\\udf45',\r\n  'tongue':'\\ud83d\\udc45',\r\n  'top':'\\ud83d\\udd1d',\r\n  'tophat':'\\ud83c\\udfa9',\r\n  'tornado':'\\ud83c\\udf2a',\r\n  'trackball':'\\ud83d\\uddb2',\r\n  'tractor':'\\ud83d\\ude9c',\r\n  'traffic_light':'\\ud83d\\udea5',\r\n  'train':'\\ud83d\\ude8b',\r\n  'train2':'\\ud83d\\ude86',\r\n  'tram':'\\ud83d\\ude8a',\r\n  'triangular_flag_on_post':'\\ud83d\\udea9',\r\n  'triangular_ruler':'\\ud83d\\udcd0',\r\n  'trident':'\\ud83d\\udd31',\r\n  'triumph':'\\ud83d\\ude24',\r\n  'trolleybus':'\\ud83d\\ude8e',\r\n  'trophy':'\\ud83c\\udfc6',\r\n  'tropical_drink':'\\ud83c\\udf79',\r\n  'tropical_fish':'\\ud83d\\udc20',\r\n  'truck':'\\ud83d\\ude9a',\r\n  'trumpet':'\\ud83c\\udfba',\r\n  'tulip':'\\ud83c\\udf37',\r\n  'tumbler_glass':'\\ud83e\\udd43',\r\n  'turkey':'\\ud83e\\udd83',\r\n  'turtle':'\\ud83d\\udc22',\r\n  'tv':'\\ud83d\\udcfa',\r\n  'twisted_rightwards_arrows':'\\ud83d\\udd00',\r\n  'two_hearts':'\\ud83d\\udc95',\r\n  'two_men_holding_hands':'\\ud83d\\udc6c',\r\n  'two_women_holding_hands':'\\ud83d\\udc6d',\r\n  'u5272':'\\ud83c\\ude39',\r\n  'u5408':'\\ud83c\\ude34',\r\n  'u55b6':'\\ud83c\\ude3a',\r\n  'u6307':'\\ud83c\\ude2f\\ufe0f',\r\n  'u6708':'\\ud83c\\ude37\\ufe0f',\r\n  'u6709':'\\ud83c\\ude36',\r\n  'u6e80':'\\ud83c\\ude35',\r\n  'u7121':'\\ud83c\\ude1a\\ufe0f',\r\n  'u7533':'\\ud83c\\ude38',\r\n  'u7981':'\\ud83c\\ude32',\r\n  'u7a7a':'\\ud83c\\ude33',\r\n  'umbrella':'\\u2614\\ufe0f',\r\n  'unamused':'\\ud83d\\ude12',\r\n  'underage':'\\ud83d\\udd1e',\r\n  'unicorn':'\\ud83e\\udd84',\r\n  'unlock':'\\ud83d\\udd13',\r\n  'up':'\\ud83c\\udd99',\r\n  'upside_down_face':'\\ud83d\\ude43',\r\n  'v':'\\u270c\\ufe0f',\r\n  'vertical_traffic_light':'\\ud83d\\udea6',\r\n  'vhs':'\\ud83d\\udcfc',\r\n  'vibration_mode':'\\ud83d\\udcf3',\r\n  'video_camera':'\\ud83d\\udcf9',\r\n  'video_game':'\\ud83c\\udfae',\r\n  'violin':'\\ud83c\\udfbb',\r\n  'virgo':'\\u264d\\ufe0f',\r\n  'volcano':'\\ud83c\\udf0b',\r\n  'volleyball':'\\ud83c\\udfd0',\r\n  'vs':'\\ud83c\\udd9a',\r\n  'vulcan_salute':'\\ud83d\\udd96',\r\n  'walking_man':'\\ud83d\\udeb6',\r\n  'walking_woman':'\\ud83d\\udeb6&zwj;\\u2640\\ufe0f',\r\n  'waning_crescent_moon':'\\ud83c\\udf18',\r\n  'waning_gibbous_moon':'\\ud83c\\udf16',\r\n  'warning':'\\u26a0\\ufe0f',\r\n  'wastebasket':'\\ud83d\\uddd1',\r\n  'watch':'\\u231a\\ufe0f',\r\n  'water_buffalo':'\\ud83d\\udc03',\r\n  'watermelon':'\\ud83c\\udf49',\r\n  'wave':'\\ud83d\\udc4b',\r\n  'wavy_dash':'\\u3030\\ufe0f',\r\n  'waxing_crescent_moon':'\\ud83c\\udf12',\r\n  'wc':'\\ud83d\\udebe',\r\n  'weary':'\\ud83d\\ude29',\r\n  'wedding':'\\ud83d\\udc92',\r\n  'weight_lifting_man':'\\ud83c\\udfcb\\ufe0f',\r\n  'weight_lifting_woman':'\\ud83c\\udfcb\\ufe0f&zwj;\\u2640\\ufe0f',\r\n  'whale':'\\ud83d\\udc33',\r\n  'whale2':'\\ud83d\\udc0b',\r\n  'wheel_of_dharma':'\\u2638\\ufe0f',\r\n  'wheelchair':'\\u267f\\ufe0f',\r\n  'white_check_mark':'\\u2705',\r\n  'white_circle':'\\u26aa\\ufe0f',\r\n  'white_flag':'\\ud83c\\udff3\\ufe0f',\r\n  'white_flower':'\\ud83d\\udcae',\r\n  'white_large_square':'\\u2b1c\\ufe0f',\r\n  'white_medium_small_square':'\\u25fd\\ufe0f',\r\n  'white_medium_square':'\\u25fb\\ufe0f',\r\n  'white_small_square':'\\u25ab\\ufe0f',\r\n  'white_square_button':'\\ud83d\\udd33',\r\n  'wilted_flower':'\\ud83e\\udd40',\r\n  'wind_chime':'\\ud83c\\udf90',\r\n  'wind_face':'\\ud83c\\udf2c',\r\n  'wine_glass':'\\ud83c\\udf77',\r\n  'wink':'\\ud83d\\ude09',\r\n  'wolf':'\\ud83d\\udc3a',\r\n  'woman':'\\ud83d\\udc69',\r\n  'woman_artist':'\\ud83d\\udc69&zwj;\\ud83c\\udfa8',\r\n  'woman_astronaut':'\\ud83d\\udc69&zwj;\\ud83d\\ude80',\r\n  'woman_cartwheeling':'\\ud83e\\udd38&zwj;\\u2640\\ufe0f',\r\n  'woman_cook':'\\ud83d\\udc69&zwj;\\ud83c\\udf73',\r\n  'woman_facepalming':'\\ud83e\\udd26&zwj;\\u2640\\ufe0f',\r\n  'woman_factory_worker':'\\ud83d\\udc69&zwj;\\ud83c\\udfed',\r\n  'woman_farmer':'\\ud83d\\udc69&zwj;\\ud83c\\udf3e',\r\n  'woman_firefighter':'\\ud83d\\udc69&zwj;\\ud83d\\ude92',\r\n  'woman_health_worker':'\\ud83d\\udc69&zwj;\\u2695\\ufe0f',\r\n  'woman_judge':'\\ud83d\\udc69&zwj;\\u2696\\ufe0f',\r\n  'woman_juggling':'\\ud83e\\udd39&zwj;\\u2640\\ufe0f',\r\n  'woman_mechanic':'\\ud83d\\udc69&zwj;\\ud83d\\udd27',\r\n  'woman_office_worker':'\\ud83d\\udc69&zwj;\\ud83d\\udcbc',\r\n  'woman_pilot':'\\ud83d\\udc69&zwj;\\u2708\\ufe0f',\r\n  'woman_playing_handball':'\\ud83e\\udd3e&zwj;\\u2640\\ufe0f',\r\n  'woman_playing_water_polo':'\\ud83e\\udd3d&zwj;\\u2640\\ufe0f',\r\n  'woman_scientist':'\\ud83d\\udc69&zwj;\\ud83d\\udd2c',\r\n  'woman_shrugging':'\\ud83e\\udd37&zwj;\\u2640\\ufe0f',\r\n  'woman_singer':'\\ud83d\\udc69&zwj;\\ud83c\\udfa4',\r\n  'woman_student':'\\ud83d\\udc69&zwj;\\ud83c\\udf93',\r\n  'woman_teacher':'\\ud83d\\udc69&zwj;\\ud83c\\udfeb',\r\n  'woman_technologist':'\\ud83d\\udc69&zwj;\\ud83d\\udcbb',\r\n  'woman_with_turban':'\\ud83d\\udc73&zwj;\\u2640\\ufe0f',\r\n  'womans_clothes':'\\ud83d\\udc5a',\r\n  'womans_hat':'\\ud83d\\udc52',\r\n  'women_wrestling':'\\ud83e\\udd3c&zwj;\\u2640\\ufe0f',\r\n  'womens':'\\ud83d\\udeba',\r\n  'world_map':'\\ud83d\\uddfa',\r\n  'worried':'\\ud83d\\ude1f',\r\n  'wrench':'\\ud83d\\udd27',\r\n  'writing_hand':'\\u270d\\ufe0f',\r\n  'x':'\\u274c',\r\n  'yellow_heart':'\\ud83d\\udc9b',\r\n  'yen':'\\ud83d\\udcb4',\r\n  'yin_yang':'\\u262f\\ufe0f',\r\n  'yum':'\\ud83d\\ude0b',\r\n  'zap':'\\u26a1\\ufe0f',\r\n  'zipper_mouth_face':'\\ud83e\\udd10',\r\n  'zzz':'\\ud83d\\udca4',\r\n\r\n  /* special emojis :P */\r\n  'octocat':  '<img alt=\":octocat:\" height=\"20\" width=\"20\" align=\"absmiddle\" src=\"https://assets-cdn.github.com/images/icons/emoji/octocat.png\">',\r\n  'showdown': '<span style=\"font-family: \\'Anonymous Pro\\', monospace; text-decoration: underline; text-decoration-style: dashed; text-decoration-color: #3e8b8a;text-underline-position: under;\">S</span>'\r\n};\r\n\r\n/**\r\n * Created by Estevao on 31-05-2015.\r\n */\r\n\r\n/**\r\n * Showdown Converter class\r\n * @class\r\n * @param {object} [converterOptions]\r\n * @returns {Converter}\r\n */\r\nshowdown.Converter = function (converterOptions) {\r\n  'use strict';\r\n\r\n  var\r\n      /**\r\n       * Options used by this converter\r\n       * @private\r\n       * @type {{}}\r\n       */\r\n      options = {},\r\n\r\n      /**\r\n       * Language extensions used by this converter\r\n       * @private\r\n       * @type {Array}\r\n       */\r\n      langExtensions = [],\r\n\r\n      /**\r\n       * Output modifiers extensions used by this converter\r\n       * @private\r\n       * @type {Array}\r\n       */\r\n      outputModifiers = [],\r\n\r\n      /**\r\n       * Event listeners\r\n       * @private\r\n       * @type {{}}\r\n       */\r\n      listeners = {},\r\n\r\n      /**\r\n       * The flavor set in this converter\r\n       */\r\n      setConvFlavor = setFlavor,\r\n\r\n      /**\r\n       * Metadata of the document\r\n       * @type {{parsed: {}, raw: string, format: string}}\r\n       */\r\n      metadata = {\r\n        parsed: {},\r\n        raw: '',\r\n        format: ''\r\n      };\r\n\r\n  _constructor();\r\n\r\n  /**\r\n   * Converter constructor\r\n   * @private\r\n   */\r\n  function _constructor () {\r\n    converterOptions = converterOptions || {};\r\n\r\n    for (var gOpt in globalOptions) {\r\n      if (globalOptions.hasOwnProperty(gOpt)) {\r\n        options[gOpt] = globalOptions[gOpt];\r\n      }\r\n    }\r\n\r\n    // Merge options\r\n    if (typeof converterOptions === 'object') {\r\n      for (var opt in converterOptions) {\r\n        if (converterOptions.hasOwnProperty(opt)) {\r\n          options[opt] = converterOptions[opt];\r\n        }\r\n      }\r\n    } else {\r\n      throw Error('Converter expects the passed parameter to be an object, but ' + typeof converterOptions +\r\n      ' was passed instead.');\r\n    }\r\n\r\n    if (options.extensions) {\r\n      showdown.helper.forEach(options.extensions, _parseExtension);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parse extension\r\n   * @param {*} ext\r\n   * @param {string} [name='']\r\n   * @private\r\n   */\r\n  function _parseExtension (ext, name) {\r\n\r\n    name = name || null;\r\n    // If it's a string, the extension was previously loaded\r\n    if (showdown.helper.isString(ext)) {\r\n      ext = showdown.helper.stdExtName(ext);\r\n      name = ext;\r\n\r\n      // LEGACY_SUPPORT CODE\r\n      if (showdown.extensions[ext]) {\r\n        console.warn('DEPRECATION WARNING: ' + ext + ' is an old extension that uses a deprecated loading method.' +\r\n          'Please inform the developer that the extension should be updated!');\r\n        legacyExtensionLoading(showdown.extensions[ext], ext);\r\n        return;\r\n        // END LEGACY SUPPORT CODE\r\n\r\n      } else if (!showdown.helper.isUndefined(extensions[ext])) {\r\n        ext = extensions[ext];\r\n\r\n      } else {\r\n        throw Error('Extension \"' + ext + '\" could not be loaded. It was either not found or is not a valid extension.');\r\n      }\r\n    }\r\n\r\n    if (typeof ext === 'function') {\r\n      ext = ext();\r\n    }\r\n\r\n    if (!showdown.helper.isArray(ext)) {\r\n      ext = [ext];\r\n    }\r\n\r\n    var validExt = validate(ext, name);\r\n    if (!validExt.valid) {\r\n      throw Error(validExt.error);\r\n    }\r\n\r\n    for (var i = 0; i < ext.length; ++i) {\r\n      switch (ext[i].type) {\r\n\r\n        case 'lang':\r\n          langExtensions.push(ext[i]);\r\n          break;\r\n\r\n        case 'output':\r\n          outputModifiers.push(ext[i]);\r\n          break;\r\n      }\r\n      if (ext[i].hasOwnProperty('listeners')) {\r\n        for (var ln in ext[i].listeners) {\r\n          if (ext[i].listeners.hasOwnProperty(ln)) {\r\n            listen(ln, ext[i].listeners[ln]);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * LEGACY_SUPPORT\r\n   * @param {*} ext\r\n   * @param {string} name\r\n   */\r\n  function legacyExtensionLoading (ext, name) {\r\n    if (typeof ext === 'function') {\r\n      ext = ext(new showdown.Converter());\r\n    }\r\n    if (!showdown.helper.isArray(ext)) {\r\n      ext = [ext];\r\n    }\r\n    var valid = validate(ext, name);\r\n\r\n    if (!valid.valid) {\r\n      throw Error(valid.error);\r\n    }\r\n\r\n    for (var i = 0; i < ext.length; ++i) {\r\n      switch (ext[i].type) {\r\n        case 'lang':\r\n          langExtensions.push(ext[i]);\r\n          break;\r\n        case 'output':\r\n          outputModifiers.push(ext[i]);\r\n          break;\r\n        default:// should never reach here\r\n          throw Error('Extension loader error: Type unrecognized!!!');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Listen to an event\r\n   * @param {string} name\r\n   * @param {function} callback\r\n   */\r\n  function listen (name, callback) {\r\n    if (!showdown.helper.isString(name)) {\r\n      throw Error('Invalid argument in converter.listen() method: name must be a string, but ' + typeof name + ' given');\r\n    }\r\n\r\n    if (typeof callback !== 'function') {\r\n      throw Error('Invalid argument in converter.listen() method: callback must be a function, but ' + typeof callback + ' given');\r\n    }\r\n\r\n    if (!listeners.hasOwnProperty(name)) {\r\n      listeners[name] = [];\r\n    }\r\n    listeners[name].push(callback);\r\n  }\r\n\r\n  function rTrimInputText (text) {\r\n    var rsp = text.match(/^\\s*/)[0].length,\r\n        rgx = new RegExp('^\\\\s{0,' + rsp + '}', 'gm');\r\n    return text.replace(rgx, '');\r\n  }\r\n\r\n  /**\r\n   * Dispatch an event\r\n   * @private\r\n   * @param {string} evtName Event name\r\n   * @param {string} text Text\r\n   * @param {{}} options Converter Options\r\n   * @param {{}} globals\r\n   * @returns {string}\r\n   */\r\n  this._dispatch = function dispatch (evtName, text, options, globals) {\r\n    if (listeners.hasOwnProperty(evtName)) {\r\n      for (var ei = 0; ei < listeners[evtName].length; ++ei) {\r\n        var nText = listeners[evtName][ei](evtName, text, this, options, globals);\r\n        if (nText && typeof nText !== 'undefined') {\r\n          text = nText;\r\n        }\r\n      }\r\n    }\r\n    return text;\r\n  };\r\n\r\n  /**\r\n   * Listen to an event\r\n   * @param {string} name\r\n   * @param {function} callback\r\n   * @returns {showdown.Converter}\r\n   */\r\n  this.listen = function (name, callback) {\r\n    listen(name, callback);\r\n    return this;\r\n  };\r\n\r\n  /**\r\n   * Converts a markdown string into HTML\r\n   * @param {string} text\r\n   * @returns {*}\r\n   */\r\n  this.makeHtml = function (text) {\r\n    //check if text is not falsy\r\n    if (!text) {\r\n      return text;\r\n    }\r\n\r\n    var globals = {\r\n      gHtmlBlocks:     [],\r\n      gHtmlMdBlocks:   [],\r\n      gHtmlSpans:      [],\r\n      gUrls:           {},\r\n      gTitles:         {},\r\n      gDimensions:     {},\r\n      gListLevel:      0,\r\n      hashLinkCounts:  {},\r\n      langExtensions:  langExtensions,\r\n      outputModifiers: outputModifiers,\r\n      converter:       this,\r\n      ghCodeBlocks:    [],\r\n      metadata: {\r\n        parsed: {},\r\n        raw: '',\r\n        format: ''\r\n      }\r\n    };\r\n\r\n    // This lets us use ¨ trema as an escape char to avoid md5 hashes\r\n    // The choice of character is arbitrary; anything that isn't\r\n    // magic in Markdown will work.\r\n    text = text.replace(/¨/g, '¨T');\r\n\r\n    // Replace $ with ¨D\r\n    // RegExp interprets $ as a special character\r\n    // when it's in a replacement string\r\n    text = text.replace(/\\$/g, '¨D');\r\n\r\n    // Standardize line endings\r\n    text = text.replace(/\\r\\n/g, '\\n'); // DOS to Unix\r\n    text = text.replace(/\\r/g, '\\n'); // Mac to Unix\r\n\r\n    // Stardardize line spaces\r\n    text = text.replace(/\\u00A0/g, '&nbsp;');\r\n\r\n    if (options.smartIndentationFix) {\r\n      text = rTrimInputText(text);\r\n    }\r\n\r\n    // Make sure text begins and ends with a couple of newlines:\r\n    text = '\\n\\n' + text + '\\n\\n';\r\n\r\n    // detab\r\n    text = showdown.subParser('detab')(text, options, globals);\r\n\r\n    /**\r\n     * Strip any lines consisting only of spaces and tabs.\r\n     * This makes subsequent regexs easier to write, because we can\r\n     * match consecutive blank lines with /\\n+/ instead of something\r\n     * contorted like /[ \\t]*\\n+/\r\n     */\r\n    text = text.replace(/^[ \\t]+$/mg, '');\r\n\r\n    //run languageExtensions\r\n    showdown.helper.forEach(langExtensions, function (ext) {\r\n      text = showdown.subParser('runExtension')(ext, text, options, globals);\r\n    });\r\n\r\n    // run the sub parsers\r\n    text = showdown.subParser('metadata')(text, options, globals);\r\n    text = showdown.subParser('hashPreCodeTags')(text, options, globals);\r\n    text = showdown.subParser('githubCodeBlocks')(text, options, globals);\r\n    text = showdown.subParser('hashHTMLBlocks')(text, options, globals);\r\n    text = showdown.subParser('hashCodeTags')(text, options, globals);\r\n    text = showdown.subParser('stripLinkDefinitions')(text, options, globals);\r\n    text = showdown.subParser('blockGamut')(text, options, globals);\r\n    text = showdown.subParser('unhashHTMLSpans')(text, options, globals);\r\n    text = showdown.subParser('unescapeSpecialChars')(text, options, globals);\r\n\r\n    // attacklab: Restore dollar signs\r\n    text = text.replace(/¨D/g, '$$');\r\n\r\n    // attacklab: Restore tremas\r\n    text = text.replace(/¨T/g, '¨');\r\n\r\n    // render a complete html document instead of a partial if the option is enabled\r\n    text = showdown.subParser('completeHTMLDocument')(text, options, globals);\r\n\r\n    // Run output modifiers\r\n    showdown.helper.forEach(outputModifiers, function (ext) {\r\n      text = showdown.subParser('runExtension')(ext, text, options, globals);\r\n    });\r\n\r\n    // update metadata\r\n    metadata = globals.metadata;\r\n    return text;\r\n  };\r\n\r\n  /**\r\n   * Converts an HTML string into a markdown string\r\n   * @param src\r\n   * @param [HTMLParser] A WHATWG DOM and HTML parser, such as JSDOM. If none is supplied, window.document will be used.\r\n   * @returns {string}\r\n   */\r\n  this.makeMarkdown = this.makeMd = function (src, HTMLParser) {\r\n\r\n    // replace \\r\\n with \\n\r\n    src = src.replace(/\\r\\n/g, '\\n');\r\n    src = src.replace(/\\r/g, '\\n'); // old macs\r\n\r\n    // due to an edge case, we need to find this: > <\r\n    // to prevent removing of non silent white spaces\r\n    // ex: <em>this is</em> <strong>sparta</strong>\r\n    src = src.replace(/>[ \\t]+</, '>¨NBSP;<');\r\n\r\n    if (!HTMLParser) {\r\n      if (window && window.document) {\r\n        HTMLParser = window.document;\r\n      } else {\r\n        throw new Error('HTMLParser is undefined. If in a webworker or nodejs environment, you need to provide a WHATWG DOM and HTML such as JSDOM');\r\n      }\r\n    }\r\n\r\n    var doc = HTMLParser.createElement('div');\r\n    doc.innerHTML = src;\r\n\r\n    var globals = {\r\n      preList: substitutePreCodeTags(doc)\r\n    };\r\n\r\n    // remove all newlines and collapse spaces\r\n    clean(doc);\r\n\r\n    // some stuff, like accidental reference links must now be escaped\r\n    // TODO\r\n    // doc.innerHTML = doc.innerHTML.replace(/\\[[\\S\\t ]]/);\r\n\r\n    var nodes = doc.childNodes,\r\n        mdDoc = '';\r\n\r\n    for (var i = 0; i < nodes.length; i++) {\r\n      mdDoc += showdown.subParser('makeMarkdown.node')(nodes[i], globals);\r\n    }\r\n\r\n    function clean (node) {\r\n      for (var n = 0; n < node.childNodes.length; ++n) {\r\n        var child = node.childNodes[n];\r\n        if (child.nodeType === 3) {\r\n          if (!/\\S/.test(child.nodeValue)) {\r\n            node.removeChild(child);\r\n            --n;\r\n          } else {\r\n            child.nodeValue = child.nodeValue.split('\\n').join(' ');\r\n            child.nodeValue = child.nodeValue.replace(/(\\s)+/g, '$1');\r\n          }\r\n        } else if (child.nodeType === 1) {\r\n          clean(child);\r\n        }\r\n      }\r\n    }\r\n\r\n    // find all pre tags and replace contents with placeholder\r\n    // we need this so that we can remove all indentation from html\r\n    // to ease up parsing\r\n    function substitutePreCodeTags (doc) {\r\n\r\n      var pres = doc.querySelectorAll('pre'),\r\n          presPH = [];\r\n\r\n      for (var i = 0; i < pres.length; ++i) {\r\n\r\n        if (pres[i].childElementCount === 1 && pres[i].firstChild.tagName.toLowerCase() === 'code') {\r\n          var content = pres[i].firstChild.innerHTML.trim(),\r\n              language = pres[i].firstChild.getAttribute('data-language') || '';\r\n\r\n          // if data-language attribute is not defined, then we look for class language-*\r\n          if (language === '') {\r\n            var classes = pres[i].firstChild.className.split(' ');\r\n            for (var c = 0; c < classes.length; ++c) {\r\n              var matches = classes[c].match(/^language-(.+)$/);\r\n              if (matches !== null) {\r\n                language = matches[1];\r\n                break;\r\n              }\r\n            }\r\n          }\r\n\r\n          // unescape html entities in content\r\n          content = showdown.helper.unescapeHTMLEntities(content);\r\n\r\n          presPH.push(content);\r\n          pres[i].outerHTML = '<precode language=\"' + language + '\" precodenum=\"' + i.toString() + '\"></precode>';\r\n        } else {\r\n          presPH.push(pres[i].innerHTML);\r\n          pres[i].innerHTML = '';\r\n          pres[i].setAttribute('prenum', i.toString());\r\n        }\r\n      }\r\n      return presPH;\r\n    }\r\n\r\n    return mdDoc;\r\n  };\r\n\r\n  /**\r\n   * Set an option of this Converter instance\r\n   * @param {string} key\r\n   * @param {*} value\r\n   */\r\n  this.setOption = function (key, value) {\r\n    options[key] = value;\r\n  };\r\n\r\n  /**\r\n   * Get the option of this Converter instance\r\n   * @param {string} key\r\n   * @returns {*}\r\n   */\r\n  this.getOption = function (key) {\r\n    return options[key];\r\n  };\r\n\r\n  /**\r\n   * Get the options of this Converter instance\r\n   * @returns {{}}\r\n   */\r\n  this.getOptions = function () {\r\n    return options;\r\n  };\r\n\r\n  /**\r\n   * Add extension to THIS converter\r\n   * @param {{}} extension\r\n   * @param {string} [name=null]\r\n   */\r\n  this.addExtension = function (extension, name) {\r\n    name = name || null;\r\n    _parseExtension(extension, name);\r\n  };\r\n\r\n  /**\r\n   * Use a global registered extension with THIS converter\r\n   * @param {string} extensionName Name of the previously registered extension\r\n   */\r\n  this.useExtension = function (extensionName) {\r\n    _parseExtension(extensionName);\r\n  };\r\n\r\n  /**\r\n   * Set the flavor THIS converter should use\r\n   * @param {string} name\r\n   */\r\n  this.setFlavor = function (name) {\r\n    if (!flavor.hasOwnProperty(name)) {\r\n      throw Error(name + ' flavor was not found');\r\n    }\r\n    var preset = flavor[name];\r\n    setConvFlavor = name;\r\n    for (var option in preset) {\r\n      if (preset.hasOwnProperty(option)) {\r\n        options[option] = preset[option];\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Get the currently set flavor of this converter\r\n   * @returns {string}\r\n   */\r\n  this.getFlavor = function () {\r\n    return setConvFlavor;\r\n  };\r\n\r\n  /**\r\n   * Remove an extension from THIS converter.\r\n   * Note: This is a costly operation. It's better to initialize a new converter\r\n   * and specify the extensions you wish to use\r\n   * @param {Array} extension\r\n   */\r\n  this.removeExtension = function (extension) {\r\n    if (!showdown.helper.isArray(extension)) {\r\n      extension = [extension];\r\n    }\r\n    for (var a = 0; a < extension.length; ++a) {\r\n      var ext = extension[a];\r\n      for (var i = 0; i < langExtensions.length; ++i) {\r\n        if (langExtensions[i] === ext) {\r\n          langExtensions[i].splice(i, 1);\r\n        }\r\n      }\r\n      for (var ii = 0; ii < outputModifiers.length; ++i) {\r\n        if (outputModifiers[ii] === ext) {\r\n          outputModifiers[ii].splice(i, 1);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Get all extension of THIS converter\r\n   * @returns {{language: Array, output: Array}}\r\n   */\r\n  this.getAllExtensions = function () {\r\n    return {\r\n      language: langExtensions,\r\n      output: outputModifiers\r\n    };\r\n  };\r\n\r\n  /**\r\n   * Get the metadata of the previously parsed document\r\n   * @param raw\r\n   * @returns {string|{}}\r\n   */\r\n  this.getMetadata = function (raw) {\r\n    if (raw) {\r\n      return metadata.raw;\r\n    } else {\r\n      return metadata.parsed;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Get the metadata format of the previously parsed document\r\n   * @returns {string}\r\n   */\r\n  this.getMetadataFormat = function () {\r\n    return metadata.format;\r\n  };\r\n\r\n  /**\r\n   * Private: set a single key, value metadata pair\r\n   * @param {string} key\r\n   * @param {string} value\r\n   */\r\n  this._setMetadataPair = function (key, value) {\r\n    metadata.parsed[key] = value;\r\n  };\r\n\r\n  /**\r\n   * Private: set metadata format\r\n   * @param {string} format\r\n   */\r\n  this._setMetadataFormat = function (format) {\r\n    metadata.format = format;\r\n  };\r\n\r\n  /**\r\n   * Private: set metadata raw text\r\n   * @param {string} raw\r\n   */\r\n  this._setMetadataRaw = function (raw) {\r\n    metadata.raw = raw;\r\n  };\r\n};\r\n\r\n/**\r\n * Turn Markdown link shortcuts into XHTML <a> tags.\r\n */\r\nshowdown.subParser('anchors', function (text, options, globals) {\r\n  'use strict';\r\n\r\n  text = globals.converter._dispatch('anchors.before', text, options, globals);\r\n\r\n  var writeAnchorTag = function (wholeMatch, linkText, linkId, url, m5, m6, title) {\r\n    if (showdown.helper.isUndefined(title)) {\r\n      title = '';\r\n    }\r\n    linkId = linkId.toLowerCase();\r\n\r\n    // Special case for explicit empty url\r\n    if (wholeMatch.search(/\\(<?\\s*>? ?(['\"].*['\"])?\\)$/m) > -1) {\r\n      url = '';\r\n    } else if (!url) {\r\n      if (!linkId) {\r\n        // lower-case and turn embedded newlines into spaces\r\n        linkId = linkText.toLowerCase().replace(/ ?\\n/g, ' ');\r\n      }\r\n      url = '#' + linkId;\r\n\r\n      if (!showdown.helper.isUndefined(globals.gUrls[linkId])) {\r\n        url = globals.gUrls[linkId];\r\n        if (!showdown.helper.isUndefined(globals.gTitles[linkId])) {\r\n          title = globals.gTitles[linkId];\r\n        }\r\n      } else {\r\n        return wholeMatch;\r\n      }\r\n    }\r\n\r\n    //url = showdown.helper.escapeCharacters(url, '*_', false); // replaced line to improve performance\r\n    url = url.replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback);\r\n\r\n    var result = '<a href=\"' + url + '\"';\r\n\r\n    if (title !== '' && title !== null) {\r\n      title = title.replace(/\"/g, '&quot;');\r\n      //title = showdown.helper.escapeCharacters(title, '*_', false); // replaced line to improve performance\r\n      title = title.replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback);\r\n      result += ' title=\"' + title + '\"';\r\n    }\r\n\r\n    // optionLinksInNewWindow only applies\r\n    // to external links. Hash links (#) open in same page\r\n    if (options.openLinksInNewWindow && !/^#/.test(url)) {\r\n      // escaped _\r\n      result += ' rel=\"noopener noreferrer\" target=\"¨E95Eblank\"';\r\n    }\r\n\r\n    result += '>' + linkText + '</a>';\r\n\r\n    return result;\r\n  };\r\n\r\n  // First, handle reference-style links: [link text] [id]\r\n  text = text.replace(/\\[((?:\\[[^\\]]*]|[^\\[\\]])*)] ?(?:\\n *)?\\[(.*?)]()()()()/g, writeAnchorTag);\r\n\r\n  // Next, inline-style links: [link text](url \"optional title\")\r\n  // cases with crazy urls like ./image/cat1).png\r\n  text = text.replace(/\\[((?:\\[[^\\]]*]|[^\\[\\]])*)]()[ \\t]*\\([ \\t]?<([^>]*)>(?:[ \\t]*(([\"'])([^\"]*?)\\5))?[ \\t]?\\)/g,\r\n    writeAnchorTag);\r\n\r\n  // normal cases\r\n  text = text.replace(/\\[((?:\\[[^\\]]*]|[^\\[\\]])*)]()[ \\t]*\\([ \\t]?<?([\\S]+?(?:\\([\\S]*?\\)[\\S]*?)?)>?(?:[ \\t]*(([\"'])([^\"]*?)\\5))?[ \\t]?\\)/g,\r\n    writeAnchorTag);\r\n\r\n  // handle reference-style shortcuts: [link text]\r\n  // These must come last in case you've also got [link test][1]\r\n  // or [link test](/foo)\r\n  text = text.replace(/\\[([^\\[\\]]+)]()()()()()/g, writeAnchorTag);\r\n\r\n  // Lastly handle GithubMentions if option is enabled\r\n  if (options.ghMentions) {\r\n    text = text.replace(/(^|\\s)(\\\\)?(@([a-z\\d]+(?:[a-z\\d.-]+?[a-z\\d]+)*))/gmi, function (wm, st, escape, mentions, username) {\r\n      if (escape === '\\\\') {\r\n        return st + mentions;\r\n      }\r\n\r\n      //check if options.ghMentionsLink is a string\r\n      if (!showdown.helper.isString(options.ghMentionsLink)) {\r\n        throw new Error('ghMentionsLink option must be a string');\r\n      }\r\n      var lnk = options.ghMentionsLink.replace(/\\{u}/g, username),\r\n          target = '';\r\n      if (options.openLinksInNewWindow) {\r\n        target = ' rel=\"noopener noreferrer\" target=\"¨E95Eblank\"';\r\n      }\r\n      return st + '<a href=\"' + lnk + '\"' + target + '>' + mentions + '</a>';\r\n    });\r\n  }\r\n\r\n  text = globals.converter._dispatch('anchors.after', text, options, globals);\r\n  return text;\r\n});\r\n\r\n// url allowed chars [a-z\\d_.~:/?#[]@!$&'()*+,;=-]\r\n\r\nvar simpleURLRegex  = /([*~_]+|\\b)(((https?|ftp|dict):\\/\\/|www\\.)[^'\">\\s]+?\\.[^'\">\\s]+?)()(\\1)?(?=\\s|$)(?![\"<>])/gi,\r\n    simpleURLRegex2 = /([*~_]+|\\b)(((https?|ftp|dict):\\/\\/|www\\.)[^'\">\\s]+\\.[^'\">\\s]+?)([.!?,()\\[\\]])?(\\1)?(?=\\s|$)(?![\"<>])/gi,\r\n    delimUrlRegex   = /()<(((https?|ftp|dict):\\/\\/|www\\.)[^'\">\\s]+)()>()/gi,\r\n    simpleMailRegex = /(^|\\s)(?:mailto:)?([A-Za-z0-9!#$%&'*+-/=?^_`{|}~.]+@[-a-z0-9]+(\\.[-a-z0-9]+)*\\.[a-z]+)(?=$|\\s)/gmi,\r\n    delimMailRegex  = /<()(?:mailto:)?([-.\\w]+@[-a-z0-9]+(\\.[-a-z0-9]+)*\\.[a-z]+)>/gi,\r\n\r\n    replaceLink = function (options) {\r\n      'use strict';\r\n      return function (wm, leadingMagicChars, link, m2, m3, trailingPunctuation, trailingMagicChars) {\r\n        link = link.replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback);\r\n        var lnkTxt = link,\r\n            append = '',\r\n            target = '',\r\n            lmc    = leadingMagicChars || '',\r\n            tmc    = trailingMagicChars || '';\r\n        if (/^www\\./i.test(link)) {\r\n          link = link.replace(/^www\\./i, 'http://www.');\r\n        }\r\n        if (options.excludeTrailingPunctuationFromURLs && trailingPunctuation) {\r\n          append = trailingPunctuation;\r\n        }\r\n        if (options.openLinksInNewWindow) {\r\n          target = ' rel=\"noopener noreferrer\" target=\"¨E95Eblank\"';\r\n        }\r\n        return lmc + '<a href=\"' + link + '\"' + target + '>' + lnkTxt + '</a>' + append + tmc;\r\n      };\r\n    },\r\n\r\n    replaceMail = function (options, globals) {\r\n      'use strict';\r\n      return function (wholeMatch, b, mail) {\r\n        var href = 'mailto:';\r\n        b = b || '';\r\n        mail = showdown.subParser('unescapeSpecialChars')(mail, options, globals);\r\n        if (options.encodeEmails) {\r\n          href = showdown.helper.encodeEmailAddress(href + mail);\r\n          mail = showdown.helper.encodeEmailAddress(mail);\r\n        } else {\r\n          href = href + mail;\r\n        }\r\n        return b + '<a href=\"' + href + '\">' + mail + '</a>';\r\n      };\r\n    };\r\n\r\nshowdown.subParser('autoLinks', function (text, options, globals) {\r\n  'use strict';\r\n\r\n  text = globals.converter._dispatch('autoLinks.before', text, options, globals);\r\n\r\n  text = text.replace(delimUrlRegex, replaceLink(options));\r\n  text = text.replace(delimMailRegex, replaceMail(options, globals));\r\n\r\n  text = globals.converter._dispatch('autoLinks.after', text, options, globals);\r\n\r\n  return text;\r\n});\r\n\r\nshowdown.subParser('simplifiedAutoLinks', function (text, options, globals) {\r\n  'use strict';\r\n\r\n  if (!options.simplifiedAutoLink) {\r\n    return text;\r\n  }\r\n\r\n  text = globals.converter._dispatch('simplifiedAutoLinks.before', text, options, globals);\r\n\r\n  if (options.excludeTrailingPunctuationFromURLs) {\r\n    text = text.replace(simpleURLRegex2, replaceLink(options));\r\n  } else {\r\n    text = text.replace(simpleURLRegex, replaceLink(options));\r\n  }\r\n  text = text.replace(simpleMailRegex, replaceMail(options, globals));\r\n\r\n  text = globals.converter._dispatch('simplifiedAutoLinks.after', text, options, globals);\r\n\r\n  return text;\r\n});\r\n\r\n/**\r\n * These are all the transformations that form block-level\r\n * tags like paragraphs, headers, and list items.\r\n */\r\nshowdown.subParser('blockGamut', function (text, options, globals) {\r\n  'use strict';\r\n\r\n  text = globals.converter._dispatch('blockGamut.before', text, options, globals);\r\n\r\n  // we parse blockquotes first so that we can have headings and hrs\r\n  // inside blockquotes\r\n  text = showdown.subParser('blockQuotes')(text, options, globals);\r\n  text = showdown.subParser('headers')(text, options, globals);\r\n\r\n  // Do Horizontal Rules:\r\n  text = showdown.subParser('horizontalRule')(text, options, globals);\r\n\r\n  text = showdown.subParser('lists')(text, options, globals);\r\n  text = showdown.subParser('codeBlocks')(text, options, globals);\r\n  text = showdown.subParser('tables')(text, options, globals);\r\n\r\n  // We already ran _HashHTMLBlocks() before, in Markdown(), but that\r\n  // was to escape raw HTML in the original Markdown source. This time,\r\n  // we're escaping the markup we've just created, so that we don't wrap\r\n  // <p> tags around block-level tags.\r\n  text = showdown.subParser('hashHTMLBlocks')(text, options, globals);\r\n  text = showdown.subParser('paragraphs')(text, options, globals);\r\n\r\n  text = globals.converter._dispatch('blockGamut.after', text, options, globals);\r\n\r\n  return text;\r\n});\r\n\r\nshowdown.subParser('blockQuotes', function (text, options, globals) {\r\n  'use strict';\r\n\r\n  text = globals.converter._dispatch('blockQuotes.before', text, options, globals);\r\n\r\n  // add a couple extra lines after the text and endtext mark\r\n  text = text + '\\n\\n';\r\n\r\n  var rgx = /(^ {0,3}>[ \\t]?.+\\n(.+\\n)*\\n*)+/gm;\r\n\r\n  if (options.splitAdjacentBlockquotes) {\r\n    rgx = /^ {0,3}>[\\s\\S]*?(?:\\n\\n)/gm;\r\n  }\r\n\r\n  text = text.replace(rgx, function (bq) {\r\n    // attacklab: hack around Konqueror 3.5.4 bug:\r\n    // \"----------bug\".replace(/^-/g,\"\") == \"bug\"\r\n    bq = bq.replace(/^[ \\t]*>[ \\t]?/gm, ''); // trim one level of quoting\r\n\r\n    // attacklab: clean up hack\r\n    bq = bq.replace(/¨0/g, '');\r\n\r\n    bq = bq.replace(/^[ \\t]+$/gm, ''); // trim whitespace-only lines\r\n    bq = showdown.subParser('githubCodeBlocks')(bq, options, globals);\r\n    bq = showdown.subParser('blockGamut')(bq, options, globals); // recurse\r\n\r\n    bq = bq.replace(/(^|\\n)/g, '$1  ');\r\n    // These leading spaces screw with <pre> content, so we need to fix that:\r\n    bq = bq.replace(/(\\s*<pre>[^\\r]+?<\\/pre>)/gm, function (wholeMatch, m1) {\r\n      var pre = m1;\r\n      // attacklab: hack around Konqueror 3.5.4 bug:\r\n      pre = pre.replace(/^  /mg, '¨0');\r\n      pre = pre.replace(/¨0/g, '');\r\n      return pre;\r\n    });\r\n\r\n    return showdown.subParser('hashBlock')('<blockquote>\\n' + bq + '\\n</blockquote>', options, globals);\r\n  });\r\n\r\n  text = globals.converter._dispatch('blockQuotes.after', text, options, globals);\r\n  return text;\r\n});\r\n\r\n/**\r\n * Process Markdown `<pre><code>` blocks.\r\n */\r\nshowdown.subParser('codeBlocks', function (text, options, globals) {\r\n  'use strict';\r\n\r\n  text = globals.converter._dispatch('codeBlocks.before', text, options, globals);\r\n\r\n  // sentinel workarounds for lack of \\A and \\Z, safari\\khtml bug\r\n  text += '¨0';\r\n\r\n  var pattern = /(?:\\n\\n|^)((?:(?:[ ]{4}|\\t).*\\n+)+)(\\n*[ ]{0,3}[^ \\t\\n]|(?=¨0))/g;\r\n  text = text.replace(pattern, function (wholeMatch, m1, m2) {\r\n    var codeblock = m1,\r\n        nextChar = m2,\r\n        end = '\\n';\r\n\r\n    codeblock = showdown.subParser('outdent')(codeblock, options, globals);\r\n    codeblock = showdown.subParser('encodeCode')(codeblock, options, globals);\r\n    codeblock = showdown.subParser('detab')(codeblock, options, globals);\r\n    codeblock = codeblock.replace(/^\\n+/g, ''); // trim leading newlines\r\n    codeblock = codeblock.replace(/\\n+$/g, ''); // trim trailing newlines\r\n\r\n    if (options.omitExtraWLInCodeBlocks) {\r\n      end = '';\r\n    }\r\n\r\n    codeblock = '<pre><code>' + codeblock + end + '</code></pre>';\r\n\r\n    return showdown.subParser('hashBlock')(codeblock, options, globals) + nextChar;\r\n  });\r\n\r\n  // strip sentinel\r\n  text = text.replace(/¨0/, '');\r\n\r\n  text = globals.converter._dispatch('codeBlocks.after', text, options, globals);\r\n  return text;\r\n});\r\n\r\n/**\r\n *\r\n *   *  Backtick quotes are used for <code></code> spans.\r\n *\r\n *   *  You can use multiple backticks as the delimiters if you want to\r\n *     include literal backticks in the code span. So, this input:\r\n *\r\n *         Just type ``foo `bar` baz`` at the prompt.\r\n *\r\n *       Will translate to:\r\n *\r\n *         <p>Just type <code>foo `bar` baz</code> at the prompt.</p>\r\n *\r\n *    There's no arbitrary limit to the number of backticks you\r\n *    can use as delimters. If you need three consecutive backticks\r\n *    in your code, use four for delimiters, etc.\r\n *\r\n *  *  You can use spaces to get literal backticks at the edges:\r\n *\r\n *         ... type `` `bar` `` ...\r\n *\r\n *       Turns to:\r\n *\r\n *         ... type <code>`bar`</code> ...\r\n */\r\nshowdown.subParser('codeSpans', function (text, options, globals) {\r\n  'use strict';\r\n\r\n  text = globals.converter._dispatch('codeSpans.before', text, options, globals);\r\n\r\n  if (typeof text === 'undefined') {\r\n    text = '';\r\n  }\r\n  text = text.replace(/(^|[^\\\\])(`+)([^\\r]*?[^`])\\2(?!`)/gm,\r\n    function (wholeMatch, m1, m2, m3) {\r\n      var c = m3;\r\n      c = c.replace(/^([ \\t]*)/g, '');\t// leading whitespace\r\n      c = c.replace(/[ \\t]*$/g, '');\t// trailing whitespace\r\n      c = showdown.subParser('encodeCode')(c, options, globals);\r\n      c = m1 + '<code>' + c + '</code>';\r\n      c = showdown.subParser('hashHTMLSpans')(c, options, globals);\r\n      return c;\r\n    }\r\n  );\r\n\r\n  text = globals.converter._dispatch('codeSpans.after', text, options, globals);\r\n  return text;\r\n});\r\n\r\n/**\r\n * Create a full HTML document from the processed markdown\r\n */\r\nshowdown.subParser('completeHTMLDocument', function (text, options, globals) {\r\n  'use strict';\r\n\r\n  if (!options.completeHTMLDocument) {\r\n    return text;\r\n  }\r\n\r\n  text = globals.converter._dispatch('completeHTMLDocument.before', text, options, globals);\r\n\r\n  var doctype = 'html',\r\n      doctypeParsed = '<!DOCTYPE HTML>\\n',\r\n      title = '',\r\n      charset = '<meta charset=\"utf-8\">\\n',\r\n      lang = '',\r\n      metadata = '';\r\n\r\n  if (typeof globals.metadata.parsed.doctype !== 'undefined') {\r\n    doctypeParsed = '<!DOCTYPE ' +  globals.metadata.parsed.doctype + '>\\n';\r\n    doctype = globals.metadata.parsed.doctype.toString().toLowerCase();\r\n    if (doctype === 'html' || doctype === 'html5') {\r\n      charset = '<meta charset=\"utf-8\">';\r\n    }\r\n  }\r\n\r\n  for (var meta in globals.metadata.parsed) {\r\n    if (globals.metadata.parsed.hasOwnProperty(meta)) {\r\n      switch (meta.toLowerCase()) {\r\n        case 'doctype':\r\n          break;\r\n\r\n        case 'title':\r\n          title = '<title>' +  globals.metadata.parsed.title + '</title>\\n';\r\n          break;\r\n\r\n        case 'charset':\r\n          if (doctype === 'html' || doctype === 'html5') {\r\n            charset = '<meta charset=\"' + globals.metadata.parsed.charset + '\">\\n';\r\n          } else {\r\n            charset = '<meta name=\"charset\" content=\"' + globals.metadata.parsed.charset + '\">\\n';\r\n          }\r\n          break;\r\n\r\n        case 'language':\r\n        case 'lang':\r\n          lang = ' lang=\"' + globals.metadata.parsed[meta] + '\"';\r\n          metadata += '<meta name=\"' + meta + '\" content=\"' + globals.metadata.parsed[meta] + '\">\\n';\r\n          break;\r\n\r\n        default:\r\n          metadata += '<meta name=\"' + meta + '\" content=\"' + globals.metadata.parsed[meta] + '\">\\n';\r\n      }\r\n    }\r\n  }\r\n\r\n  text = doctypeParsed + '<html' + lang + '>\\n<head>\\n' + title + charset + metadata + '</head>\\n<body>\\n' + text.trim() + '\\n</body>\\n</html>';\r\n\r\n  text = globals.converter._dispatch('completeHTMLDocument.after', text, options, globals);\r\n  return text;\r\n});\r\n\r\n/**\r\n * Convert all tabs to spaces\r\n */\r\nshowdown.subParser('detab', function (text, options, globals) {\r\n  'use strict';\r\n  text = globals.converter._dispatch('detab.before', text, options, globals);\r\n\r\n  // expand first n-1 tabs\r\n  text = text.replace(/\\t(?=\\t)/g, '    '); // g_tab_width\r\n\r\n  // replace the nth with two sentinels\r\n  text = text.replace(/\\t/g, '¨A¨B');\r\n\r\n  // use the sentinel to anchor our regex so it doesn't explode\r\n  text = text.replace(/¨B(.+?)¨A/g, function (wholeMatch, m1) {\r\n    var leadingText = m1,\r\n        numSpaces = 4 - leadingText.length % 4;  // g_tab_width\r\n\r\n    // there *must* be a better way to do this:\r\n    for (var i = 0; i < numSpaces; i++) {\r\n      leadingText += ' ';\r\n    }\r\n\r\n    return leadingText;\r\n  });\r\n\r\n  // clean up sentinels\r\n  text = text.replace(/¨A/g, '    ');  // g_tab_width\r\n  text = text.replace(/¨B/g, '');\r\n\r\n  text = globals.converter._dispatch('detab.after', text, options, globals);\r\n  return text;\r\n});\r\n\r\nshowdown.subParser('ellipsis', function (text, options, globals) {\r\n  'use strict';\r\n\r\n  text = globals.converter._dispatch('ellipsis.before', text, options, globals);\r\n\r\n  text = text.replace(/\\.\\.\\./g, '…');\r\n\r\n  text = globals.converter._dispatch('ellipsis.after', text, options, globals);\r\n\r\n  return text;\r\n});\r\n\r\n/**\r\n * Turn emoji codes into emojis\r\n *\r\n * List of supported emojis: https://github.com/showdownjs/showdown/wiki/Emojis\r\n */\r\nshowdown.subParser('emoji', function (text, options, globals) {\r\n  'use strict';\r\n\r\n  if (!options.emoji) {\r\n    return text;\r\n  }\r\n\r\n  text = globals.converter._dispatch('emoji.before', text, options, globals);\r\n\r\n  var emojiRgx = /:([\\S]+?):/g;\r\n\r\n  text = text.replace(emojiRgx, function (wm, emojiCode) {\r\n    if (showdown.helper.emojis.hasOwnProperty(emojiCode)) {\r\n      return showdown.helper.emojis[emojiCode];\r\n    }\r\n    return wm;\r\n  });\r\n\r\n  text = globals.converter._dispatch('emoji.after', text, options, globals);\r\n\r\n  return text;\r\n});\r\n\r\n/**\r\n * Smart processing for ampersands and angle brackets that need to be encoded.\r\n */\r\nshowdown.subParser('encodeAmpsAndAngles', function (text, options, globals) {\r\n  'use strict';\r\n  text = globals.converter._dispatch('encodeAmpsAndAngles.before', text, options, globals);\r\n\r\n  // Ampersand-encoding based entirely on Nat Irons's Amputator MT plugin:\r\n  // http://bumppo.net/projects/amputator/\r\n  text = text.replace(/&(?!#?[xX]?(?:[0-9a-fA-F]+|\\w+);)/g, '&amp;');\r\n\r\n  // Encode naked <'s\r\n  text = text.replace(/<(?![a-z\\/?$!])/gi, '&lt;');\r\n\r\n  // Encode <\r\n  text = text.replace(/</g, '&lt;');\r\n\r\n  // Encode >\r\n  text = text.replace(/>/g, '&gt;');\r\n\r\n  text = globals.converter._dispatch('encodeAmpsAndAngles.after', text, options, globals);\r\n  return text;\r\n});\r\n\r\n/**\r\n * Returns the string, with after processing the following backslash escape sequences.\r\n *\r\n * attacklab: The polite way to do this is with the new escapeCharacters() function:\r\n *\r\n *    text = escapeCharacters(text,\"\\\\\",true);\r\n *    text = escapeCharacters(text,\"`*_{}[]()>#+-.!\",true);\r\n *\r\n * ...but we're sidestepping its use of the (slow) RegExp constructor\r\n * as an optimization for Firefox.  This function gets called a LOT.\r\n */\r\nshowdown.subParser('encodeBackslashEscapes', function (text, options, globals) {\r\n  'use strict';\r\n  text = globals.converter._dispatch('encodeBackslashEscapes.before', text, options, globals);\r\n\r\n  text = text.replace(/\\\\(\\\\)/g, showdown.helper.escapeCharactersCallback);\r\n  text = text.replace(/\\\\([`*_{}\\[\\]()>#+.!~=|-])/g, showdown.helper.escapeCharactersCallback);\r\n\r\n  text = globals.converter._dispatch('encodeBackslashEscapes.after', text, options, globals);\r\n  return text;\r\n});\r\n\r\n/**\r\n * Encode/escape certain characters inside Markdown code runs.\r\n * The point is that in code, these characters are literals,\r\n * and lose their special Markdown meanings.\r\n */\r\nshowdown.subParser('encodeCode', function (text, options, globals) {\r\n  'use strict';\r\n\r\n  text = globals.converter._dispatch('encodeCode.before', text, options, globals);\r\n\r\n  // Encode all ampersands; HTML entities are not\r\n  // entities within a Markdown code span.\r\n  text = text\r\n    .replace(/&/g, '&amp;')\r\n  // Do the angle bracket song and dance:\r\n    .replace(/</g, '&lt;')\r\n    .replace(/>/g, '&gt;')\r\n  // Now, escape characters that are magic in Markdown:\r\n    .replace(/([*_{}\\[\\]\\\\=~-])/g, showdown.helper.escapeCharactersCallback);\r\n\r\n  text = globals.converter._dispatch('encodeCode.after', text, options, globals);\r\n  return text;\r\n});\r\n\r\n/**\r\n * Within tags -- meaning between < and > -- encode [\\ ` * _ ~ =] so they\r\n * don't conflict with their use in Markdown for code, italics and strong.\r\n */\r\nshowdown.subParser('escapeSpecialCharsWithinTagAttributes', function (text, options, globals) {\r\n  'use strict';\r\n  text = globals.converter._dispatch('escapeSpecialCharsWithinTagAttributes.before', text, options, globals);\r\n\r\n  // Build a regex to find HTML tags.\r\n  var tags     = /<\\/?[a-z\\d_:-]+(?:[\\s]+[\\s\\S]+?)?>/gi,\r\n      comments = /<!(--(?:(?:[^>-]|-[^>])(?:[^-]|-[^-])*)--)>/gi;\r\n\r\n  text = text.replace(tags, function (wholeMatch) {\r\n    return wholeMatch\r\n      .replace(/(.)<\\/?code>(?=.)/g, '$1`')\r\n      .replace(/([\\\\`*_~=|])/g, showdown.helper.escapeCharactersCallback);\r\n  });\r\n\r\n  text = text.replace(comments, function (wholeMatch) {\r\n    return wholeMatch\r\n      .replace(/([\\\\`*_~=|])/g, showdown.helper.escapeCharactersCallback);\r\n  });\r\n\r\n  text = globals.converter._dispatch('escapeSpecialCharsWithinTagAttributes.after', text, options, globals);\r\n  return text;\r\n});\r\n\r\n/**\r\n * Handle github codeblocks prior to running HashHTML so that\r\n * HTML contained within the codeblock gets escaped properly\r\n * Example:\r\n * ```ruby\r\n *     def hello_world(x)\r\n *       puts \"Hello, #{x}\"\r\n *     end\r\n * ```\r\n */\r\nshowdown.subParser('githubCodeBlocks', function (text, options, globals) {\r\n  'use strict';\r\n\r\n  // early exit if option is not enabled\r\n  if (!options.ghCodeBlocks) {\r\n    return text;\r\n  }\r\n\r\n  text = globals.converter._dispatch('githubCodeBlocks.before', text, options, globals);\r\n\r\n  text += '¨0';\r\n\r\n  text = text.replace(/(?:^|\\n)(?: {0,3})(```+|~~~+)(?: *)([^\\s`~]*)\\n([\\s\\S]*?)\\n(?: {0,3})\\1/g, function (wholeMatch, delim, language, codeblock) {\r\n    var end = (options.omitExtraWLInCodeBlocks) ? '' : '\\n';\r\n\r\n    // First parse the github code block\r\n    codeblock = showdown.subParser('encodeCode')(codeblock, options, globals);\r\n    codeblock = showdown.subParser('detab')(codeblock, options, globals);\r\n    codeblock = codeblock.replace(/^\\n+/g, ''); // trim leading newlines\r\n    codeblock = codeblock.replace(/\\n+$/g, ''); // trim trailing whitespace\r\n\r\n    codeblock = '<pre><code' + (language ? ' class=\"' + language + ' language-' + language + '\"' : '') + '>' + codeblock + end + '</code></pre>';\r\n\r\n    codeblock = showdown.subParser('hashBlock')(codeblock, options, globals);\r\n\r\n    // Since GHCodeblocks can be false positives, we need to\r\n    // store the primitive text and the parsed text in a global var,\r\n    // and then return a token\r\n    return '\\n\\n¨G' + (globals.ghCodeBlocks.push({text: wholeMatch, codeblock: codeblock}) - 1) + 'G\\n\\n';\r\n  });\r\n\r\n  // attacklab: strip sentinel\r\n  text = text.replace(/¨0/, '');\r\n\r\n  return globals.converter._dispatch('githubCodeBlocks.after', text, options, globals);\r\n});\r\n\r\nshowdown.subParser('hashBlock', function (text, options, globals) {\r\n  'use strict';\r\n  text = globals.converter._dispatch('hashBlock.before', text, options, globals);\r\n  text = text.replace(/(^\\n+|\\n+$)/g, '');\r\n  text = '\\n\\n¨K' + (globals.gHtmlBlocks.push(text) - 1) + 'K\\n\\n';\r\n  text = globals.converter._dispatch('hashBlock.after', text, options, globals);\r\n  return text;\r\n});\r\n\r\n/**\r\n * Hash and escape <code> elements that should not be parsed as markdown\r\n */\r\nshowdown.subParser('hashCodeTags', function (text, options, globals) {\r\n  'use strict';\r\n  text = globals.converter._dispatch('hashCodeTags.before', text, options, globals);\r\n\r\n  var repFunc = function (wholeMatch, match, left, right) {\r\n    var codeblock = left + showdown.subParser('encodeCode')(match, options, globals) + right;\r\n    return '¨C' + (globals.gHtmlSpans.push(codeblock) - 1) + 'C';\r\n  };\r\n\r\n  // Hash naked <code>\r\n  text = showdown.helper.replaceRecursiveRegExp(text, repFunc, '<code\\\\b[^>]*>', '</code>', 'gim');\r\n\r\n  text = globals.converter._dispatch('hashCodeTags.after', text, options, globals);\r\n  return text;\r\n});\r\n\r\nshowdown.subParser('hashElement', function (text, options, globals) {\r\n  'use strict';\r\n\r\n  return function (wholeMatch, m1) {\r\n    var blockText = m1;\r\n\r\n    // Undo double lines\r\n    blockText = blockText.replace(/\\n\\n/g, '\\n');\r\n    blockText = blockText.replace(/^\\n/, '');\r\n\r\n    // strip trailing blank lines\r\n    blockText = blockText.replace(/\\n+$/g, '');\r\n\r\n    // Replace the element text with a marker (\"¨KxK\" where x is its key)\r\n    blockText = '\\n\\n¨K' + (globals.gHtmlBlocks.push(blockText) - 1) + 'K\\n\\n';\r\n\r\n    return blockText;\r\n  };\r\n});\r\n\r\nshowdown.subParser('hashHTMLBlocks', function (text, options, globals) {\r\n  'use strict';\r\n  text = globals.converter._dispatch('hashHTMLBlocks.before', text, options, globals);\r\n\r\n  var blockTags = [\r\n        'pre',\r\n        'div',\r\n        'h1',\r\n        'h2',\r\n        'h3',\r\n        'h4',\r\n        'h5',\r\n        'h6',\r\n        'blockquote',\r\n        'table',\r\n        'dl',\r\n        'ol',\r\n        'ul',\r\n        'script',\r\n        'noscript',\r\n        'form',\r\n        'fieldset',\r\n        'iframe',\r\n        'math',\r\n        'style',\r\n        'section',\r\n        'header',\r\n        'footer',\r\n        'nav',\r\n        'article',\r\n        'aside',\r\n        'address',\r\n        'audio',\r\n        'canvas',\r\n        'figure',\r\n        'hgroup',\r\n        'output',\r\n        'video',\r\n        'p'\r\n      ],\r\n      repFunc = function (wholeMatch, match, left, right) {\r\n        var txt = wholeMatch;\r\n        // check if this html element is marked as markdown\r\n        // if so, it's contents should be parsed as markdown\r\n        if (left.search(/\\bmarkdown\\b/) !== -1) {\r\n          txt = left + globals.converter.makeHtml(match) + right;\r\n        }\r\n        return '\\n\\n¨K' + (globals.gHtmlBlocks.push(txt) - 1) + 'K\\n\\n';\r\n      };\r\n\r\n  if (options.backslashEscapesHTMLTags) {\r\n    // encode backslash escaped HTML tags\r\n    text = text.replace(/\\\\<(\\/?[^>]+?)>/g, function (wm, inside) {\r\n      return '&lt;' + inside + '&gt;';\r\n    });\r\n  }\r\n\r\n  // hash HTML Blocks\r\n  for (var i = 0; i < blockTags.length; ++i) {\r\n\r\n    var opTagPos,\r\n        rgx1     = new RegExp('^ {0,3}(<' + blockTags[i] + '\\\\b[^>]*>)', 'im'),\r\n        patLeft  = '<' + blockTags[i] + '\\\\b[^>]*>',\r\n        patRight = '</' + blockTags[i] + '>';\r\n    // 1. Look for the first position of the first opening HTML tag in the text\r\n    while ((opTagPos = showdown.helper.regexIndexOf(text, rgx1)) !== -1) {\r\n\r\n      // if the HTML tag is \\ escaped, we need to escape it and break\r\n\r\n\r\n      //2. Split the text in that position\r\n      var subTexts = showdown.helper.splitAtIndex(text, opTagPos),\r\n          //3. Match recursively\r\n          newSubText1 = showdown.helper.replaceRecursiveRegExp(subTexts[1], repFunc, patLeft, patRight, 'im');\r\n\r\n      // prevent an infinite loop\r\n      if (newSubText1 === subTexts[1]) {\r\n        break;\r\n      }\r\n      text = subTexts[0].concat(newSubText1);\r\n    }\r\n  }\r\n  // HR SPECIAL CASE\r\n  text = text.replace(/(\\n {0,3}(<(hr)\\b([^<>])*?\\/?>)[ \\t]*(?=\\n{2,}))/g,\r\n    showdown.subParser('hashElement')(text, options, globals));\r\n\r\n  // Special case for standalone HTML comments\r\n  text = showdown.helper.replaceRecursiveRegExp(text, function (txt) {\r\n    return '\\n\\n¨K' + (globals.gHtmlBlocks.push(txt) - 1) + 'K\\n\\n';\r\n  }, '^ {0,3}\x3c!--', '--\x3e', 'gm');\r\n\r\n  // PHP and ASP-style processor instructions (<?...?> and <%...%>)\r\n  text = text.replace(/(?:\\n\\n)( {0,3}(?:<([?%])[^\\r]*?\\2>)[ \\t]*(?=\\n{2,}))/g,\r\n    showdown.subParser('hashElement')(text, options, globals));\r\n\r\n  text = globals.converter._dispatch('hashHTMLBlocks.after', text, options, globals);\r\n  return text;\r\n});\r\n\r\n/**\r\n * Hash span elements that should not be parsed as markdown\r\n */\r\nshowdown.subParser('hashHTMLSpans', function (text, options, globals) {\r\n  'use strict';\r\n  text = globals.converter._dispatch('hashHTMLSpans.before', text, options, globals);\r\n\r\n  function hashHTMLSpan (html) {\r\n    return '¨C' + (globals.gHtmlSpans.push(html) - 1) + 'C';\r\n  }\r\n\r\n  // Hash Self Closing tags\r\n  text = text.replace(/<[^>]+?\\/>/gi, function (wm) {\r\n    return hashHTMLSpan(wm);\r\n  });\r\n\r\n  // Hash tags without properties\r\n  text = text.replace(/<([^>]+?)>[\\s\\S]*?<\\/\\1>/g, function (wm) {\r\n    return hashHTMLSpan(wm);\r\n  });\r\n\r\n  // Hash tags with properties\r\n  text = text.replace(/<([^>]+?)\\s[^>]+?>[\\s\\S]*?<\\/\\1>/g, function (wm) {\r\n    return hashHTMLSpan(wm);\r\n  });\r\n\r\n  // Hash self closing tags without />\r\n  text = text.replace(/<[^>]+?>/gi, function (wm) {\r\n    return hashHTMLSpan(wm);\r\n  });\r\n\r\n  /*showdown.helper.matchRecursiveRegExp(text, '<code\\\\b[^>]*>', '</code>', 'gi');*/\r\n\r\n  text = globals.converter._dispatch('hashHTMLSpans.after', text, options, globals);\r\n  return text;\r\n});\r\n\r\n/**\r\n * Unhash HTML spans\r\n */\r\nshowdown.subParser('unhashHTMLSpans', function (text, options, globals) {\r\n  'use strict';\r\n  text = globals.converter._dispatch('unhashHTMLSpans.before', text, options, globals);\r\n\r\n  for (var i = 0; i < globals.gHtmlSpans.length; ++i) {\r\n    var repText = globals.gHtmlSpans[i],\r\n        // limiter to prevent infinite loop (assume 10 as limit for recurse)\r\n        limit = 0;\r\n\r\n    while (/¨C(\\d+)C/.test(repText)) {\r\n      var num = RegExp.$1;\r\n      repText = repText.replace('¨C' + num + 'C', globals.gHtmlSpans[num]);\r\n      if (limit === 10) {\r\n        console.error('maximum nesting of 10 spans reached!!!');\r\n        break;\r\n      }\r\n      ++limit;\r\n    }\r\n    text = text.replace('¨C' + i + 'C', repText);\r\n  }\r\n\r\n  text = globals.converter._dispatch('unhashHTMLSpans.after', text, options, globals);\r\n  return text;\r\n});\r\n\r\n/**\r\n * Hash and escape <pre><code> elements that should not be parsed as markdown\r\n */\r\nshowdown.subParser('hashPreCodeTags', function (text, options, globals) {\r\n  'use strict';\r\n  text = globals.converter._dispatch('hashPreCodeTags.before', text, options, globals);\r\n\r\n  var repFunc = function (wholeMatch, match, left, right) {\r\n    // encode html entities\r\n    var codeblock = left + showdown.subParser('encodeCode')(match, options, globals) + right;\r\n    return '\\n\\n¨G' + (globals.ghCodeBlocks.push({text: wholeMatch, codeblock: codeblock}) - 1) + 'G\\n\\n';\r\n  };\r\n\r\n  // Hash <pre><code>\r\n  text = showdown.helper.replaceRecursiveRegExp(text, repFunc, '^ {0,3}<pre\\\\b[^>]*>\\\\s*<code\\\\b[^>]*>', '^ {0,3}</code>\\\\s*</pre>', 'gim');\r\n\r\n  text = globals.converter._dispatch('hashPreCodeTags.after', text, options, globals);\r\n  return text;\r\n});\r\n\r\nshowdown.subParser('headers', function (text, options, globals) {\r\n  'use strict';\r\n\r\n  text = globals.converter._dispatch('headers.before', text, options, globals);\r\n\r\n  var headerLevelStart = (isNaN(parseInt(options.headerLevelStart))) ? 1 : parseInt(options.headerLevelStart),\r\n\r\n      // Set text-style headers:\r\n      //\tHeader 1\r\n      //\t========\r\n      //\r\n      //\tHeader 2\r\n      //\t--------\r\n      //\r\n      setextRegexH1 = (options.smoothLivePreview) ? /^(.+)[ \\t]*\\n={2,}[ \\t]*\\n+/gm : /^(.+)[ \\t]*\\n=+[ \\t]*\\n+/gm,\r\n      setextRegexH2 = (options.smoothLivePreview) ? /^(.+)[ \\t]*\\n-{2,}[ \\t]*\\n+/gm : /^(.+)[ \\t]*\\n-+[ \\t]*\\n+/gm;\r\n\r\n  text = text.replace(setextRegexH1, function (wholeMatch, m1) {\r\n\r\n    var spanGamut = showdown.subParser('spanGamut')(m1, options, globals),\r\n        hID = (options.noHeaderId) ? '' : ' id=\"' + headerId(m1) + '\"',\r\n        hLevel = headerLevelStart,\r\n        hashBlock = '<h' + hLevel + hID + '>' + spanGamut + '</h' + hLevel + '>';\r\n    return showdown.subParser('hashBlock')(hashBlock, options, globals);\r\n  });\r\n\r\n  text = text.replace(setextRegexH2, function (matchFound, m1) {\r\n    var spanGamut = showdown.subParser('spanGamut')(m1, options, globals),\r\n        hID = (options.noHeaderId) ? '' : ' id=\"' + headerId(m1) + '\"',\r\n        hLevel = headerLevelStart + 1,\r\n        hashBlock = '<h' + hLevel + hID + '>' + spanGamut + '</h' + hLevel + '>';\r\n    return showdown.subParser('hashBlock')(hashBlock, options, globals);\r\n  });\r\n\r\n  // atx-style headers:\r\n  //  # Header 1\r\n  //  ## Header 2\r\n  //  ## Header 2 with closing hashes ##\r\n  //  ...\r\n  //  ###### Header 6\r\n  //\r\n  var atxStyle = (options.requireSpaceBeforeHeadingText) ? /^(#{1,6})[ \\t]+(.+?)[ \\t]*#*\\n+/gm : /^(#{1,6})[ \\t]*(.+?)[ \\t]*#*\\n+/gm;\r\n\r\n  text = text.replace(atxStyle, function (wholeMatch, m1, m2) {\r\n    var hText = m2;\r\n    if (options.customizedHeaderId) {\r\n      hText = m2.replace(/\\s?\\{([^{]+?)}\\s*$/, '');\r\n    }\r\n\r\n    var span = showdown.subParser('spanGamut')(hText, options, globals),\r\n        hID = (options.noHeaderId) ? '' : ' id=\"' + headerId(m2) + '\"',\r\n        hLevel = headerLevelStart - 1 + m1.length,\r\n        header = '<h' + hLevel + hID + '>' + span + '</h' + hLevel + '>';\r\n\r\n    return showdown.subParser('hashBlock')(header, options, globals);\r\n  });\r\n\r\n  function headerId (m) {\r\n    var title,\r\n        prefix;\r\n\r\n    // It is separate from other options to allow combining prefix and customized\r\n    if (options.customizedHeaderId) {\r\n      var match = m.match(/\\{([^{]+?)}\\s*$/);\r\n      if (match && match[1]) {\r\n        m = match[1];\r\n      }\r\n    }\r\n\r\n    title = m;\r\n\r\n    // Prefix id to prevent causing inadvertent pre-existing style matches.\r\n    if (showdown.helper.isString(options.prefixHeaderId)) {\r\n      prefix = options.prefixHeaderId;\r\n    } else if (options.prefixHeaderId === true) {\r\n      prefix = 'section-';\r\n    } else {\r\n      prefix = '';\r\n    }\r\n\r\n    if (!options.rawPrefixHeaderId) {\r\n      title = prefix + title;\r\n    }\r\n\r\n    if (options.ghCompatibleHeaderId) {\r\n      title = title\r\n        .replace(/ /g, '-')\r\n        // replace previously escaped chars (&, ¨ and $)\r\n        .replace(/&amp;/g, '')\r\n        .replace(/¨T/g, '')\r\n        .replace(/¨D/g, '')\r\n        // replace rest of the chars (&~$ are repeated as they might have been escaped)\r\n        // borrowed from github's redcarpet (some they should produce similar results)\r\n        .replace(/[&+$,\\/:;=?@\"#{}|^¨~\\[\\]`\\\\*)(%.!'<>]/g, '')\r\n        .toLowerCase();\r\n    } else if (options.rawHeaderId) {\r\n      title = title\r\n        .replace(/ /g, '-')\r\n        // replace previously escaped chars (&, ¨ and $)\r\n        .replace(/&amp;/g, '&')\r\n        .replace(/¨T/g, '¨')\r\n        .replace(/¨D/g, '$')\r\n        // replace \" and '\r\n        .replace(/[\"']/g, '-')\r\n        .toLowerCase();\r\n    } else {\r\n      title = title\r\n        .replace(/[^\\w]/g, '')\r\n        .toLowerCase();\r\n    }\r\n\r\n    if (options.rawPrefixHeaderId) {\r\n      title = prefix + title;\r\n    }\r\n\r\n    if (globals.hashLinkCounts[title]) {\r\n      title = title + '-' + (globals.hashLinkCounts[title]++);\r\n    } else {\r\n      globals.hashLinkCounts[title] = 1;\r\n    }\r\n    return title;\r\n  }\r\n\r\n  text = globals.converter._dispatch('headers.after', text, options, globals);\r\n  return text;\r\n});\r\n\r\n/**\r\n * Turn Markdown link shortcuts into XHTML <a> tags.\r\n */\r\nshowdown.subParser('horizontalRule', function (text, options, globals) {\r\n  'use strict';\r\n  text = globals.converter._dispatch('horizontalRule.before', text, options, globals);\r\n\r\n  var key = showdown.subParser('hashBlock')('<hr />', options, globals);\r\n  text = text.replace(/^ {0,2}( ?-){3,}[ \\t]*$/gm, key);\r\n  text = text.replace(/^ {0,2}( ?\\*){3,}[ \\t]*$/gm, key);\r\n  text = text.replace(/^ {0,2}( ?_){3,}[ \\t]*$/gm, key);\r\n\r\n  text = globals.converter._dispatch('horizontalRule.after', text, options, globals);\r\n  return text;\r\n});\r\n\r\n/**\r\n * Turn Markdown image shortcuts into <img> tags.\r\n */\r\nshowdown.subParser('images', function (text, options, globals) {\r\n  'use strict';\r\n\r\n  text = globals.converter._dispatch('images.before', text, options, globals);\r\n\r\n  var inlineRegExp      = /!\\[([^\\]]*?)][ \\t]*()\\([ \\t]?<?([\\S]+?(?:\\([\\S]*?\\)[\\S]*?)?)>?(?: =([*\\d]+[A-Za-z%]{0,4})x([*\\d]+[A-Za-z%]{0,4}))?[ \\t]*(?:([\"'])([^\"]*?)\\6)?[ \\t]?\\)/g,\r\n      crazyRegExp       = /!\\[([^\\]]*?)][ \\t]*()\\([ \\t]?<([^>]*)>(?: =([*\\d]+[A-Za-z%]{0,4})x([*\\d]+[A-Za-z%]{0,4}))?[ \\t]*(?:(?:([\"'])([^\"]*?)\\6))?[ \\t]?\\)/g,\r\n      base64RegExp      = /!\\[([^\\]]*?)][ \\t]*()\\([ \\t]?<?(data:.+?\\/.+?;base64,[A-Za-z0-9+/=\\n]+?)>?(?: =([*\\d]+[A-Za-z%]{0,4})x([*\\d]+[A-Za-z%]{0,4}))?[ \\t]*(?:([\"'])([^\"]*?)\\6)?[ \\t]?\\)/g,\r\n      referenceRegExp   = /!\\[([^\\]]*?)] ?(?:\\n *)?\\[([\\s\\S]*?)]()()()()()/g,\r\n      refShortcutRegExp = /!\\[([^\\[\\]]+)]()()()()()/g;\r\n\r\n  function writeImageTagBase64 (wholeMatch, altText, linkId, url, width, height, m5, title) {\r\n    url = url.replace(/\\s/g, '');\r\n    return writeImageTag (wholeMatch, altText, linkId, url, width, height, m5, title);\r\n  }\r\n\r\n  function writeImageTag (wholeMatch, altText, linkId, url, width, height, m5, title) {\r\n\r\n    var gUrls   = globals.gUrls,\r\n        gTitles = globals.gTitles,\r\n        gDims   = globals.gDimensions;\r\n\r\n    linkId = linkId.toLowerCase();\r\n\r\n    if (!title) {\r\n      title = '';\r\n    }\r\n    // Special case for explicit empty url\r\n    if (wholeMatch.search(/\\(<?\\s*>? ?(['\"].*['\"])?\\)$/m) > -1) {\r\n      url = '';\r\n\r\n    } else if (url === '' || url === null) {\r\n      if (linkId === '' || linkId === null) {\r\n        // lower-case and turn embedded newlines into spaces\r\n        linkId = altText.toLowerCase().replace(/ ?\\n/g, ' ');\r\n      }\r\n      url = '#' + linkId;\r\n\r\n      if (!showdown.helper.isUndefined(gUrls[linkId])) {\r\n        url = gUrls[linkId];\r\n        if (!showdown.helper.isUndefined(gTitles[linkId])) {\r\n          title = gTitles[linkId];\r\n        }\r\n        if (!showdown.helper.isUndefined(gDims[linkId])) {\r\n          width = gDims[linkId].width;\r\n          height = gDims[linkId].height;\r\n        }\r\n      } else {\r\n        return wholeMatch;\r\n      }\r\n    }\r\n\r\n    altText = altText\r\n      .replace(/\"/g, '&quot;')\r\n    //altText = showdown.helper.escapeCharacters(altText, '*_', false);\r\n      .replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback);\r\n    //url = showdown.helper.escapeCharacters(url, '*_', false);\r\n    url = url.replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback);\r\n    var result = '<img src=\"' + url + '\" alt=\"' + altText + '\"';\r\n\r\n    if (title && showdown.helper.isString(title)) {\r\n      title = title\r\n        .replace(/\"/g, '&quot;')\r\n      //title = showdown.helper.escapeCharacters(title, '*_', false);\r\n        .replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback);\r\n      result += ' title=\"' + title + '\"';\r\n    }\r\n\r\n    if (width && height) {\r\n      width  = (width === '*') ? 'auto' : width;\r\n      height = (height === '*') ? 'auto' : height;\r\n\r\n      result += ' width=\"' + width + '\"';\r\n      result += ' height=\"' + height + '\"';\r\n    }\r\n\r\n    result += ' />';\r\n\r\n    return result;\r\n  }\r\n\r\n  // First, handle reference-style labeled images: ![alt text][id]\r\n  text = text.replace(referenceRegExp, writeImageTag);\r\n\r\n  // Next, handle inline images:  ![alt text](url =<width>x<height> \"optional title\")\r\n\r\n  // base64 encoded images\r\n  text = text.replace(base64RegExp, writeImageTagBase64);\r\n\r\n  // cases with crazy urls like ./image/cat1).png\r\n  text = text.replace(crazyRegExp, writeImageTag);\r\n\r\n  // normal cases\r\n  text = text.replace(inlineRegExp, writeImageTag);\r\n\r\n  // handle reference-style shortcuts: ![img text]\r\n  text = text.replace(refShortcutRegExp, writeImageTag);\r\n\r\n  text = globals.converter._dispatch('images.after', text, options, globals);\r\n  return text;\r\n});\r\n\r\nshowdown.subParser('italicsAndBold', function (text, options, globals) {\r\n  'use strict';\r\n\r\n  text = globals.converter._dispatch('italicsAndBold.before', text, options, globals);\r\n\r\n  // it's faster to have 3 separate regexes for each case than have just one\r\n  // because of backtracing, in some cases, it could lead to an exponential effect\r\n  // called \"catastrophic backtrace\". Ominous!\r\n\r\n  function parseInside (txt, left, right) {\r\n    /*\r\n    if (options.simplifiedAutoLink) {\r\n      txt = showdown.subParser('simplifiedAutoLinks')(txt, options, globals);\r\n    }\r\n    */\r\n    return left + txt + right;\r\n  }\r\n\r\n  // Parse underscores\r\n  if (options.literalMidWordUnderscores) {\r\n    text = text.replace(/\\b___(\\S[\\s\\S]*?)___\\b/g, function (wm, txt) {\r\n      return parseInside (txt, '<strong><em>', '</em></strong>');\r\n    });\r\n    text = text.replace(/\\b__(\\S[\\s\\S]*?)__\\b/g, function (wm, txt) {\r\n      return parseInside (txt, '<strong>', '</strong>');\r\n    });\r\n    text = text.replace(/\\b_(\\S[\\s\\S]*?)_\\b/g, function (wm, txt) {\r\n      return parseInside (txt, '<em>', '</em>');\r\n    });\r\n  } else {\r\n    text = text.replace(/___(\\S[\\s\\S]*?)___/g, function (wm, m) {\r\n      return (/\\S$/.test(m)) ? parseInside (m, '<strong><em>', '</em></strong>') : wm;\r\n    });\r\n    text = text.replace(/__(\\S[\\s\\S]*?)__/g, function (wm, m) {\r\n      return (/\\S$/.test(m)) ? parseInside (m, '<strong>', '</strong>') : wm;\r\n    });\r\n    text = text.replace(/_([^\\s_][\\s\\S]*?)_/g, function (wm, m) {\r\n      // !/^_[^_]/.test(m) - test if it doesn't start with __ (since it seems redundant, we removed it)\r\n      return (/\\S$/.test(m)) ? parseInside (m, '<em>', '</em>') : wm;\r\n    });\r\n  }\r\n\r\n  // Now parse asterisks\r\n  if (options.literalMidWordAsterisks) {\r\n    text = text.replace(/([^*]|^)\\B\\*\\*\\*(\\S[\\s\\S]*?)\\*\\*\\*\\B(?!\\*)/g, function (wm, lead, txt) {\r\n      return parseInside (txt, lead + '<strong><em>', '</em></strong>');\r\n    });\r\n    text = text.replace(/([^*]|^)\\B\\*\\*(\\S[\\s\\S]*?)\\*\\*\\B(?!\\*)/g, function (wm, lead, txt) {\r\n      return parseInside (txt, lead + '<strong>', '</strong>');\r\n    });\r\n    text = text.replace(/([^*]|^)\\B\\*(\\S[\\s\\S]*?)\\*\\B(?!\\*)/g, function (wm, lead, txt) {\r\n      return parseInside (txt, lead + '<em>', '</em>');\r\n    });\r\n  } else {\r\n    text = text.replace(/\\*\\*\\*(\\S[\\s\\S]*?)\\*\\*\\*/g, function (wm, m) {\r\n      return (/\\S$/.test(m)) ? parseInside (m, '<strong><em>', '</em></strong>') : wm;\r\n    });\r\n    text = text.replace(/\\*\\*(\\S[\\s\\S]*?)\\*\\*/g, function (wm, m) {\r\n      return (/\\S$/.test(m)) ? parseInside (m, '<strong>', '</strong>') : wm;\r\n    });\r\n    text = text.replace(/\\*([^\\s*][\\s\\S]*?)\\*/g, function (wm, m) {\r\n      // !/^\\*[^*]/.test(m) - test if it doesn't start with ** (since it seems redundant, we removed it)\r\n      return (/\\S$/.test(m)) ? parseInside (m, '<em>', '</em>') : wm;\r\n    });\r\n  }\r\n\r\n\r\n  text = globals.converter._dispatch('italicsAndBold.after', text, options, globals);\r\n  return text;\r\n});\r\n\r\n/**\r\n * Form HTML ordered (numbered) and unordered (bulleted) lists.\r\n */\r\nshowdown.subParser('lists', function (text, options, globals) {\r\n  'use strict';\r\n\r\n  /**\r\n   * Process the contents of a single ordered or unordered list, splitting it\r\n   * into individual list items.\r\n   * @param {string} listStr\r\n   * @param {boolean} trimTrailing\r\n   * @returns {string}\r\n   */\r\n  function processListItems (listStr, trimTrailing) {\r\n    // The $g_list_level global keeps track of when we're inside a list.\r\n    // Each time we enter a list, we increment it; when we leave a list,\r\n    // we decrement. If it's zero, we're not in a list anymore.\r\n    //\r\n    // We do this because when we're not inside a list, we want to treat\r\n    // something like this:\r\n    //\r\n    //    I recommend upgrading to version\r\n    //    8. Oops, now this line is treated\r\n    //    as a sub-list.\r\n    //\r\n    // As a single paragraph, despite the fact that the second line starts\r\n    // with a digit-period-space sequence.\r\n    //\r\n    // Whereas when we're inside a list (or sub-list), that line will be\r\n    // treated as the start of a sub-list. What a kludge, huh? This is\r\n    // an aspect of Markdown's syntax that's hard to parse perfectly\r\n    // without resorting to mind-reading. Perhaps the solution is to\r\n    // change the syntax rules such that sub-lists must start with a\r\n    // starting cardinal number; e.g. \"1.\" or \"a.\".\r\n    globals.gListLevel++;\r\n\r\n    // trim trailing blank lines:\r\n    listStr = listStr.replace(/\\n{2,}$/, '\\n');\r\n\r\n    // attacklab: add sentinel to emulate \\z\r\n    listStr += '¨0';\r\n\r\n    var rgx = /(\\n)?(^ {0,3})([*+-]|\\d+[.])[ \\t]+((\\[(x|X| )?])?[ \\t]*[^\\r]+?(\\n{1,2}))(?=\\n*(¨0| {0,3}([*+-]|\\d+[.])[ \\t]+))/gm,\r\n        isParagraphed = (/\\n[ \\t]*\\n(?!¨0)/.test(listStr));\r\n\r\n    // Since version 1.5, nesting sublists requires 4 spaces (or 1 tab) indentation,\r\n    // which is a syntax breaking change\r\n    // activating this option reverts to old behavior\r\n    if (options.disableForced4SpacesIndentedSublists) {\r\n      rgx = /(\\n)?(^ {0,3})([*+-]|\\d+[.])[ \\t]+((\\[(x|X| )?])?[ \\t]*[^\\r]+?(\\n{1,2}))(?=\\n*(¨0|\\2([*+-]|\\d+[.])[ \\t]+))/gm;\r\n    }\r\n\r\n    listStr = listStr.replace(rgx, function (wholeMatch, m1, m2, m3, m4, taskbtn, checked) {\r\n      checked = (checked && checked.trim() !== '');\r\n\r\n      var item = showdown.subParser('outdent')(m4, options, globals),\r\n          bulletStyle = '';\r\n\r\n      // Support for github tasklists\r\n      if (taskbtn && options.tasklists) {\r\n        bulletStyle = ' class=\"task-list-item\" style=\"list-style-type: none;\"';\r\n        item = item.replace(/^[ \\t]*\\[(x|X| )?]/m, function () {\r\n          var otp = '<input type=\"checkbox\" disabled style=\"margin: 0px 0.35em 0.25em -1.6em; vertical-align: middle;\"';\r\n          if (checked) {\r\n            otp += ' checked';\r\n          }\r\n          otp += '>';\r\n          return otp;\r\n        });\r\n      }\r\n\r\n      // ISSUE #312\r\n      // This input: - - - a\r\n      // causes trouble to the parser, since it interprets it as:\r\n      // <ul><li><li><li>a</li></li></li></ul>\r\n      // instead of:\r\n      // <ul><li>- - a</li></ul>\r\n      // So, to prevent it, we will put a marker (¨A)in the beginning of the line\r\n      // Kind of hackish/monkey patching, but seems more effective than overcomplicating the list parser\r\n      item = item.replace(/^([-*+]|\\d\\.)[ \\t]+[\\S\\n ]*/g, function (wm2) {\r\n        return '¨A' + wm2;\r\n      });\r\n\r\n      // m1 - Leading line or\r\n      // Has a double return (multi paragraph) or\r\n      // Has sublist\r\n      if (m1 || (item.search(/\\n{2,}/) > -1)) {\r\n        item = showdown.subParser('githubCodeBlocks')(item, options, globals);\r\n        item = showdown.subParser('blockGamut')(item, options, globals);\r\n      } else {\r\n        // Recursion for sub-lists:\r\n        item = showdown.subParser('lists')(item, options, globals);\r\n        item = item.replace(/\\n$/, ''); // chomp(item)\r\n        item = showdown.subParser('hashHTMLBlocks')(item, options, globals);\r\n\r\n        // Colapse double linebreaks\r\n        item = item.replace(/\\n\\n+/g, '\\n\\n');\r\n        if (isParagraphed) {\r\n          item = showdown.subParser('paragraphs')(item, options, globals);\r\n        } else {\r\n          item = showdown.subParser('spanGamut')(item, options, globals);\r\n        }\r\n      }\r\n\r\n      // now we need to remove the marker (¨A)\r\n      item = item.replace('¨A', '');\r\n      // we can finally wrap the line in list item tags\r\n      item =  '<li' + bulletStyle + '>' + item + '</li>\\n';\r\n\r\n      return item;\r\n    });\r\n\r\n    // attacklab: strip sentinel\r\n    listStr = listStr.replace(/¨0/g, '');\r\n\r\n    globals.gListLevel--;\r\n\r\n    if (trimTrailing) {\r\n      listStr = listStr.replace(/\\s+$/, '');\r\n    }\r\n\r\n    return listStr;\r\n  }\r\n\r\n  function styleStartNumber (list, listType) {\r\n    // check if ol and starts by a number different than 1\r\n    if (listType === 'ol') {\r\n      var res = list.match(/^ *(\\d+)\\./);\r\n      if (res && res[1] !== '1') {\r\n        return ' start=\"' + res[1] + '\"';\r\n      }\r\n    }\r\n    return '';\r\n  }\r\n\r\n  /**\r\n   * Check and parse consecutive lists (better fix for issue #142)\r\n   * @param {string} list\r\n   * @param {string} listType\r\n   * @param {boolean} trimTrailing\r\n   * @returns {string}\r\n   */\r\n  function parseConsecutiveLists (list, listType, trimTrailing) {\r\n    // check if we caught 2 or more consecutive lists by mistake\r\n    // we use the counterRgx, meaning if listType is UL we look for OL and vice versa\r\n    var olRgx = (options.disableForced4SpacesIndentedSublists) ? /^ ?\\d+\\.[ \\t]/gm : /^ {0,3}\\d+\\.[ \\t]/gm,\r\n        ulRgx = (options.disableForced4SpacesIndentedSublists) ? /^ ?[*+-][ \\t]/gm : /^ {0,3}[*+-][ \\t]/gm,\r\n        counterRxg = (listType === 'ul') ? olRgx : ulRgx,\r\n        result = '';\r\n\r\n    if (list.search(counterRxg) !== -1) {\r\n      (function parseCL (txt) {\r\n        var pos = txt.search(counterRxg),\r\n            style = styleStartNumber(list, listType);\r\n        if (pos !== -1) {\r\n          // slice\r\n          result += '\\n\\n<' + listType + style + '>\\n' + processListItems(txt.slice(0, pos), !!trimTrailing) + '</' + listType + '>\\n';\r\n\r\n          // invert counterType and listType\r\n          listType = (listType === 'ul') ? 'ol' : 'ul';\r\n          counterRxg = (listType === 'ul') ? olRgx : ulRgx;\r\n\r\n          //recurse\r\n          parseCL(txt.slice(pos));\r\n        } else {\r\n          result += '\\n\\n<' + listType + style + '>\\n' + processListItems(txt, !!trimTrailing) + '</' + listType + '>\\n';\r\n        }\r\n      })(list);\r\n    } else {\r\n      var style = styleStartNumber(list, listType);\r\n      result = '\\n\\n<' + listType + style + '>\\n' + processListItems(list, !!trimTrailing) + '</' + listType + '>\\n';\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /** Start of list parsing **/\r\n  text = globals.converter._dispatch('lists.before', text, options, globals);\r\n  // add sentinel to hack around khtml/safari bug:\r\n  // http://bugs.webkit.org/show_bug.cgi?id=11231\r\n  text += '¨0';\r\n\r\n  if (globals.gListLevel) {\r\n    text = text.replace(/^(( {0,3}([*+-]|\\d+[.])[ \\t]+)[^\\r]+?(¨0|\\n{2,}(?=\\S)(?![ \\t]*(?:[*+-]|\\d+[.])[ \\t]+)))/gm,\r\n      function (wholeMatch, list, m2) {\r\n        var listType = (m2.search(/[*+-]/g) > -1) ? 'ul' : 'ol';\r\n        return parseConsecutiveLists(list, listType, true);\r\n      }\r\n    );\r\n  } else {\r\n    text = text.replace(/(\\n\\n|^\\n?)(( {0,3}([*+-]|\\d+[.])[ \\t]+)[^\\r]+?(¨0|\\n{2,}(?=\\S)(?![ \\t]*(?:[*+-]|\\d+[.])[ \\t]+)))/gm,\r\n      function (wholeMatch, m1, list, m3) {\r\n        var listType = (m3.search(/[*+-]/g) > -1) ? 'ul' : 'ol';\r\n        return parseConsecutiveLists(list, listType, false);\r\n      }\r\n    );\r\n  }\r\n\r\n  // strip sentinel\r\n  text = text.replace(/¨0/, '');\r\n  text = globals.converter._dispatch('lists.after', text, options, globals);\r\n  return text;\r\n});\r\n\r\n/**\r\n * Parse metadata at the top of the document\r\n */\r\nshowdown.subParser('metadata', function (text, options, globals) {\r\n  'use strict';\r\n\r\n  if (!options.metadata) {\r\n    return text;\r\n  }\r\n\r\n  text = globals.converter._dispatch('metadata.before', text, options, globals);\r\n\r\n  function parseMetadataContents (content) {\r\n    // raw is raw so it's not changed in any way\r\n    globals.metadata.raw = content;\r\n\r\n    // escape chars forbidden in html attributes\r\n    // double quotes\r\n    content = content\r\n      // ampersand first\r\n      .replace(/&/g, '&amp;')\r\n      // double quotes\r\n      .replace(/\"/g, '&quot;');\r\n\r\n    content = content.replace(/\\n {4}/g, ' ');\r\n    content.replace(/^([\\S ]+): +([\\s\\S]+?)$/gm, function (wm, key, value) {\r\n      globals.metadata.parsed[key] = value;\r\n      return '';\r\n    });\r\n  }\r\n\r\n  text = text.replace(/^\\s*«««+(\\S*?)\\n([\\s\\S]+?)\\n»»»+\\n/, function (wholematch, format, content) {\r\n    parseMetadataContents(content);\r\n    return '¨M';\r\n  });\r\n\r\n  text = text.replace(/^\\s*---+(\\S*?)\\n([\\s\\S]+?)\\n---+\\n/, function (wholematch, format, content) {\r\n    if (format) {\r\n      globals.metadata.format = format;\r\n    }\r\n    parseMetadataContents(content);\r\n    return '¨M';\r\n  });\r\n\r\n  text = text.replace(/¨M/g, '');\r\n\r\n  text = globals.converter._dispatch('metadata.after', text, options, globals);\r\n  return text;\r\n});\r\n\r\n/**\r\n * Remove one level of line-leading tabs or spaces\r\n */\r\nshowdown.subParser('outdent', function (text, options, globals) {\r\n  'use strict';\r\n  text = globals.converter._dispatch('outdent.before', text, options, globals);\r\n\r\n  // attacklab: hack around Konqueror 3.5.4 bug:\r\n  // \"----------bug\".replace(/^-/g,\"\") == \"bug\"\r\n  text = text.replace(/^(\\t|[ ]{1,4})/gm, '¨0'); // attacklab: g_tab_width\r\n\r\n  // attacklab: clean up hack\r\n  text = text.replace(/¨0/g, '');\r\n\r\n  text = globals.converter._dispatch('outdent.after', text, options, globals);\r\n  return text;\r\n});\r\n\r\n/**\r\n *\r\n */\r\nshowdown.subParser('paragraphs', function (text, options, globals) {\r\n  'use strict';\r\n\r\n  text = globals.converter._dispatch('paragraphs.before', text, options, globals);\r\n  // Strip leading and trailing lines:\r\n  text = text.replace(/^\\n+/g, '');\r\n  text = text.replace(/\\n+$/g, '');\r\n\r\n  var grafs = text.split(/\\n{2,}/g),\r\n      grafsOut = [],\r\n      end = grafs.length; // Wrap <p> tags\r\n\r\n  for (var i = 0; i < end; i++) {\r\n    var str = grafs[i];\r\n    // if this is an HTML marker, copy it\r\n    if (str.search(/¨(K|G)(\\d+)\\1/g) >= 0) {\r\n      grafsOut.push(str);\r\n\r\n    // test for presence of characters to prevent empty lines being parsed\r\n    // as paragraphs (resulting in undesired extra empty paragraphs)\r\n    } else if (str.search(/\\S/) >= 0) {\r\n      str = showdown.subParser('spanGamut')(str, options, globals);\r\n      str = str.replace(/^([ \\t]*)/g, '<p>');\r\n      str += '</p>';\r\n      grafsOut.push(str);\r\n    }\r\n  }\r\n\r\n  /** Unhashify HTML blocks */\r\n  end = grafsOut.length;\r\n  for (i = 0; i < end; i++) {\r\n    var blockText = '',\r\n        grafsOutIt = grafsOut[i],\r\n        codeFlag = false;\r\n    // if this is a marker for an html block...\r\n    // use RegExp.test instead of string.search because of QML bug\r\n    while (/¨(K|G)(\\d+)\\1/.test(grafsOutIt)) {\r\n      var delim = RegExp.$1,\r\n          num   = RegExp.$2;\r\n\r\n      if (delim === 'K') {\r\n        blockText = globals.gHtmlBlocks[num];\r\n      } else {\r\n        // we need to check if ghBlock is a false positive\r\n        if (codeFlag) {\r\n          // use encoded version of all text\r\n          blockText = showdown.subParser('encodeCode')(globals.ghCodeBlocks[num].text, options, globals);\r\n        } else {\r\n          blockText = globals.ghCodeBlocks[num].codeblock;\r\n        }\r\n      }\r\n      blockText = blockText.replace(/\\$/g, '$$$$'); // Escape any dollar signs\r\n\r\n      grafsOutIt = grafsOutIt.replace(/(\\n\\n)?¨(K|G)\\d+\\2(\\n\\n)?/, blockText);\r\n      // Check if grafsOutIt is a pre->code\r\n      if (/^<pre\\b[^>]*>\\s*<code\\b[^>]*>/.test(grafsOutIt)) {\r\n        codeFlag = true;\r\n      }\r\n    }\r\n    grafsOut[i] = grafsOutIt;\r\n  }\r\n  text = grafsOut.join('\\n');\r\n  // Strip leading and trailing lines:\r\n  text = text.replace(/^\\n+/g, '');\r\n  text = text.replace(/\\n+$/g, '');\r\n  return globals.converter._dispatch('paragraphs.after', text, options, globals);\r\n});\r\n\r\n/**\r\n * Run extension\r\n */\r\nshowdown.subParser('runExtension', function (ext, text, options, globals) {\r\n  'use strict';\r\n\r\n  if (ext.filter) {\r\n    text = ext.filter(text, globals.converter, options);\r\n\r\n  } else if (ext.regex) {\r\n    // TODO remove this when old extension loading mechanism is deprecated\r\n    var re = ext.regex;\r\n    if (!(re instanceof RegExp)) {\r\n      re = new RegExp(re, 'g');\r\n    }\r\n    text = text.replace(re, ext.replace);\r\n  }\r\n\r\n  return text;\r\n});\r\n\r\n/**\r\n * These are all the transformations that occur *within* block-level\r\n * tags like paragraphs, headers, and list items.\r\n */\r\nshowdown.subParser('spanGamut', function (text, options, globals) {\r\n  'use strict';\r\n\r\n  text = globals.converter._dispatch('spanGamut.before', text, options, globals);\r\n  text = showdown.subParser('codeSpans')(text, options, globals);\r\n  text = showdown.subParser('escapeSpecialCharsWithinTagAttributes')(text, options, globals);\r\n  text = showdown.subParser('encodeBackslashEscapes')(text, options, globals);\r\n\r\n  // Process anchor and image tags. Images must come first,\r\n  // because ![foo][f] looks like an anchor.\r\n  text = showdown.subParser('images')(text, options, globals);\r\n  text = showdown.subParser('anchors')(text, options, globals);\r\n\r\n  // Make links out of things like `<http://example.com/>`\r\n  // Must come after anchors, because you can use < and >\r\n  // delimiters in inline links like [this](<url>).\r\n  text = showdown.subParser('autoLinks')(text, options, globals);\r\n  text = showdown.subParser('simplifiedAutoLinks')(text, options, globals);\r\n  text = showdown.subParser('emoji')(text, options, globals);\r\n  text = showdown.subParser('underline')(text, options, globals);\r\n  text = showdown.subParser('italicsAndBold')(text, options, globals);\r\n  text = showdown.subParser('strikethrough')(text, options, globals);\r\n  text = showdown.subParser('ellipsis')(text, options, globals);\r\n\r\n  // we need to hash HTML tags inside spans\r\n  text = showdown.subParser('hashHTMLSpans')(text, options, globals);\r\n\r\n  // now we encode amps and angles\r\n  text = showdown.subParser('encodeAmpsAndAngles')(text, options, globals);\r\n\r\n  // Do hard breaks\r\n  if (options.simpleLineBreaks) {\r\n    // GFM style hard breaks\r\n    // only add line breaks if the text does not contain a block (special case for lists)\r\n    if (!/\\n\\n¨K/.test(text)) {\r\n      text = text.replace(/\\n+/g, '<br />\\n');\r\n    }\r\n  } else {\r\n    // Vanilla hard breaks\r\n    text = text.replace(/  +\\n/g, '<br />\\n');\r\n  }\r\n\r\n  text = globals.converter._dispatch('spanGamut.after', text, options, globals);\r\n  return text;\r\n});\r\n\r\nshowdown.subParser('strikethrough', function (text, options, globals) {\r\n  'use strict';\r\n\r\n  function parseInside (txt) {\r\n    if (options.simplifiedAutoLink) {\r\n      txt = showdown.subParser('simplifiedAutoLinks')(txt, options, globals);\r\n    }\r\n    return '<del>' + txt + '</del>';\r\n  }\r\n\r\n  if (options.strikethrough) {\r\n    text = globals.converter._dispatch('strikethrough.before', text, options, globals);\r\n    text = text.replace(/(?:~){2}([\\s\\S]+?)(?:~){2}/g, function (wm, txt) { return parseInside(txt); });\r\n    text = globals.converter._dispatch('strikethrough.after', text, options, globals);\r\n  }\r\n\r\n  return text;\r\n});\r\n\r\n/**\r\n * Strips link definitions from text, stores the URLs and titles in\r\n * hash references.\r\n * Link defs are in the form: ^[id]: url \"optional title\"\r\n */\r\nshowdown.subParser('stripLinkDefinitions', function (text, options, globals) {\r\n  'use strict';\r\n\r\n  var regex       = /^ {0,3}\\[(.+)]:[ \\t]*\\n?[ \\t]*<?([^>\\s]+)>?(?: =([*\\d]+[A-Za-z%]{0,4})x([*\\d]+[A-Za-z%]{0,4}))?[ \\t]*\\n?[ \\t]*(?:(\\n*)[\"|'(](.+?)[\"|')][ \\t]*)?(?:\\n+|(?=¨0))/gm,\r\n      base64Regex = /^ {0,3}\\[(.+)]:[ \\t]*\\n?[ \\t]*<?(data:.+?\\/.+?;base64,[A-Za-z0-9+/=\\n]+?)>?(?: =([*\\d]+[A-Za-z%]{0,4})x([*\\d]+[A-Za-z%]{0,4}))?[ \\t]*\\n?[ \\t]*(?:(\\n*)[\"|'(](.+?)[\"|')][ \\t]*)?(?:\\n\\n|(?=¨0)|(?=\\n\\[))/gm;\r\n\r\n  // attacklab: sentinel workarounds for lack of \\A and \\Z, safari\\khtml bug\r\n  text += '¨0';\r\n\r\n  var replaceFunc = function (wholeMatch, linkId, url, width, height, blankLines, title) {\r\n    linkId = linkId.toLowerCase();\r\n    if (url.match(/^data:.+?\\/.+?;base64,/)) {\r\n      // remove newlines\r\n      globals.gUrls[linkId] = url.replace(/\\s/g, '');\r\n    } else {\r\n      globals.gUrls[linkId] = showdown.subParser('encodeAmpsAndAngles')(url, options, globals);  // Link IDs are case-insensitive\r\n    }\r\n\r\n    if (blankLines) {\r\n      // Oops, found blank lines, so it's not a title.\r\n      // Put back the parenthetical statement we stole.\r\n      return blankLines + title;\r\n\r\n    } else {\r\n      if (title) {\r\n        globals.gTitles[linkId] = title.replace(/\"|'/g, '&quot;');\r\n      }\r\n      if (options.parseImgDimensions && width && height) {\r\n        globals.gDimensions[linkId] = {\r\n          width:  width,\r\n          height: height\r\n        };\r\n      }\r\n    }\r\n    // Completely remove the definition from the text\r\n    return '';\r\n  };\r\n\r\n  // first we try to find base64 link references\r\n  text = text.replace(base64Regex, replaceFunc);\r\n\r\n  text = text.replace(regex, replaceFunc);\r\n\r\n  // attacklab: strip sentinel\r\n  text = text.replace(/¨0/, '');\r\n\r\n  return text;\r\n});\r\n\r\nshowdown.subParser('tables', function (text, options, globals) {\r\n  'use strict';\r\n\r\n  if (!options.tables) {\r\n    return text;\r\n  }\r\n\r\n  var tableRgx       = /^ {0,3}\\|?.+\\|.+\\n {0,3}\\|?[ \\t]*:?[ \\t]*(?:[-=]){2,}[ \\t]*:?[ \\t]*\\|[ \\t]*:?[ \\t]*(?:[-=]){2,}[\\s\\S]+?(?:\\n\\n|¨0)/gm,\r\n      //singeColTblRgx = /^ {0,3}\\|.+\\|\\n {0,3}\\|[ \\t]*:?[ \\t]*(?:[-=]){2,}[ \\t]*:?[ \\t]*\\|[ \\t]*\\n(?: {0,3}\\|.+\\|\\n)+(?:\\n\\n|¨0)/gm;\r\n      singeColTblRgx = /^ {0,3}\\|.+\\|[ \\t]*\\n {0,3}\\|[ \\t]*:?[ \\t]*(?:[-=]){2,}[ \\t]*:?[ \\t]*\\|[ \\t]*\\n( {0,3}\\|.+\\|[ \\t]*\\n)*(?:\\n|¨0)/gm;\r\n\r\n  function parseStyles (sLine) {\r\n    if (/^:[ \\t]*--*$/.test(sLine)) {\r\n      return ' style=\"text-align:left;\"';\r\n    } else if (/^--*[ \\t]*:[ \\t]*$/.test(sLine)) {\r\n      return ' style=\"text-align:right;\"';\r\n    } else if (/^:[ \\t]*--*[ \\t]*:$/.test(sLine)) {\r\n      return ' style=\"text-align:center;\"';\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  function parseHeaders (header, style) {\r\n    var id = '';\r\n    header = header.trim();\r\n    // support both tablesHeaderId and tableHeaderId due to error in documentation so we don't break backwards compatibility\r\n    if (options.tablesHeaderId || options.tableHeaderId) {\r\n      id = ' id=\"' + header.replace(/ /g, '_').toLowerCase() + '\"';\r\n    }\r\n    header = showdown.subParser('spanGamut')(header, options, globals);\r\n\r\n    return '<th' + id + style + '>' + header + '</th>\\n';\r\n  }\r\n\r\n  function parseCells (cell, style) {\r\n    var subText = showdown.subParser('spanGamut')(cell, options, globals);\r\n    return '<td' + style + '>' + subText + '</td>\\n';\r\n  }\r\n\r\n  function buildTable (headers, cells) {\r\n    var tb = '<table>\\n<thead>\\n<tr>\\n',\r\n        tblLgn = headers.length;\r\n\r\n    for (var i = 0; i < tblLgn; ++i) {\r\n      tb += headers[i];\r\n    }\r\n    tb += '</tr>\\n</thead>\\n<tbody>\\n';\r\n\r\n    for (i = 0; i < cells.length; ++i) {\r\n      tb += '<tr>\\n';\r\n      for (var ii = 0; ii < tblLgn; ++ii) {\r\n        tb += cells[i][ii];\r\n      }\r\n      tb += '</tr>\\n';\r\n    }\r\n    tb += '</tbody>\\n</table>\\n';\r\n    return tb;\r\n  }\r\n\r\n  function parseTable (rawTable) {\r\n    var i, tableLines = rawTable.split('\\n');\r\n\r\n    for (i = 0; i < tableLines.length; ++i) {\r\n      // strip wrong first and last column if wrapped tables are used\r\n      if (/^ {0,3}\\|/.test(tableLines[i])) {\r\n        tableLines[i] = tableLines[i].replace(/^ {0,3}\\|/, '');\r\n      }\r\n      if (/\\|[ \\t]*$/.test(tableLines[i])) {\r\n        tableLines[i] = tableLines[i].replace(/\\|[ \\t]*$/, '');\r\n      }\r\n      // parse code spans first, but we only support one line code spans\r\n      tableLines[i] = showdown.subParser('codeSpans')(tableLines[i], options, globals);\r\n    }\r\n\r\n    var rawHeaders = tableLines[0].split('|').map(function (s) { return s.trim();}),\r\n        rawStyles = tableLines[1].split('|').map(function (s) { return s.trim();}),\r\n        rawCells = [],\r\n        headers = [],\r\n        styles = [],\r\n        cells = [];\r\n\r\n    tableLines.shift();\r\n    tableLines.shift();\r\n\r\n    for (i = 0; i < tableLines.length; ++i) {\r\n      if (tableLines[i].trim() === '') {\r\n        continue;\r\n      }\r\n      rawCells.push(\r\n        tableLines[i]\r\n          .split('|')\r\n          .map(function (s) {\r\n            return s.trim();\r\n          })\r\n      );\r\n    }\r\n\r\n    if (rawHeaders.length < rawStyles.length) {\r\n      return rawTable;\r\n    }\r\n\r\n    for (i = 0; i < rawStyles.length; ++i) {\r\n      styles.push(parseStyles(rawStyles[i]));\r\n    }\r\n\r\n    for (i = 0; i < rawHeaders.length; ++i) {\r\n      if (showdown.helper.isUndefined(styles[i])) {\r\n        styles[i] = '';\r\n      }\r\n      headers.push(parseHeaders(rawHeaders[i], styles[i]));\r\n    }\r\n\r\n    for (i = 0; i < rawCells.length; ++i) {\r\n      var row = [];\r\n      for (var ii = 0; ii < headers.length; ++ii) {\r\n        if (showdown.helper.isUndefined(rawCells[i][ii])) {\r\n\r\n        }\r\n        row.push(parseCells(rawCells[i][ii], styles[ii]));\r\n      }\r\n      cells.push(row);\r\n    }\r\n\r\n    return buildTable(headers, cells);\r\n  }\r\n\r\n  text = globals.converter._dispatch('tables.before', text, options, globals);\r\n\r\n  // find escaped pipe characters\r\n  text = text.replace(/\\\\(\\|)/g, showdown.helper.escapeCharactersCallback);\r\n\r\n  // parse multi column tables\r\n  text = text.replace(tableRgx, parseTable);\r\n\r\n  // parse one column tables\r\n  text = text.replace(singeColTblRgx, parseTable);\r\n\r\n  text = globals.converter._dispatch('tables.after', text, options, globals);\r\n\r\n  return text;\r\n});\r\n\r\nshowdown.subParser('underline', function (text, options, globals) {\r\n  'use strict';\r\n\r\n  if (!options.underline) {\r\n    return text;\r\n  }\r\n\r\n  text = globals.converter._dispatch('underline.before', text, options, globals);\r\n\r\n  if (options.literalMidWordUnderscores) {\r\n    text = text.replace(/\\b___(\\S[\\s\\S]*?)___\\b/g, function (wm, txt) {\r\n      return '<u>' + txt + '</u>';\r\n    });\r\n    text = text.replace(/\\b__(\\S[\\s\\S]*?)__\\b/g, function (wm, txt) {\r\n      return '<u>' + txt + '</u>';\r\n    });\r\n  } else {\r\n    text = text.replace(/___(\\S[\\s\\S]*?)___/g, function (wm, m) {\r\n      return (/\\S$/.test(m)) ? '<u>' + m + '</u>' : wm;\r\n    });\r\n    text = text.replace(/__(\\S[\\s\\S]*?)__/g, function (wm, m) {\r\n      return (/\\S$/.test(m)) ? '<u>' + m + '</u>' : wm;\r\n    });\r\n  }\r\n\r\n  // escape remaining underscores to prevent them being parsed by italic and bold\r\n  text = text.replace(/(_)/g, showdown.helper.escapeCharactersCallback);\r\n\r\n  text = globals.converter._dispatch('underline.after', text, options, globals);\r\n\r\n  return text;\r\n});\r\n\r\n/**\r\n * Swap back in all the special characters we've hidden.\r\n */\r\nshowdown.subParser('unescapeSpecialChars', function (text, options, globals) {\r\n  'use strict';\r\n  text = globals.converter._dispatch('unescapeSpecialChars.before', text, options, globals);\r\n\r\n  text = text.replace(/¨E(\\d+)E/g, function (wholeMatch, m1) {\r\n    var charCodeToReplace = parseInt(m1);\r\n    return String.fromCharCode(charCodeToReplace);\r\n  });\r\n\r\n  text = globals.converter._dispatch('unescapeSpecialChars.after', text, options, globals);\r\n  return text;\r\n});\r\n\r\nshowdown.subParser('makeMarkdown.blockquote', function (node, globals) {\r\n  'use strict';\r\n\r\n  var txt = '';\r\n  if (node.hasChildNodes()) {\r\n    var children = node.childNodes,\r\n        childrenLength = children.length;\r\n\r\n    for (var i = 0; i < childrenLength; ++i) {\r\n      var innerTxt = showdown.subParser('makeMarkdown.node')(children[i], globals);\r\n\r\n      if (innerTxt === '') {\r\n        continue;\r\n      }\r\n      txt += innerTxt;\r\n    }\r\n  }\r\n  // cleanup\r\n  txt = txt.trim();\r\n  txt = '> ' + txt.split('\\n').join('\\n> ');\r\n  return txt;\r\n});\r\n\r\nshowdown.subParser('makeMarkdown.codeBlock', function (node, globals) {\r\n  'use strict';\r\n\r\n  var lang = node.getAttribute('language'),\r\n      num  = node.getAttribute('precodenum');\r\n  return '```' + lang + '\\n' + globals.preList[num] + '\\n```';\r\n});\r\n\r\nshowdown.subParser('makeMarkdown.codeSpan', function (node) {\r\n  'use strict';\r\n\r\n  return '`' + node.innerHTML + '`';\r\n});\r\n\r\nshowdown.subParser('makeMarkdown.emphasis', function (node, globals) {\r\n  'use strict';\r\n\r\n  var txt = '';\r\n  if (node.hasChildNodes()) {\r\n    txt += '*';\r\n    var children = node.childNodes,\r\n        childrenLength = children.length;\r\n    for (var i = 0; i < childrenLength; ++i) {\r\n      txt += showdown.subParser('makeMarkdown.node')(children[i], globals);\r\n    }\r\n    txt += '*';\r\n  }\r\n  return txt;\r\n});\r\n\r\nshowdown.subParser('makeMarkdown.header', function (node, globals, headerLevel) {\r\n  'use strict';\r\n\r\n  var headerMark = new Array(headerLevel + 1).join('#'),\r\n      txt = '';\r\n\r\n  if (node.hasChildNodes()) {\r\n    txt = headerMark + ' ';\r\n    var children = node.childNodes,\r\n        childrenLength = children.length;\r\n\r\n    for (var i = 0; i < childrenLength; ++i) {\r\n      txt += showdown.subParser('makeMarkdown.node')(children[i], globals);\r\n    }\r\n  }\r\n  return txt;\r\n});\r\n\r\nshowdown.subParser('makeMarkdown.hr', function () {\r\n  'use strict';\r\n\r\n  return '---';\r\n});\r\n\r\nshowdown.subParser('makeMarkdown.image', function (node) {\r\n  'use strict';\r\n\r\n  var txt = '';\r\n  if (node.hasAttribute('src')) {\r\n    txt += '![' + node.getAttribute('alt') + '](';\r\n    txt += '<' + node.getAttribute('src') + '>';\r\n    if (node.hasAttribute('width') && node.hasAttribute('height')) {\r\n      txt += ' =' + node.getAttribute('width') + 'x' + node.getAttribute('height');\r\n    }\r\n\r\n    if (node.hasAttribute('title')) {\r\n      txt += ' \"' + node.getAttribute('title') + '\"';\r\n    }\r\n    txt += ')';\r\n  }\r\n  return txt;\r\n});\r\n\r\nshowdown.subParser('makeMarkdown.links', function (node, globals) {\r\n  'use strict';\r\n\r\n  var txt = '';\r\n  if (node.hasChildNodes() && node.hasAttribute('href')) {\r\n    var children = node.childNodes,\r\n        childrenLength = children.length;\r\n    txt = '[';\r\n    for (var i = 0; i < childrenLength; ++i) {\r\n      txt += showdown.subParser('makeMarkdown.node')(children[i], globals);\r\n    }\r\n    txt += '](';\r\n    txt += '<' + node.getAttribute('href') + '>';\r\n    if (node.hasAttribute('title')) {\r\n      txt += ' \"' + node.getAttribute('title') + '\"';\r\n    }\r\n    txt += ')';\r\n  }\r\n  return txt;\r\n});\r\n\r\nshowdown.subParser('makeMarkdown.list', function (node, globals, type) {\r\n  'use strict';\r\n\r\n  var txt = '';\r\n  if (!node.hasChildNodes()) {\r\n    return '';\r\n  }\r\n  var listItems       = node.childNodes,\r\n      listItemsLenght = listItems.length,\r\n      listNum = node.getAttribute('start') || 1;\r\n\r\n  for (var i = 0; i < listItemsLenght; ++i) {\r\n    if (typeof listItems[i].tagName === 'undefined' || listItems[i].tagName.toLowerCase() !== 'li') {\r\n      continue;\r\n    }\r\n\r\n    // define the bullet to use in list\r\n    var bullet = '';\r\n    if (type === 'ol') {\r\n      bullet = listNum.toString() + '. ';\r\n    } else {\r\n      bullet = '- ';\r\n    }\r\n\r\n    // parse list item\r\n    txt += bullet + showdown.subParser('makeMarkdown.listItem')(listItems[i], globals);\r\n    ++listNum;\r\n  }\r\n\r\n  // add comment at the end to prevent consecutive lists to be parsed as one\r\n  txt += '\\n\x3c!-- --\x3e\\n';\r\n  return txt.trim();\r\n});\r\n\r\nshowdown.subParser('makeMarkdown.listItem', function (node, globals) {\r\n  'use strict';\r\n\r\n  var listItemTxt = '';\r\n\r\n  var children = node.childNodes,\r\n      childrenLenght = children.length;\r\n\r\n  for (var i = 0; i < childrenLenght; ++i) {\r\n    listItemTxt += showdown.subParser('makeMarkdown.node')(children[i], globals);\r\n  }\r\n  // if it's only one liner, we need to add a newline at the end\r\n  if (!/\\n$/.test(listItemTxt)) {\r\n    listItemTxt += '\\n';\r\n  } else {\r\n    // it's multiparagraph, so we need to indent\r\n    listItemTxt = listItemTxt\r\n      .split('\\n')\r\n      .join('\\n    ')\r\n      .replace(/^ {4}$/gm, '')\r\n      .replace(/\\n\\n+/g, '\\n\\n');\r\n  }\r\n\r\n  return listItemTxt;\r\n});\r\n\r\n\r\n\r\nshowdown.subParser('makeMarkdown.node', function (node, globals, spansOnly) {\r\n  'use strict';\r\n\r\n  spansOnly = spansOnly || false;\r\n\r\n  var txt = '';\r\n\r\n  // edge case of text without wrapper paragraph\r\n  if (node.nodeType === 3) {\r\n    return showdown.subParser('makeMarkdown.txt')(node, globals);\r\n  }\r\n\r\n  // HTML comment\r\n  if (node.nodeType === 8) {\r\n    return '\x3c!--' + node.data + '--\x3e\\n\\n';\r\n  }\r\n\r\n  // process only node elements\r\n  if (node.nodeType !== 1) {\r\n    return '';\r\n  }\r\n\r\n  var tagName = node.tagName.toLowerCase();\r\n\r\n  switch (tagName) {\r\n\r\n    //\r\n    // BLOCKS\r\n    //\r\n    case 'h1':\r\n      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.header')(node, globals, 1) + '\\n\\n'; }\r\n      break;\r\n    case 'h2':\r\n      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.header')(node, globals, 2) + '\\n\\n'; }\r\n      break;\r\n    case 'h3':\r\n      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.header')(node, globals, 3) + '\\n\\n'; }\r\n      break;\r\n    case 'h4':\r\n      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.header')(node, globals, 4) + '\\n\\n'; }\r\n      break;\r\n    case 'h5':\r\n      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.header')(node, globals, 5) + '\\n\\n'; }\r\n      break;\r\n    case 'h6':\r\n      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.header')(node, globals, 6) + '\\n\\n'; }\r\n      break;\r\n\r\n    case 'p':\r\n      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.paragraph')(node, globals) + '\\n\\n'; }\r\n      break;\r\n\r\n    case 'blockquote':\r\n      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.blockquote')(node, globals) + '\\n\\n'; }\r\n      break;\r\n\r\n    case 'hr':\r\n      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.hr')(node, globals) + '\\n\\n'; }\r\n      break;\r\n\r\n    case 'ol':\r\n      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.list')(node, globals, 'ol') + '\\n\\n'; }\r\n      break;\r\n\r\n    case 'ul':\r\n      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.list')(node, globals, 'ul') + '\\n\\n'; }\r\n      break;\r\n\r\n    case 'precode':\r\n      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.codeBlock')(node, globals) + '\\n\\n'; }\r\n      break;\r\n\r\n    case 'pre':\r\n      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.pre')(node, globals) + '\\n\\n'; }\r\n      break;\r\n\r\n    case 'table':\r\n      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.table')(node, globals) + '\\n\\n'; }\r\n      break;\r\n\r\n    //\r\n    // SPANS\r\n    //\r\n    case 'code':\r\n      txt = showdown.subParser('makeMarkdown.codeSpan')(node, globals);\r\n      break;\r\n\r\n    case 'em':\r\n    case 'i':\r\n      txt = showdown.subParser('makeMarkdown.emphasis')(node, globals);\r\n      break;\r\n\r\n    case 'strong':\r\n    case 'b':\r\n      txt = showdown.subParser('makeMarkdown.strong')(node, globals);\r\n      break;\r\n\r\n    case 'del':\r\n      txt = showdown.subParser('makeMarkdown.strikethrough')(node, globals);\r\n      break;\r\n\r\n    case 'a':\r\n      txt = showdown.subParser('makeMarkdown.links')(node, globals);\r\n      break;\r\n\r\n    case 'img':\r\n      txt = showdown.subParser('makeMarkdown.image')(node, globals);\r\n      break;\r\n\r\n    default:\r\n      txt = node.outerHTML + '\\n\\n';\r\n  }\r\n\r\n  // common normalization\r\n  // TODO eventually\r\n\r\n  return txt;\r\n});\r\n\r\nshowdown.subParser('makeMarkdown.paragraph', function (node, globals) {\r\n  'use strict';\r\n\r\n  var txt = '';\r\n  if (node.hasChildNodes()) {\r\n    var children = node.childNodes,\r\n        childrenLength = children.length;\r\n    for (var i = 0; i < childrenLength; ++i) {\r\n      txt += showdown.subParser('makeMarkdown.node')(children[i], globals);\r\n    }\r\n  }\r\n\r\n  // some text normalization\r\n  txt = txt.trim();\r\n\r\n  return txt;\r\n});\r\n\r\nshowdown.subParser('makeMarkdown.pre', function (node, globals) {\r\n  'use strict';\r\n\r\n  var num  = node.getAttribute('prenum');\r\n  return '<pre>' + globals.preList[num] + '</pre>';\r\n});\r\n\r\nshowdown.subParser('makeMarkdown.strikethrough', function (node, globals) {\r\n  'use strict';\r\n\r\n  var txt = '';\r\n  if (node.hasChildNodes()) {\r\n    txt += '~~';\r\n    var children = node.childNodes,\r\n        childrenLength = children.length;\r\n    for (var i = 0; i < childrenLength; ++i) {\r\n      txt += showdown.subParser('makeMarkdown.node')(children[i], globals);\r\n    }\r\n    txt += '~~';\r\n  }\r\n  return txt;\r\n});\r\n\r\nshowdown.subParser('makeMarkdown.strong', function (node, globals) {\r\n  'use strict';\r\n\r\n  var txt = '';\r\n  if (node.hasChildNodes()) {\r\n    txt += '**';\r\n    var children = node.childNodes,\r\n        childrenLength = children.length;\r\n    for (var i = 0; i < childrenLength; ++i) {\r\n      txt += showdown.subParser('makeMarkdown.node')(children[i], globals);\r\n    }\r\n    txt += '**';\r\n  }\r\n  return txt;\r\n});\r\n\r\nshowdown.subParser('makeMarkdown.table', function (node, globals) {\r\n  'use strict';\r\n\r\n  var txt = '',\r\n      tableArray = [[], []],\r\n      headings   = node.querySelectorAll('thead>tr>th'),\r\n      rows       = node.querySelectorAll('tbody>tr'),\r\n      i, ii;\r\n  for (i = 0; i < headings.length; ++i) {\r\n    var headContent = showdown.subParser('makeMarkdown.tableCell')(headings[i], globals),\r\n        allign = '---';\r\n\r\n    if (headings[i].hasAttribute('style')) {\r\n      var style = headings[i].getAttribute('style').toLowerCase().replace(/\\s/g, '');\r\n      switch (style) {\r\n        case 'text-align:left;':\r\n          allign = ':---';\r\n          break;\r\n        case 'text-align:right;':\r\n          allign = '---:';\r\n          break;\r\n        case 'text-align:center;':\r\n          allign = ':---:';\r\n          break;\r\n      }\r\n    }\r\n    tableArray[0][i] = headContent.trim();\r\n    tableArray[1][i] = allign;\r\n  }\r\n\r\n  for (i = 0; i < rows.length; ++i) {\r\n    var r = tableArray.push([]) - 1,\r\n        cols = rows[i].getElementsByTagName('td');\r\n\r\n    for (ii = 0; ii < headings.length; ++ii) {\r\n      var cellContent = ' ';\r\n      if (typeof cols[ii] !== 'undefined') {\r\n        cellContent = showdown.subParser('makeMarkdown.tableCell')(cols[ii], globals);\r\n      }\r\n      tableArray[r].push(cellContent);\r\n    }\r\n  }\r\n\r\n  var cellSpacesCount = 3;\r\n  for (i = 0; i < tableArray.length; ++i) {\r\n    for (ii = 0; ii < tableArray[i].length; ++ii) {\r\n      var strLen = tableArray[i][ii].length;\r\n      if (strLen > cellSpacesCount) {\r\n        cellSpacesCount = strLen;\r\n      }\r\n    }\r\n  }\r\n\r\n  for (i = 0; i < tableArray.length; ++i) {\r\n    for (ii = 0; ii < tableArray[i].length; ++ii) {\r\n      if (i === 1) {\r\n        if (tableArray[i][ii].slice(-1) === ':') {\r\n          tableArray[i][ii] = showdown.helper.padEnd(tableArray[i][ii].slice(-1), cellSpacesCount - 1, '-') + ':';\r\n        } else {\r\n          tableArray[i][ii] = showdown.helper.padEnd(tableArray[i][ii], cellSpacesCount, '-');\r\n        }\r\n      } else {\r\n        tableArray[i][ii] = showdown.helper.padEnd(tableArray[i][ii], cellSpacesCount);\r\n      }\r\n    }\r\n    txt += '| ' + tableArray[i].join(' | ') + ' |\\n';\r\n  }\r\n\r\n  return txt.trim();\r\n});\r\n\r\nshowdown.subParser('makeMarkdown.tableCell', function (node, globals) {\r\n  'use strict';\r\n\r\n  var txt = '';\r\n  if (!node.hasChildNodes()) {\r\n    return '';\r\n  }\r\n  var children = node.childNodes,\r\n      childrenLength = children.length;\r\n\r\n  for (var i = 0; i < childrenLength; ++i) {\r\n    txt += showdown.subParser('makeMarkdown.node')(children[i], globals, true);\r\n  }\r\n  return txt.trim();\r\n});\r\n\r\nshowdown.subParser('makeMarkdown.txt', function (node) {\r\n  'use strict';\r\n\r\n  var txt = node.nodeValue;\r\n\r\n  // multiple spaces are collapsed\r\n  txt = txt.replace(/ +/g, ' ');\r\n\r\n  // replace the custom ¨NBSP; with a space\r\n  txt = txt.replace(/¨NBSP;/g, ' ');\r\n\r\n  // \", <, > and & should replace escaped html entities\r\n  txt = showdown.helper.unescapeHTMLEntities(txt);\r\n\r\n  // escape markdown magic characters\r\n  // emphasis, strong and strikethrough - can appear everywhere\r\n  // we also escape pipe (|) because of tables\r\n  // and escape ` because of code blocks and spans\r\n  txt = txt.replace(/([*_~|`])/g, '\\\\$1');\r\n\r\n  // escape > because of blockquotes\r\n  txt = txt.replace(/^(\\s*)>/g, '\\\\$1>');\r\n\r\n  // hash character, only troublesome at the beginning of a line because of headers\r\n  txt = txt.replace(/^#/gm, '\\\\#');\r\n\r\n  // horizontal rules\r\n  txt = txt.replace(/^(\\s*)([-=]{3,})(\\s*)$/, '$1\\\\$2$3');\r\n\r\n  // dot, because of ordered lists, only troublesome at the beginning of a line when preceded by an integer\r\n  txt = txt.replace(/^( {0,3}\\d+)\\./gm, '$1\\\\.');\r\n\r\n  // +, * and -, at the beginning of a line becomes a list, so we need to escape them also (asterisk was already escaped)\r\n  txt = txt.replace(/^( {0,3})([+-])/gm, '$1\\\\$2');\r\n\r\n  // images and links, ] followed by ( is problematic, so we escape it\r\n  txt = txt.replace(/]([\\s]*)\\(/g, '\\\\]$1\\\\(');\r\n\r\n  // reference URIs must also be escaped\r\n  txt = txt.replace(/^ {0,3}\\[([\\S \\t]*?)]:/gm, '\\\\[$1]:');\r\n\r\n  return txt;\r\n});\r\n\r\nvar root = this;\r\n\r\n// AMD Loader\r\nif (true) {\r\n  !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\r\n    'use strict';\r\n    return showdown;\r\n  }).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\r\n// CommonJS/nodeJS Loader\r\n} else {}\r\n}).call(this);\r\n\r\n//# sourceMappingURL=showdown.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///589\n")}},__webpack_module_cache__={};function __webpack_require__(c){if(__webpack_module_cache__[c])return __webpack_module_cache__[c].exports;var n=__webpack_module_cache__[c]={exports:{}};return __webpack_modules__[c].call(n.exports,n,n.exports,__webpack_require__),n.exports}(()=>{"use strict";eval('\n// CONCATENATED MODULE: ./src/system/app-helpers.ts\n/*  Singleton SPA Router\r\n*/\r\n// an idea for a nicer showing and hiding scheme\r\nclass SceneElement {\r\n    constructor() {\r\n    }\r\n    show() {\r\n    }\r\n    hide() {\r\n    }\r\n}\r\nvar RouteType;\r\n(function (RouteType) {\r\n    RouteType[RouteType["notFound"] = 404] = "notFound";\r\n    RouteType[RouteType["default"] = 0] = "default";\r\n    RouteType[RouteType["nav"] = 1] = "nav";\r\n    RouteType[RouteType["portfolio"] = 2] = "portfolio"; // poftfolio item\r\n})(RouteType || (RouteType = {}));\r\n\n// CONCATENATED MODULE: ./src/utils/constant-data.ts\n// author : Jos Feenstra\r\n// purpose : constant data\r\nclass CD {\r\n}\r\nCD.navlink = "nav-link";\r\nCD.navlinkHighlight = "nav-highlight";\r\n;\r\n\n// CONCATENATED MODULE: ./src/system/dom.ts\n// author : Jos Feenstra \r\nclass DomHead {\r\n    constructor() {\r\n    }\r\n    AddCss(fileName) {\r\n        // add a style sheet to the document\r\n        var head = document.head;\r\n        var link = document.createElement("link");\r\n        link.type = "text/css";\r\n        link.rel = "stylesheet";\r\n        link.href = fileName;\r\n        link.className = fileName;\r\n        head.appendChild(link);\r\n    }\r\n    RemoveCss(fileName) {\r\n        // TODO\r\n        var links = document.querySelectorAll("link");\r\n        links.forEach(link => {\r\n            if (link.className == fileName)\r\n                link.remove();\r\n        });\r\n    }\r\n}\r\n// TODO add some more jquery functionalities\r\nclass DomWriter {\r\n    constructor(pointer = document) {\r\n        this.pointer = pointer;\r\n    }\r\n    static new() {\r\n        return new DomWriter();\r\n    }\r\n    to(obj) {\r\n        this.pointer = obj;\r\n        return this;\r\n    }\r\n    addAndTo(type, classes = "", content = "") {\r\n        return this.to(this.add(type, classes, content));\r\n    }\r\n    toId(id) {\r\n        this.pointer = document.getElementById(id);\r\n        return this;\r\n    }\r\n    toSelect(selector) {\r\n        this.pointer = document.querySelector(selector);\r\n        return this;\r\n    }\r\n    add(type, classes = "", content = "") {\r\n        let el = document.createElement(type);\r\n        el.innerText = content;\r\n        el.className = classes;\r\n        this.pointer.appendChild(el);\r\n        return el;\r\n    }\r\n    clear() {\r\n        while (this.pointer.firstChild) {\r\n            // let child = element.firstChild as HTMLElement;\r\n            // child.style.animation = \'hide 300ms\';\r\n            this.pointer.removeChild(this.pointer.firstChild);\r\n        }\r\n        return this;\r\n    }\r\n    set(attribute, value) {\r\n        if (this.pointer instanceof Document) {\r\n            throw new Error("not possible with document selected!");\r\n        }\r\n        this.pointer.setAttribute(attribute, value);\r\n        return this;\r\n    }\r\n    get inner() {\r\n        if (this.pointer instanceof Document) {\r\n            throw new Error("not possible with document selected!");\r\n        }\r\n        return this.pointer.innerHTML;\r\n    }\r\n    set inner(str) {\r\n        if (this.pointer instanceof Document) {\r\n            throw new Error("not possible with document selected!");\r\n        }\r\n        this.pointer.innerHTML = str;\r\n    }\r\n    get classes() {\r\n        if (this.pointer instanceof Document) {\r\n            throw new Error("not possible with document selected!");\r\n        }\r\n        return this.pointer.classList;\r\n    }\r\n}\r\nconst dom = DomWriter.new();\r\nclass DomNew {\r\n    constructor(head = new DomHead(), body = new DomWriter()) {\r\n        this.head = head;\r\n        this.body = body;\r\n    }\r\n}\r\nclass Dom {\r\n    static AddClass(element, className) {\r\n        if (!element.classList.contains(className))\r\n            element.classList.add(className);\r\n    }\r\n    static RemoveClass(element, className) {\r\n        if (element.classList.contains(className))\r\n            element.classList.remove(className);\r\n    }\r\n    static AddCss(fileName) {\r\n        // add a style sheet to the document\r\n        var head = document.head;\r\n        var link = document.createElement("link");\r\n        link.type = "text/css";\r\n        link.rel = "stylesheet";\r\n        link.href = fileName;\r\n        link.className = fileName;\r\n        head.appendChild(link);\r\n    }\r\n    static RemoveCss(fileName) {\r\n        // TODO\r\n        var links = document.querySelectorAll("link");\r\n        links.forEach(link => {\r\n            console.log(link.href);\r\n            if (link.className == fileName)\r\n                link.remove();\r\n        });\r\n    }\r\n    static add(context, type, classes = "", content = "") {\r\n        let el = document.createElement(type);\r\n        el.innerText = content;\r\n        el.className = classes;\r\n        context.appendChild(el);\r\n        return el;\r\n    }\r\n    static AddLink(context, link, name, className = "") {\r\n        let el = document.createElement("a");\r\n        el.href = link;\r\n        el.className = className;\r\n        el.innerHTML = name;\r\n        context.appendChild(el);\r\n        return el;\r\n    }\r\n    static AddDiv(context, className = "") {\r\n        let el = document.createElement("div");\r\n        el.className = className;\r\n        context.appendChild(el);\r\n        return el;\r\n    }\r\n    static AddH1(context, message, className = "") {\r\n        let h1 = document.createElement("h1");\r\n        h1.innerText = message;\r\n        h1.className = className;\r\n        context.appendChild(h1);\r\n        return h1;\r\n    }\r\n    static addH2(context, message, className = "") {\r\n        let h2 = document.createElement("h2");\r\n        h2.innerText = message;\r\n        h2.className = className;\r\n        context.appendChild(h2);\r\n        return h2;\r\n    }\r\n    static addText(container, message, className = "") {\r\n        const p = document.createElement("p");\r\n        p.className = className;\r\n        const text = document.createTextNode(message);\r\n        p.appendChild(text);\r\n        container.appendChild(p);\r\n    }\r\n    static clear(selector) {\r\n        // clear a wrapper\r\n        const elements = document.querySelectorAll(selector);\r\n        elements.forEach(element => {\r\n            while (element.firstChild) {\r\n                // let child = element.firstChild as HTMLElement;\r\n                // child.style.animation = \'hide 300ms\';\r\n                element.removeChild(element.firstChild);\r\n            }\r\n        });\r\n    }\r\n    static TrySetElementAttributeById(id, attribute, value) {\r\n        // hide canvas\r\n        let element = document.getElementById(id);\r\n        if (element) {\r\n            element.setAttribute(attribute, value);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/system/app.ts\n// Author : Jos Feenstra\r\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n// import Canvas from "../canvas/canvas";\r\n// TODO split away the router itself\r\nclass SpaRouter {\r\n    constructor(routes, currentHash) {\r\n        this.routes = routes;\r\n        this.routes = routes;\r\n        this.route = this.routes[0];\r\n        this.routeDefault = this.routes[0];\r\n        this.setup();\r\n        this.tryGo(currentHash);\r\n    }\r\n    // single page application setup\r\n    setup() {\r\n        console.log("setting up router...");\r\n        // setup browser functionalities for single page app\r\n        onpopstate = function (event) {\r\n            // console.log("triggereded!");\r\n            App.tryGo(location.hash);\r\n        };\r\n        // reroute internal href links to fake hash links\r\n        document.body.addEventListener("click", e => {\r\n            // console.log("trigger!");\r\n            const target = e.target;\r\n            if (target.matches("[data-link]")) {\r\n                //e.preventDefault();\r\n                //Router.Go(new URL(target.href));\r\n            }\r\n        });\r\n    }\r\n    tryGo(hash) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            // console.log("setting route to hash:", hash)\r\n            const potentialMatches = App.routes.map(route => {\r\n                return {\r\n                    route: route,\r\n                    isMatch: hash === route.hash\r\n                };\r\n            });\r\n            let match = potentialMatches.find(potentialMatch => potentialMatch.isMatch);\r\n            if (!match) {\r\n                console.log(`hash "${hash}" was invalid! going to main menu...`);\r\n                //App.route = App.routeDefault;\r\n            }\r\n            else {\r\n                console.log("found a match!: " + match.route.name);\r\n                App.route = match.route;\r\n            }\r\n            history.pushState(hash, document.title, hash);\r\n            App.render();\r\n        });\r\n    }\r\n    redirect(path) {\r\n        window.location.replace(path);\r\n    }\r\n    getRoutes(type) {\r\n        return App.routes.filter(route => route.type == type);\r\n    }\r\n}\r\n// single page app singleton\r\nclass App {\r\n    static Init(routes, currentHash) {\r\n        App.isArticleRendered = false;\r\n        App.isNavRendered = false;\r\n        App.isFooterRendered = false;\r\n        App.routes = routes;\r\n        App.setup(currentHash);\r\n    }\r\n    //#region Routing\r\n    /**\r\n     * Set up the router\r\n     * @param currentHash\r\n     */\r\n    static setup(currentHash) {\r\n        console.log("setting up router...");\r\n        // console.log(currentHash);\r\n        App.route = App.routes[0];\r\n        // \r\n        App.routeDefault = App.routes[0];\r\n        // setup browser functionalities for single page app\r\n        onpopstate = function (event) {\r\n            // console.log("ROUTING!");\r\n            App.tryGo(location.hash);\r\n        };\r\n        // reroute internal href links to fake hash links\r\n        document.body.addEventListener("click", e => {\r\n            // collapse the navbar when the user clicks anywhere at all\r\n            if (e.target) {\r\n                let item = e.target;\r\n                let toggler = document.querySelector(".navbar-toggler");\r\n                if (toggler && toggler.getAttribute("aria-expanded") === "true") {\r\n                    console.log("and the thing is expanded");\r\n                    // @ts-ignore\r\n                    toggler.click();\r\n                }\r\n            }\r\n            const target = e.target;\r\n            if (target.matches("[data-link]")) {\r\n                // I once thought this was needed on some devices, but it seems to work without it\r\n                // e.preventDefault();\r\n                // Router.Go(new URL(target.href));\r\n                // App.tryGo(currentHash);\r\n            }\r\n        });\r\n        // setup the environment for popState.\r\n        App.tryGo(currentHash);\r\n    }\r\n    static tryGo(hash) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            // console.log("setting route to hash:", hash)\r\n            const potentialMatches = App.routes.map(route => {\r\n                return {\r\n                    route: route,\r\n                    isMatch: hash === route.hash\r\n                };\r\n            });\r\n            let match = potentialMatches.find(potentialMatch => potentialMatch.isMatch);\r\n            if (!match) {\r\n                console.log(`hash "${hash}" was invalid! going to main menu...`);\r\n                //App.route = App.routeDefault;\r\n            }\r\n            else {\r\n                console.log("found a match!: " + match.route.name);\r\n                App.route = match.route;\r\n            }\r\n            // history.pushState(hash, document.title, hash);    \r\n            App.render();\r\n        });\r\n    }\r\n    static render() {\r\n        if (App.view != null)\r\n            App.view.onUnload();\r\n        App.view = new this.route.view(App.route);\r\n        App.view.onLoad();\r\n        // Canvas.onResizeCanvas();\r\n    }\r\n    static redirect(path) {\r\n        window.location.replace(path);\r\n    }\r\n    static getRoutes(type) {\r\n        return App.routes.filter(route => route.type == type);\r\n    }\r\n    //#endregion\r\n    //#region Rendering Html\r\n    static RenderMainLinks(context) {\r\n        dom.to(context);\r\n        dom.addAndTo("div", "d-grid gap-2 col-6 mx-auto mt-5");\r\n        App.getRoutes(RouteType.nav).forEach(route => {\r\n            dom.inner += `\r\n                <a href="${route.hash}" class="btn btn-outline-light">${route.name}</a>\r\n            `;\r\n        });\r\n    }\r\n    static RenderNav() {\r\n        if (!App.isNavRendered) {\r\n            App.isNavRendered = true;\r\n            let items = [];\r\n            App.getRoutes(RouteType.nav).forEach(route => {\r\n                items.push(`\r\n                <li class="nav-item">\r\n                    <a class="nav-link" \r\n                        href="${route.hash}">${route.name}</a>\r\n                </li>\r\n                `);\r\n            });\r\n            let dom = DomWriter.new();\r\n            dom.toId("auto-nav");\r\n            dom.classes.add("navbar", "navbar-dark", "navbar-expand-md");\r\n            dom.inner = `\r\n            <div class="container-xxl">\r\n                <a class="navbar-brand text-light" href="#home">\r\n                    <span class="text-light fw-bold">\r\n                    Jos Feenstra\r\n                    </span>\r\n                </a>\r\n                <button class="navbar-toggler btn btn-outline-secondary" type="button" data-bs-toggle="collapse" data-bs-target="#main-nav" aria-controls="main-nav" aria-expanded="false" aria-label="Toggle navigation">\r\n                    <span class="navbar-toggler-icon"></span>\r\n                </button>\r\n                <div class="collapse navbar-collapse justify-content-end align-center" id="main-nav">\r\n                    <ul class="navbar-nav">\r\n                        ${items.join("")}\r\n                    </ul>\r\n                </div>\r\n            </div>`;\r\n        }\r\n        // set nav highlight\r\n        document.querySelectorAll(".nav-item").forEach(div => {\r\n            let link = div.children[0];\r\n            if (new URL(link.href).hash == App.route.hash &&\r\n                div.classList.contains(".nav-item")) {\r\n                // console.log("we are now at " + link.href);\r\n                Dom.AddClass(div, CD.navlinkHighlight);\r\n            }\r\n            else {\r\n                // console.log("removing from" + link.href);\r\n                Dom.RemoveClass(div, CD.navlinkHighlight);\r\n            }\r\n        });\r\n    }\r\n    static RenderFooter() {\r\n        if (App.isFooterRendered)\r\n            return;\r\n        App.isFooterRendered = true;\r\n        let footer = document.querySelector("footer");\r\n        // footer.classList.add("row");\r\n        // let footerblock = Dom.AddDiv(footer, "col")\r\n        App.RenderSocials(footer);\r\n        let copyright = Dom.AddDiv(footer, "copyright");\r\n        Dom.addText(copyright, "© 2020 Jos Feenstra", "text-muted");\r\n        return footer;\r\n    }\r\n    static RenderSocials(context) {\r\n        let footers = Dom.AddDiv(context, "col footer-links mt-3");\r\n        footers.innerHTML = `\r\n        <a href="mailto:me@josfeenstra.nl" type="button" class="btn btn-outline-secondary">\r\n            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-envelope" viewBox="0 0 16 20">\r\n                <path d="M0 4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V4zm2-1a1 1 0 0 0-1 1v.217l7 4.2 7-4.2V4a1 1 0 0 0-1-1H2zm13 2.383-4.758 2.855L15 11.114v-5.73zm-.034 6.878L9.271 8.82 8 9.583 6.728 8.82l-5.694 3.44A1 1 0 0 0 2 13h12a1 1 0 0 0 .966-.739zM1 11.114l4.758-2.876L1 5.383v5.73z"/>\r\n            </svg>\r\n        </a>\r\n\r\n        <a href="https://github.com/josfeenstra" type="button" class="btn btn-outline-secondary">\r\n            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-github" viewBox="0 0 16 20">\r\n                <path d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.012 8.012 0 0 0 16 8c0-4.42-3.58-8-8-8z"/>\r\n            </svg>\r\n        </a>\r\n\r\n        <a href="https://www.linkedin.com/in/jos-feenstra-007369122/" type="button" class="btn btn-outline-secondary">\r\n            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-linkedin" viewBox="0 0 16 20">\r\n                <path d="M0 1.146C0 .513.526 0 1.175 0h13.65C15.474 0 16 .513 16 1.146v13.708c0 .633-.526 1.146-1.175 1.146H1.175C.526 16 0 15.487 0 14.854V1.146zm4.943 12.248V6.169H2.542v7.225h2.401zm-1.2-8.212c.837 0 1.358-.554 1.358-1.248-.015-.709-.52-1.248-1.342-1.248-.822 0-1.359.54-1.359 1.248 0 .694.521 1.248 1.327 1.248h.016zm4.908 8.212V9.359c0-.216.016-.432.08-.586.173-.431.568-.878 1.232-.878.869 0 1.216.662 1.216 1.634v3.865h2.401V9.25c0-2.22-1.184-3.252-2.764-3.252-1.274 0-1.845.7-2.165 1.193v.025h-.016a5.54 5.54 0 0 1 .016-.025V6.169h-2.4c.03.678 0 7.225 0 7.225h2.4z"/>\r\n            </svg>\r\n        </a>\r\n        `;\r\n        // Dom.AddLink(footers,"mailto:me@josfeenstra.nl", "Email", "socials-link mx-1");\r\n        // Dom.AddLink(footers,"https://github.com/josfeenstra", "Github", "socials-link mx-1");\r\n        // Dom.AddLink(footers,"https://www.linkedin.com/in/jos-feenstra-007369122/", "LinkedIn", "socials-link mx-1");\r\n    }\r\n    static ClearNav() {\r\n        Dom.clear("nav");\r\n        App.isNavRendered = false;\r\n    }\r\n    static ClearArticle() {\r\n        Dom.clear("article");\r\n        App.isArticleRendered = false;\r\n        return document.querySelector("article");\r\n    }\r\n    static ClearFooter() {\r\n        Dom.clear("footer");\r\n        App.isFooterRendered = false;\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/Views/view.ts\nvar view_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n// Author : Jos Feenstra\r\n\r\n\r\n\r\nlet showdown = __webpack_require__(589);\r\nconst converter = new showdown.Converter();\r\n// base class for every autogenerated html page\r\nclass View {\r\n    constructor(route) {\r\n        this.route = route;\r\n        this.title = "Jos Feenstra - " + route.name;\r\n        document.title = this.title;\r\n    }\r\n    onLoad() {\r\n        App.RenderNav();\r\n        let article = App.ClearArticle();\r\n        this.loadArticle(article);\r\n        this.afterLoadArticle(article);\r\n        App.RenderFooter();\r\n    }\r\n    loadArticle(context) {\r\n        return view_awaiter(this, void 0, void 0, function* () {\r\n            // // fade in of the sphere\r\n            dom.toId("canvas");\r\n            dom.set("data-filled", "1");\r\n            if (this.route.hash == "#about") {\r\n                dom.set("data-goto", "side");\r\n            }\r\n            else if (this.route.hash == "#website") {\r\n                dom.set("data-goto", "inside");\r\n            }\r\n            else {\r\n                dom.set("data-goto", "bottom");\r\n            }\r\n            let path = this.route.page;\r\n            let res = yield fetch(path);\r\n            let text = yield res.text();\r\n            this.initMarkdownPage(context, text);\r\n        });\r\n    }\r\n    // fill the entire context with whatever we find in markdown\r\n    // build two columns, put all \'extractnodes\' into the first, and the text in the second \r\n    initMarkdownPage(context, markdown) {\r\n        // start processing the html, dont add it to the page yet, we will do some post-processing\r\n        let html = converter.makeHtml(markdown);\r\n        let article = Dom.AddDiv(context, "container mt-5");\r\n        // create an arrow back to the `works` menu, if this is a portfolio item\r\n        if (this.route.type == RouteType.portfolio) {\r\n            let div = Dom.AddDiv(article, "row mb-4 justify-content-center m-0");\r\n            let btn = Dom.AddLink(div, "#works", `<i class="bi bi-caret-up-fill"></i>`, "btn btn-block btn-outline-light col-2");\r\n        }\r\n        // spacing\r\n        let columns = Dom.AddDiv(article, "row mt-5 justify-content-center");\r\n        let col1 = Dom.AddDiv(columns, "col-lg-6 my-5");\r\n        // make sure non-portfolio items are spaced differently\r\n        if (this.route.type != RouteType.portfolio) {\r\n            columns.classList.replace("justify-content-center", "justify-content-end");\r\n        }\r\n        // finally, load the html\r\n        let mdwrapper = Dom.AddDiv(col1, "mb-5");\r\n        mdwrapper.innerHTML = html;\r\n        col1.querySelectorAll("h1").forEach(h1 => {\r\n            h1.classList.add("display-1");\r\n        });\r\n        // turn links in `blockquote` blocks into wide buttons.\r\n        col1.querySelectorAll("blockquote").forEach(block => {\r\n            block.querySelectorAll("a").forEach(a => {\r\n                // set an icon\r\n                let icon = "";\r\n                if (a.href.includes("github")) {\r\n                    icon = "github";\r\n                }\r\n                else if (a.href.includes("http")) {\r\n                    icon = "globe";\r\n                }\r\n                a.innerHTML = `<i class="bi bi-${icon}"></i> ` + a.innerHTML;\r\n                a === null || a === void 0 ? void 0 : a.classList.add("btn", "btn-outline-light", "btn-block");\r\n            });\r\n        });\r\n        // put all images at the bottom of the page\r\n        let imageWrapper = Dom.AddDiv(col1, "mt-5");\r\n        col1.querySelectorAll("img").forEach(img => {\r\n            img.className = "img-fluid mb-2";\r\n            imageWrapper.appendChild(img);\r\n        });\r\n    }\r\n    afterLoadArticle(context) {\r\n    }\r\n    onUnload() {\r\n        App.ClearFooter();\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/Views/home.ts\n// Author : Jos Feenstra\r\nvar home_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\nclass Home extends View {\r\n    constructor(route) {\r\n        super(route);\r\n    }\r\n    onLoad() {\r\n        return home_awaiter(this, void 0, void 0, function* () {\r\n            // console.log("loading home...");\r\n            App.ClearNav();\r\n            let article = yield App.ClearArticle();\r\n            App.ClearFooter();\r\n            this.loadArticle(article);\r\n            article.dataset.gotomain;\r\n            // fade in of the sphere\r\n            Dom.TrySetElementAttributeById("canvas", "data-goto", "overview");\r\n            Dom.TrySetElementAttributeById("canvas", "data-filled", "1");\r\n        });\r\n    }\r\n    loadArticle(context) {\r\n        return home_awaiter(this, void 0, void 0, function* () {\r\n            // this is the main page, codified\r\n            dom.to(context);\r\n            dom.addAndTo("div", "container-lg");\r\n            dom.addAndTo("div", "row justify-content-center align-items-center");\r\n            dom.set("style", "height: 90vh;");\r\n            dom.addAndTo("div", "col-lg-6 text-center mt-5 align-middle");\r\n            dom.add("h1", "display-1", "Jos Feenstra");\r\n            dom.add("h2", "display-6", "Creative software engineer");\r\n            dom.add("p", "lead my-4", "Welcome, feel free to look around!");\r\n            dom.addAndTo("div", "");\r\n            App.RenderMainLinks(dom.pointer);\r\n            App.RenderSocials(dom.pointer);\r\n        });\r\n    }\r\n    onUnload() {\r\n        console.log("unloading home...");\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/Views/work.ts\n// Author : Jos Feenstra\r\nvar work_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\nclass Work extends View {\r\n    constructor(route) {\r\n        super(route);\r\n    }\r\n    loadArticle(context) {\r\n        return work_awaiter(this, void 0, void 0, function* () {\r\n            let dom = new DomWriter();\r\n            dom.toId("canvas")\r\n                .set("data-goto", "top")\r\n                .set("data-filled", "1");\r\n            dom.to(context);\r\n            dom.addAndTo("div", "my-5");\r\n            dom.add("div", "container my-5 mx-5");\r\n            let grid = dom.add("div", "row justify-content-center");\r\n            App.getRoutes(RouteType.portfolio).forEach(item => {\r\n                let a = dom.to(grid).add("a", "col-11 col-md-5 col-lg-3 btn btn-outline-light m-2");\r\n                a.href = item.hash;\r\n                dom.to(a).addAndTo("div", "container my-5 ");\r\n                dom.add("p", "text-light", item.category);\r\n                dom.add("h2", "text-light", item.name);\r\n                dom.add("p", "text-light mt-3", item.year);\r\n                // div.style.backgroundImage = "url("+ item.thumb! + ")";\r\n                // this.addListeners(a, item.hash);\r\n            });\r\n            // builds samples\r\n            // for (let i = 0; i < 9; i++)\r\n            // {\r\n            //     let item = Render.AddDiv(grid, "card");\r\n            //     let text = Render.AddText(item, i.toString());\r\n            //     this.addListeners(item, "#todo");\r\n            // }\r\n        });\r\n    }\r\n    addListeners(item, hash) {\r\n        item.onmouseenter = () => {\r\n            item.style.transform = \'scale(1.10)\';\r\n        };\r\n        item.onmouseleave = () => {\r\n        };\r\n        item.onmousedown = function () {\r\n            // item.style.transform = \'scale(1.00)\';\r\n        };\r\n        item.onmouseup = function (ev) {\r\n            if (ev.button == 2)\r\n                return;\r\n            // item.style.transform = \'\';\r\n            App.tryGo(hash);\r\n        };\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/index.ts\n// author : Jos Feenstra\r\n// entry point \r\n\r\n\r\n\r\n\r\n// import Canvas from "./canvas/canvas";\r\n// import CD from "./utils/constant-data";\r\n// this is a setup of the entire website. \r\n// All possible loadable pages are represented by this table\r\n// TODO move this somewhere else \r\nconst ROUTES = [\r\n    {\r\n        type: 0,\r\n        name: "Home",\r\n        hash: "#home",\r\n        view: Home\r\n    },\r\n    {\r\n        type: 1,\r\n        name: "Works",\r\n        hash: "#works",\r\n        view: Work\r\n    },\r\n    {\r\n        type: 1,\r\n        name: "Highlight",\r\n        hash: "https://josfeenstra.nl/#island",\r\n        view: View,\r\n    },\r\n    {\r\n        type: 1,\r\n        name: "About Me",\r\n        hash: "#about",\r\n        view: View,\r\n        page: "nav/About.md"\r\n    },\r\n];\r\nconst ENTRIES = [\r\n    "Island | 2022 | Hobby",\r\n    "Geofront | 2022 | Study",\r\n    "Geon | 2020-now | Study",\r\n    "Sfered | 2018-now | Job",\r\n    "Website | 2020-now | Hobby",\r\n    "Bamimoth | 2019-now | Hobby",\r\n    "OV3 | 2019-2020 | Job",\r\n    "Comboom | 2021 | Volunteering",\r\n    "Synthesis | 2020 | Study",\r\n    "Geomatics | 2019 | Study",\r\n    "Minor | 2017-2018 | Study",\r\n    "Architecture | 2015-2018 | Study",\r\n    "Groover | 2016-2021 | Volunteering",\r\n    "Chess | 2020 | Hobby",\r\n    "Gazelle | 2018-2020 | Job",\r\n];\r\n// when loaded, try to route to one of these pages. \r\n// else, default to the first route.\r\ndocument.addEventListener("DOMContentLoaded", () => {\r\n    var _a;\r\n    ROUTES.push(...LoadPortfolioItems(ENTRIES, "_text.md", "thumb.png"));\r\n    App.Init(ROUTES, location.hash);\r\n    (_a = document.getElementById("canvas")) === null || _a === void 0 ? void 0 : _a.setAttribute("data-sub-count", "1");\r\n});\r\n// helper function to turn portfolio entries into \'Views\'\r\nfunction LoadPortfolioItems(entries, textname, thumbname) {\r\n    return entries.map(function (entry) {\r\n        let strings = entry.replace(\' \', \'\').split("|");\r\n        let name = strings[0];\r\n        let year = strings[1];\r\n        let category = strings[2];\r\n        let namelower = name.toLowerCase();\r\n        return {\r\n            type: 2,\r\n            name: name,\r\n            hash: "#" + namelower,\r\n            view: View,\r\n            page: "./portfolio/" + namelower + "/" + textname,\r\n            thumb: "./portfolio/" + namelower + "/" + thumbname,\r\n            year: year,\r\n            category: category\r\n        };\r\n    });\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///223\n')})()})();
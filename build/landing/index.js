(()=>{"use strict";eval('\n;// CONCATENATED MODULE: ./src/data/int-matrix.ts\n// generic all-pupose matrix of ints\r\nclass int_matrix_IntMatrix {\r\n    constructor(height, width, data = []) {\r\n        this._height = height;\r\n        this._width = width;\r\n        this.data = new Uint16Array(this._width * this._height);\r\n        if (data == [] || data.length == 0)\r\n            this.fill(0);\r\n        else\r\n            this.setData(data);\r\n    }\r\n    static fromList(list, width) {\r\n        let height = list.length / width;\r\n        let array = new int_matrix_IntMatrix(height, width);\r\n        for (let i = 0; i < list.length; i++) {\r\n            array.data[i] = list[i];\r\n        }\r\n        return array;\r\n    }\r\n    print() {\r\n        let strings = [];\r\n        const WIDTH = 8;\r\n        for (var i = 0; i < this._height; i++) {\r\n            strings.push("|");\r\n            for (var j = 0; j < this._width; j++) {\r\n                let str = this.get(i, j).toFixed(2);\r\n                str = str.padStart(WIDTH, " ");\r\n                strings.push(str);\r\n                if (j < this._width - 2) {\r\n                    strings.push("  ");\r\n                }\r\n            }\r\n            strings.push("  |\\n");\r\n        }\r\n        console.log(strings.join(""));\r\n    }\r\n    clone() {\r\n        let clone = new int_matrix_IntMatrix(this._height, this._width);\r\n        clone.data = this.data;\r\n        return clone;\r\n    }\r\n    setData(data) {\r\n        if (data.length != this._height * this._width)\r\n            throw "data.length does not match width * height " + data.length.toString();\r\n        this.data.set(data);\r\n    }\r\n    count() {\r\n        // number of entries / rows.\r\n        // when derrived classes ask for \'how many of x?\' they usually mean this.\r\n        return this._height;\r\n    }\r\n    getDimensions() {\r\n        return [this._height, this._width];\r\n    }\r\n    inRange(i, j) {\r\n        return !(i < 0 || i > this._height - 1 || j < 0 || j > this._width - 1);\r\n    }\r\n    fill(value) {\r\n        let size = this._height * this._width;\r\n        for (let i = 0; i < size; i++) {\r\n            this.data[i] = value;\r\n        }\r\n    }\r\n    fillWith(data, valuesPerEntry = this._width) {\r\n        // values per entry can be used to setData which is not of the same shape.\r\n        let vpe = valuesPerEntry;\r\n        if (vpe > this._width)\r\n            throw "values per entry is larger than this._width. This will spill over.";\r\n        for (let i = 0; i < this._height; i++) {\r\n            for (let j = 0; j < vpe; j++) {\r\n                this.set(i, j, data[i * vpe + j]);\r\n            }\r\n        }\r\n    }\r\n    get(i, j) {\r\n        if (!this.inRange(i, j)) {\r\n            console.warn("out of range!");\r\n            return 0;\r\n        }\r\n        return this.data[i * this._width + j];\r\n    }\r\n    getRow(i) {\r\n        // if (i < 0 || i > this.height) throw "column is out of bounds for Array"\r\n        let data = new Uint16Array(this._width);\r\n        for (let j = 0; j < this._width; j++) {\r\n            data[j] = this.get(i, j);\r\n        }\r\n        return data;\r\n    }\r\n    getColumn(j) {\r\n        // if (j < 0 || j > this.width) throw "column is out of bounds for Array"\r\n        let data = new Uint16Array(this._height);\r\n        for (let i = 0; i < this._height; i++) {\r\n            let index = i * this._width + j;\r\n            data[i] = this.data[index];\r\n        }\r\n        return data;\r\n    }\r\n    set(i, j, value) {\r\n        if (!this.inRange(i, j)) {\r\n            console.warn("out of range!");\r\n            return;\r\n        }\r\n        this.data[i * this._width + j] = value;\r\n    }\r\n    setRow(rowIndex, row) {\r\n        // if (this.width != row.length) throw "dimention of floatarray is not " + row.length;\r\n        for (let j = 0; j < this._width; j++) {\r\n            this.set(rowIndex, j, row[j]);\r\n        }\r\n    }\r\n    takeRows(indices) {\r\n        // create a new array from a couple of rows\r\n        console.log(this._height, this._width);\r\n        const count = indices.length;\r\n        let array = new int_matrix_IntMatrix(count, this._width);\r\n        for (let i = 0; i < count; i++) {\r\n            let getIndex = indices[i];\r\n            array.setRow(i, this.getRow(getIndex));\r\n        }\r\n        return array;\r\n    }\r\n    getData() {\r\n        return this.data;\r\n    }\r\n    forEachValue(callbackfn) {\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            this.data[i] = callbackfn(this.data[i], i);\r\n        }\r\n        return this;\r\n    }\r\n    forEachRow(callbackfn) {\r\n        for (let i = 0; i < this._height; i++) {\r\n            let row = this.getRow(i);\r\n            callbackfn(row, i);\r\n            this.setRow(i, row);\r\n        }\r\n        return this;\r\n    }\r\n    trueForAll(callbackfn) {\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            if (!callbackfn(this.data[i], i)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/math/const.ts\n// name:    const.ts\r\n// author:  Jos Feenstra\r\n// purpose: Certain math constances\r\n// todo:    These are somewhat like the settings of the entire application. This could be expanded upon (json\'s, in-app functionalitiy)\r\nclass const_Const {\r\n    static IsRouglyZero(value) {\r\n        return Math.abs(value) < this.TOLERANCE;\r\n    }\r\n}\r\nconst_Const.TOLERANCE = 0.0001; // tolerance used for determining if 1 value is the same as some other value, relatively speaking\r\nconst_Const.TOL_SQUARED = Math.pow(const_Const.TOLERANCE, 2);\r\nconst_Const.MAX_U16 = 65536;\r\n// ----- Line Render Settings -----\r\nconst_Const.PLANE_RENDER_LINECOUNT = 9;\r\nconst_Const.PLANE_RENDER_LINEDISTANCE = 0.3;\r\nconst_Const.CIRCLE_SEGMENTS = 100;\r\n\n;// CONCATENATED MODULE: ./src/math/math.ts\n// purpose: simple operations with only numbers\r\nclass GeonMath {\r\n    // make sure \'value\' is more than \'lower\', and less than \'upper\'\r\n    static clamp(value, lower, upper) {\r\n        return Math.min(Math.max(value, lower), upper);\r\n    }\r\n    static fade(t) {\r\n        // Fade function as defined by Ken Perlin.  This eases coordinate values\r\n        // so that they will ease towards integral values.  This ends up smoothing\r\n        // the final output.\r\n        return t * t * t * (t * (t * 6 - 15) + 10); // 6t^5 - 15t^4 + 10t^3\r\n    }\r\n    static lerp(a, b, x) {\r\n        return a + x * (b - a);\r\n    }\r\n    static radToDeg(r) {\r\n        return (r * 180) / Math.PI;\r\n    }\r\n    static degToRad(d) {\r\n        return (d * Math.PI) / 180;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/data/float-matrix.ts\n// generic all-pupose matrix of floats\r\nclass float_matrix_FloatMatrix {\r\n    constructor(height, width, data = []) {\r\n        this._height = height;\r\n        this._width = width;\r\n        this.data = new Float32Array(this._width * this._height);\r\n        if (data == [] || data.length == 0)\r\n            this.fill(0);\r\n        else\r\n            this.setData(data);\r\n    }\r\n    print() {\r\n        let strings = [];\r\n        const WIDTH = 8;\r\n        for (var i = 0; i < this._height; i++) {\r\n            strings.push("|");\r\n            for (var j = 0; j < this._width; j++) {\r\n                let str = this.get(i, j).toFixed(2);\r\n                str = str.padStart(WIDTH, " ");\r\n                strings.push(str);\r\n                if (j < this._width - 2) {\r\n                    strings.push("  ");\r\n                }\r\n            }\r\n            strings.push("  |\\n");\r\n        }\r\n        console.log(strings.join(""));\r\n    }\r\n    clone() {\r\n        let clone = new float_matrix_FloatMatrix(this._height, this._width);\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            clone.data[i] = this.data[i];\r\n        }\r\n        return clone;\r\n    }\r\n    setData(data) {\r\n        if (data.length != this._height * this._width)\r\n            throw "data.length does not match width * height " + data.length.toString();\r\n        this.data.set(data);\r\n    }\r\n    count() {\r\n        // number of entries / rows.\r\n        // when derrived classes ask for \'how many of x?\' they usually mean this.\r\n        return this._height;\r\n    }\r\n    getDimensions() {\r\n        return [this._height, this._width];\r\n    }\r\n    fill(value) {\r\n        let size = this._height * this._width;\r\n        for (let i = 0; i < size; i++) {\r\n            this.data[i] = value;\r\n        }\r\n    }\r\n    fillWith(data, valuesPerEntry = this._width) {\r\n        // values per entry can be used to setData which is not of the same shape.\r\n        let vpe = valuesPerEntry;\r\n        if (vpe > this._width)\r\n            throw "values per entry is larger than this._width. This will spill over.";\r\n        for (let i = 0; i < this._height; i++) {\r\n            for (let j = 0; j < vpe; j++) {\r\n                this.set(i, j, data[i * vpe + j]);\r\n            }\r\n        }\r\n    }\r\n    get(i, j) {\r\n        return this.data[i * this._width + j];\r\n    }\r\n    getRow(i) {\r\n        // if (i < 0 || i > this.height) throw "column is out of bounds for FloatArray"\r\n        let data = new Float32Array(this._width);\r\n        for (let j = 0; j < this._width; j++) {\r\n            data[j] = this.get(i, j);\r\n        }\r\n        return data;\r\n    }\r\n    getColumn(j) {\r\n        // if (j < 0 || j > this.width) throw "column is out of bounds for FloatArray"\r\n        let data = new Float32Array(this._height);\r\n        for (let i = 0; i < this._height; i++) {\r\n            let index = i * this._width + j;\r\n            data[i] = this.data[index];\r\n        }\r\n        return data;\r\n    }\r\n    set(i, j, value) {\r\n        this.data[i * this._width + j] = value;\r\n    }\r\n    setRow(rowIndex, row) {\r\n        // if (this.width != row.length) throw "dimention of floatarray is not " + row.length;\r\n        for (let j = 0; j < this._width; j++) {\r\n            this.set(rowIndex, j, row[j]);\r\n        }\r\n    }\r\n    forEachValue(callbackfn) {\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            this.data[i] = callbackfn(this.data[i], i);\r\n        }\r\n        return this;\r\n    }\r\n    takeRows(indices) {\r\n        // create a new floatarray\r\n        const count = indices.length;\r\n        let array = new float_matrix_FloatMatrix(count, this._width);\r\n        for (let i = 0; i < count; i++) {\r\n            let getIndex = indices[i];\r\n            array.setRow(i, this.getRow(getIndex));\r\n        }\r\n        return array;\r\n    }\r\n    // create a new floatmatrix, processed by iterating\r\n    mapWith(other, callback) {\r\n        let result = this.clone();\r\n        let width = Math.min(this._width, other._height);\r\n        let height = Math.min(this._height, other._height);\r\n        for (var i = 0; i < height; i++) {\r\n            for (var j = 0; j < width; j++) {\r\n                result.set(i, j, callback(this.get(i, j), other.get(i, j)));\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    // generalized multiplication\r\n    multiply(b) {\r\n        let a = this;\r\n        if (b._width !== a._height) {\r\n            throw new Error("Columns in A should be the same as the number of rows in B");\r\n        }\r\n        var product = new float_matrix_FloatMatrix(a._height, b._width);\r\n        for (var i = 0; i < product._height; i++) {\r\n            for (var j = 0; j < b._width; j++) {\r\n                for (var k = 0; k < a._width; k++) {\r\n                    product.set(i, j, product.get(i, j) + a.get(i, k) * b.get(k, j));\r\n                }\r\n            }\r\n        }\r\n        return product;\r\n    }\r\n    static fromNative(native) {\r\n        // assume all subarrays have the same shape!!\r\n        let height = native.length;\r\n        let width = native[0].length;\r\n        let matrix = new float_matrix_FloatMatrix(height, width);\r\n        for (var i = 0; i < native.length; i++) {\r\n            for (var j = 0; j < native[0].length; j++) {\r\n                matrix.set(i, j, native[i][j]);\r\n            }\r\n        }\r\n        return matrix;\r\n    }\r\n    toNative() {\r\n        let native = [];\r\n        for (var i = 0; i < this._height; i++) {\r\n            native[i] = [];\r\n            for (var j = 0; j < this._width; j++) {\r\n                native[i][j] = this.get(i, j);\r\n            }\r\n        }\r\n        return native;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/math/matrix.ts\n// matrix\r\n// author: Jos Feenstra\r\n// TODO: FIX MATRIX4 !!!\r\n// NOTE:\r\n\r\n\r\n// 3x3 matrix of floats used for 2d math\r\n// inspired by Gregg Tavares.\r\nclass Matrix3 extends (/* unused pure expression or super */ null && (FloatMatrix)) {\r\n    constructor(data = []) {\r\n        super(3, 3, data);\r\n    }\r\n    static newIdentity() {\r\n        return new Matrix3([1, 0, 0, 0, 1, 0, 0, 0, 1]);\r\n    }\r\n    static newProjection(width, height) {\r\n        // Note: This matrix flips the Y axis so 0 is at the top.\r\n        return new Matrix3([2 / width, 0, 0, 0, -2 / height, 0, -1, 1, 1]);\r\n    }\r\n    static newTranslation(dx, dy) {\r\n        return new Matrix3([1, 0, 0, 0, 1, 0, dx, dy, 1]);\r\n    }\r\n    // angle in radians\r\n    static newRotation(r) {\r\n        var c = Math.cos(r);\r\n        var s = Math.sin(r);\r\n        return new Matrix3([c, -s, 0, s, c, 0, 0, 0, 1]);\r\n    }\r\n    static newScalar(sx, sy) {\r\n        return new Matrix3([sx, 0, 0, 0, sy, 0, 0, 0, 1]);\r\n    }\r\n    toMat4() {\r\n        let d = this.data;\r\n        return new matrix_Matrix4([\r\n            d[0],\r\n            d[1],\r\n            0,\r\n            d[2],\r\n            d[3],\r\n            d[4],\r\n            0,\r\n            d[5],\r\n            0,\r\n            0,\r\n            1,\r\n            0,\r\n            d[6],\r\n            d[7],\r\n            0,\r\n            d[8],\r\n        ]);\r\n    }\r\n    project(width, height) {\r\n        return this.multiply(Matrix3.newProjection(width, height));\r\n    }\r\n    translateN(dx, dy) {\r\n        return this.multiply(Matrix3.newTranslation(dx, dy));\r\n    }\r\n    translate(v) {\r\n        return this.multiply(Matrix3.newTranslation(v.x, v.y));\r\n    }\r\n    rotate(r) {\r\n        return this.multiply(Matrix3.newRotation(r));\r\n    }\r\n    scale(sx, sy) {\r\n        return this.multiply(Matrix3.newScalar(sx, sy));\r\n    }\r\n    // multiply two m3\'s\r\n    multiply(other) {\r\n        let a = this.data;\r\n        let b = other.data;\r\n        var a00 = a[0 * 3 + 0];\r\n        var a01 = a[0 * 3 + 1];\r\n        var a02 = a[0 * 3 + 2];\r\n        var a10 = a[1 * 3 + 0];\r\n        var a11 = a[1 * 3 + 1];\r\n        var a12 = a[1 * 3 + 2];\r\n        var a20 = a[2 * 3 + 0];\r\n        var a21 = a[2 * 3 + 1];\r\n        var a22 = a[2 * 3 + 2];\r\n        var b00 = b[0 * 3 + 0];\r\n        var b01 = b[0 * 3 + 1];\r\n        var b02 = b[0 * 3 + 2];\r\n        var b10 = b[1 * 3 + 0];\r\n        var b11 = b[1 * 3 + 1];\r\n        var b12 = b[1 * 3 + 2];\r\n        var b20 = b[2 * 3 + 0];\r\n        var b21 = b[2 * 3 + 1];\r\n        var b22 = b[2 * 3 + 2];\r\n        return new Matrix3([\r\n            b00 * a00 + b01 * a10 + b02 * a20,\r\n            b00 * a01 + b01 * a11 + b02 * a21,\r\n            b00 * a02 + b01 * a12 + b02 * a22,\r\n            b10 * a00 + b11 * a10 + b12 * a20,\r\n            b10 * a01 + b11 * a11 + b12 * a21,\r\n            b10 * a02 + b11 * a12 + b12 * a22,\r\n            b20 * a00 + b21 * a10 + b22 * a20,\r\n            b20 * a01 + b21 * a11 + b22 * a21,\r\n            b20 * a02 + b21 * a12 + b22 * a22,\r\n        ]);\r\n    }\r\n    // transform a vector. RECYCLE IT\r\n    transformVector(v) {\r\n        let m = this.data;\r\n        let v0 = v.x;\r\n        let v1 = v.y;\r\n        let d = v0 * m[0 * 3 + 2] + v1 * m[1 * 3 + 2] + m[2 * 3 + 2];\r\n        v.x = (v0 * m[0 * 3 + 0] + v1 * m[1 * 3 + 0] + m[2 * 3 + 0]) / d;\r\n        v.y = (v0 * m[0 * 3 + 1] + v1 * m[1 * 3 + 1] + m[2 * 3 + 1]) / d;\r\n        return v;\r\n    }\r\n    // return the inverse of this matrix\r\n    inverse() {\r\n        // ive got no idea what is happening here,\r\n        // but apparantly, this is how you inverse a 3x3 matrix.\r\n        let m = this.data;\r\n        var t00 = m[1 * 3 + 1] * m[2 * 3 + 2] - m[1 * 3 + 2] * m[2 * 3 + 1];\r\n        var t10 = m[0 * 3 + 1] * m[2 * 3 + 2] - m[0 * 3 + 2] * m[2 * 3 + 1];\r\n        var t20 = m[0 * 3 + 1] * m[1 * 3 + 2] - m[0 * 3 + 2] * m[1 * 3 + 1];\r\n        // discriminant\r\n        var d = 1.0 / (m[0 * 3 + 0] * t00 - m[1 * 3 + 0] * t10 + m[2 * 3 + 0] * t20);\r\n        this.setData([\r\n            d * t00,\r\n            -d * t10,\r\n            d * t20,\r\n            -d * (m[1 * 3 + 0] * m[2 * 3 + 2] - m[1 * 3 + 2] * m[2 * 3 + 0]),\r\n            d * (m[0 * 3 + 0] * m[2 * 3 + 2] - m[0 * 3 + 2] * m[2 * 3 + 0]),\r\n            -d * (m[0 * 3 + 0] * m[1 * 3 + 2] - m[0 * 3 + 2] * m[1 * 3 + 0]),\r\n            d * (m[1 * 3 + 0] * m[2 * 3 + 1] - m[1 * 3 + 1] * m[2 * 3 + 0]),\r\n            -d * (m[0 * 3 + 0] * m[2 * 3 + 1] - m[0 * 3 + 1] * m[2 * 3 + 0]),\r\n            d * (m[0 * 3 + 0] * m[1 * 3 + 1] - m[0 * 3 + 1] * m[1 * 3 + 0]),\r\n        ]);\r\n        return this;\r\n    }\r\n}\r\n// 4x4 matrix of floats used for 3d math\r\n// inspired by Gregg Tavares.\r\nclass matrix_Matrix4 extends float_matrix_FloatMatrix {\r\n    constructor(data = []) {\r\n        super(4, 4, data);\r\n    }\r\n    static new(data) {\r\n        return new matrix_Matrix4(data);\r\n    }\r\n    static newIdentity() {\r\n        return new matrix_Matrix4([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);\r\n    }\r\n    static newCopy(other) {\r\n        let result = new matrix_Matrix4();\r\n        for (let i = 0; i < 16; i++) {\r\n            result.data[i] = other.data[i];\r\n        }\r\n        return result;\r\n    }\r\n    clone() {\r\n        return matrix_Matrix4.newCopy(this);\r\n    }\r\n    multiplied(other) {\r\n        // NOTE: i swapped a and b, this makes more sense to me, but i could be wrong about it...\r\n        const a = other.data;\r\n        const b = this.data;\r\n        var b00 = b[0 * 4 + 0];\r\n        var b01 = b[0 * 4 + 1];\r\n        var b02 = b[0 * 4 + 2];\r\n        var b03 = b[0 * 4 + 3];\r\n        var b10 = b[1 * 4 + 0];\r\n        var b11 = b[1 * 4 + 1];\r\n        var b12 = b[1 * 4 + 2];\r\n        var b13 = b[1 * 4 + 3];\r\n        var b20 = b[2 * 4 + 0];\r\n        var b21 = b[2 * 4 + 1];\r\n        var b22 = b[2 * 4 + 2];\r\n        var b23 = b[2 * 4 + 3];\r\n        var b30 = b[3 * 4 + 0];\r\n        var b31 = b[3 * 4 + 1];\r\n        var b32 = b[3 * 4 + 2];\r\n        var b33 = b[3 * 4 + 3];\r\n        var a00 = a[0 * 4 + 0];\r\n        var a01 = a[0 * 4 + 1];\r\n        var a02 = a[0 * 4 + 2];\r\n        var a03 = a[0 * 4 + 3];\r\n        var a10 = a[1 * 4 + 0];\r\n        var a11 = a[1 * 4 + 1];\r\n        var a12 = a[1 * 4 + 2];\r\n        var a13 = a[1 * 4 + 3];\r\n        var a20 = a[2 * 4 + 0];\r\n        var a21 = a[2 * 4 + 1];\r\n        var a22 = a[2 * 4 + 2];\r\n        var a23 = a[2 * 4 + 3];\r\n        var a30 = a[3 * 4 + 0];\r\n        var a31 = a[3 * 4 + 1];\r\n        var a32 = a[3 * 4 + 2];\r\n        var a33 = a[3 * 4 + 3];\r\n        return new matrix_Matrix4([\r\n            b00 * a00 + b01 * a10 + b02 * a20 + b03 * a30,\r\n            b00 * a01 + b01 * a11 + b02 * a21 + b03 * a31,\r\n            b00 * a02 + b01 * a12 + b02 * a22 + b03 * a32,\r\n            b00 * a03 + b01 * a13 + b02 * a23 + b03 * a33,\r\n            b10 * a00 + b11 * a10 + b12 * a20 + b13 * a30,\r\n            b10 * a01 + b11 * a11 + b12 * a21 + b13 * a31,\r\n            b10 * a02 + b11 * a12 + b12 * a22 + b13 * a32,\r\n            b10 * a03 + b11 * a13 + b12 * a23 + b13 * a33,\r\n            b20 * a00 + b21 * a10 + b22 * a20 + b23 * a30,\r\n            b20 * a01 + b21 * a11 + b22 * a21 + b23 * a31,\r\n            b20 * a02 + b21 * a12 + b22 * a22 + b23 * a32,\r\n            b20 * a03 + b21 * a13 + b22 * a23 + b23 * a33,\r\n            b30 * a00 + b31 * a10 + b32 * a20 + b33 * a30,\r\n            b30 * a01 + b31 * a11 + b32 * a21 + b33 * a31,\r\n            b30 * a02 + b31 * a12 + b32 * a22 + b33 * a32,\r\n            b30 * a03 + b31 * a13 + b32 * a23 + b33 * a33,\r\n        ]);\r\n    }\r\n    multiply(other) {\r\n        this.data = this.multiplied(other).data;\r\n        return this;\r\n    }\r\n    transpose() {\r\n        let matrix = new matrix_Matrix4();\r\n        let res = matrix.data;\r\n        let old = this.data;\r\n        res[0] = old[0];\r\n        res[1] = old[4];\r\n        res[2] = old[8];\r\n        res[3] = old[12];\r\n        res[4] = old[1];\r\n        res[5] = old[5];\r\n        res[6] = old[9];\r\n        res[7] = old[13];\r\n        res[8] = old[2];\r\n        res[9] = old[6];\r\n        res[10] = old[10];\r\n        res[11] = old[14];\r\n        res[12] = old[3];\r\n        res[13] = old[7];\r\n        res[14] = old[11];\r\n        res[15] = old[15];\r\n        return matrix;\r\n    }\r\n    static newLookAt(cameraPosition, target, up) {\r\n        let matrix = new matrix_Matrix4();\r\n        let data = matrix.data;\r\n        let zAxis = cameraPosition.clone().sub(target).normalize();\r\n        let xAxis = up.clone().cross(up).normalize();\r\n        let yAxis = zAxis.clone().cross(xAxis).normalize();\r\n        data[0] = xAxis.x;\r\n        data[1] = xAxis.y;\r\n        data[2] = xAxis.z;\r\n        data[3] = 0;\r\n        data[4] = yAxis.x;\r\n        data[5] = yAxis.y;\r\n        data[6] = yAxis.z;\r\n        data[7] = 0;\r\n        data[8] = zAxis.x;\r\n        data[9] = zAxis.y;\r\n        data[10] = zAxis.z;\r\n        data[11] = 0;\r\n        data[12] = cameraPosition.x;\r\n        data[13] = cameraPosition.y;\r\n        data[14] = cameraPosition.z;\r\n        data[15] = 1;\r\n        return matrix;\r\n    }\r\n    /**\r\n     * Computes a 4-by-4 perspective transformation matrix given the angular height\r\n     * of the frustum, the aspect ratio, and the near and far clipping planes.  The\r\n     * arguments define a frustum extending in the negative z direction.  The given\r\n     * angle is the vertical angle of the frustum, and the horizontal angle is\r\n     * determined to produce the given aspect ratio.  The arguments near and far are\r\n     * the distances to the near and far clipping planes.  Note that near and far\r\n     * are not z coordinates, but rather they are distances along the negative\r\n     * z-axis.  The matrix generated sends the viewing frustum to the unit box.\r\n     * We assume a unit box extending from -1 to 1 in the x and y dimensions and\r\n     * from -1 to 1 in the z dimension.\r\n     * @param {number} fieldOfViewInRadians field of view in y axis.\r\n     * @param {number} aspect aspect of viewport (width / height)\r\n     * @param {number} near near Z clipping plane\r\n     * @param {number} far far Z clipping plane\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     */\r\n    static newPerspective(fov, aspect, near, far) {\r\n        let matrix = new matrix_Matrix4();\r\n        let data = matrix.data;\r\n        var f = Math.tan(Math.PI * 0.5 - 0.5 * fov);\r\n        var rangeInv = 1.0 / (near - far);\r\n        data[0] = f / aspect;\r\n        data[1] = 0;\r\n        data[2] = 0;\r\n        data[3] = 0;\r\n        data[4] = 0;\r\n        data[5] = f;\r\n        data[6] = 0;\r\n        data[7] = 0;\r\n        data[8] = 0;\r\n        data[9] = 0;\r\n        data[10] = (near + far) * rangeInv;\r\n        data[11] = -1;\r\n        data[12] = 0;\r\n        data[13] = 0;\r\n        data[14] = near * far * rangeInv * 2;\r\n        data[15] = 0;\r\n        return matrix;\r\n    }\r\n    /**\r\n     * Computes a 4-by-4 orthographic projection matrix given the coordinates of the\r\n     * planes defining the axis-aligned, box-shaped viewing volume.  The matrix\r\n     * generated sends that box to the unit box.  Note that although left and right\r\n     * are x coordinates and bottom and top are y coordinates, near and far\r\n     * are not z coordinates, but rather they are distances along the negative\r\n     * z-axis.  We assume a unit box extending from -1 to 1 in the x and y\r\n     * dimensions and from -1 to 1 in the z dimension.\r\n     * @param {number} left The x coordinate of the left plane of the box.\r\n     * @param {number} right The x coordinate of the right plane of the box.\r\n     * @param {number} bottom The y coordinate of the bottom plane of the box.\r\n     * @param {number} top The y coordinate of the right plane of the box.\r\n     * @param {number} near The negative z coordinate of the near plane of the box.\r\n     * @param {number} far The negative z coordinate of the far plane of the box.\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     */\r\n    static newOrthographic(left, right, bottom, top, near, far) {\r\n        let matrix = new matrix_Matrix4();\r\n        let dst = matrix.data;\r\n        dst[0] = 2 / (right - left);\r\n        dst[1] = 0;\r\n        dst[2] = 0;\r\n        dst[3] = 0;\r\n        dst[4] = 0;\r\n        dst[5] = 2 / (top - bottom);\r\n        dst[6] = 0;\r\n        dst[7] = 0;\r\n        dst[8] = 0;\r\n        dst[9] = 0;\r\n        dst[10] = 2 / (near - far);\r\n        dst[11] = 0;\r\n        dst[12] = (left + right) / (left - right);\r\n        dst[13] = (bottom + top) / (bottom - top);\r\n        dst[14] = (near + far) / (near - far);\r\n        dst[15] = 1;\r\n        return matrix;\r\n    }\r\n    /**\r\n     * Computes a 4-by-4 perspective transformation matrix given the left, right,\r\n     * top, bottom, near and far clipping planes. The arguments define a frustum\r\n     * extending in the negative z direction. The arguments near and far are the\r\n     * distances to the near and far clipping planes. Note that near and far are not\r\n     * z coordinates, but rather they are distances along the negative z-axis. The\r\n     * matrix generated sends the viewing frustum to the unit box. We assume a unit\r\n     * box extending from -1 to 1 in the x and y dimensions and from -1 to 1 in the z\r\n     * dimension.\r\n     * @param {number} left The x coordinate of the left plane of the box.\r\n     * @param {number} right The x coordinate of the right plane of the box.\r\n     * @param {number} bottom The y coordinate of the bottom plane of the box.\r\n     * @param {number} top The y coordinate of the right plane of the box.\r\n     * @param {number} near The negative z coordinate of the near plane of the box.\r\n     * @param {number} far The negative z coordinate of the far plane of the box.\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     */\r\n    static newFrustum(left, right, bottom, top, near, far) {\r\n        let matrix = new matrix_Matrix4();\r\n        let dst = matrix.data;\r\n        var dx = right - left;\r\n        var dy = top - bottom;\r\n        var dz = far - near;\r\n        dst[0] = (2 * near) / dx;\r\n        dst[1] = 0;\r\n        dst[2] = 0;\r\n        dst[3] = 0;\r\n        dst[4] = 0;\r\n        dst[5] = (2 * near) / dy;\r\n        dst[6] = 0;\r\n        dst[7] = 0;\r\n        dst[8] = (left + right) / dx;\r\n        dst[9] = (top + bottom) / dy;\r\n        dst[10] = -(far + near) / dz;\r\n        dst[11] = -1;\r\n        dst[12] = 0;\r\n        dst[13] = 0;\r\n        dst[14] = (-2 * near * far) / dz;\r\n        dst[15] = 0;\r\n        return matrix;\r\n    }\r\n    static newTranslation(tx, ty, tz) {\r\n        return new matrix_Matrix4([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, tx, ty, tz, 1]);\r\n    }\r\n    static newXRotation(angleInRadians) {\r\n        var c = Math.cos(angleInRadians);\r\n        var s = Math.sin(angleInRadians);\r\n        return new matrix_Matrix4([1, 0, 0, 0, 0, c, -s, 0, 0, s, c, 0, 0, 0, 0, 1]);\r\n    }\r\n    static newYRotation(angleInRadians) {\r\n        var c = Math.cos(angleInRadians);\r\n        var s = Math.sin(angleInRadians);\r\n        return new matrix_Matrix4([c, 0, s, 0, 0, 1, 0, 0, -s, 0, c, 0, 0, 0, 0, 1]);\r\n    }\r\n    static newZRotation(angleInRadians) {\r\n        let matrix = new matrix_Matrix4();\r\n        let dst = matrix.data;\r\n        var c = Math.cos(angleInRadians);\r\n        var s = Math.sin(angleInRadians);\r\n        dst[0] = c;\r\n        dst[1] = s;\r\n        dst[2] = 0;\r\n        dst[3] = 0;\r\n        dst[4] = -s;\r\n        dst[5] = c;\r\n        dst[6] = 0;\r\n        dst[7] = 0;\r\n        dst[8] = 0;\r\n        dst[9] = 0;\r\n        dst[10] = 1;\r\n        dst[11] = 0;\r\n        dst[12] = 0;\r\n        dst[13] = 0;\r\n        dst[14] = 0;\r\n        dst[15] = 1;\r\n        return matrix;\r\n    }\r\n    /**\r\n     * Makes an rotation matrix around an arbitrary axis\r\n     * @param {Vector3} axis axis to rotate around\r\n     * @param {number} angleInRadians amount to rotate\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     */\r\n    static newAxisRotation(axis, angleInRadians) {\r\n        let matrix = new matrix_Matrix4();\r\n        let dst = matrix.data;\r\n        let x = axis.x;\r\n        let y = axis.y;\r\n        let z = axis.z;\r\n        let n = Math.sqrt(x * x + y * y + z * z);\r\n        x /= n;\r\n        y /= n;\r\n        z /= n;\r\n        let xx = x * x;\r\n        let yy = y * y;\r\n        let zz = z * z;\r\n        let c = Math.cos(angleInRadians);\r\n        let s = Math.sin(angleInRadians);\r\n        let oneMinusCosine = 1 - c;\r\n        dst[0] = xx + (1 - xx) * c;\r\n        dst[1] = x * y * oneMinusCosine + z * s;\r\n        dst[2] = x * z * oneMinusCosine - y * s;\r\n        dst[3] = 0;\r\n        dst[4] = x * y * oneMinusCosine - z * s;\r\n        dst[5] = yy + (1 - yy) * c;\r\n        dst[6] = y * z * oneMinusCosine + x * s;\r\n        dst[7] = 0;\r\n        dst[8] = x * z * oneMinusCosine + y * s;\r\n        dst[9] = y * z * oneMinusCosine - x * s;\r\n        dst[10] = zz + (1 - zz) * c;\r\n        dst[11] = 0;\r\n        dst[12] = 0;\r\n        dst[13] = 0;\r\n        dst[14] = 0;\r\n        dst[15] = 1;\r\n        return matrix;\r\n    }\r\n    /**\r\n     * Multiply by an axis rotation matrix\r\n     * @param {Matrix4} m matrix to multiply\r\n     * @param {Vector3} axis axis to rotate around\r\n     * @param {number} angleInRadians amount to rotate\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     * @memberOf module:webgl-3d-math\r\n     */\r\n    axisRotate(axis, angleInRadians) {\r\n        // This is the optimized version of\r\n        // return multiply(m, axisRotation(axis, angleInRadians), dst);\r\n        let matrix = new matrix_Matrix4();\r\n        let dst = matrix.data;\r\n        let m = this.data;\r\n        var x = axis.x;\r\n        var y = axis.y;\r\n        var z = axis.z;\r\n        var n = Math.sqrt(x * x + y * y + z * z);\r\n        x /= n;\r\n        y /= n;\r\n        z /= n;\r\n        var xx = x * x;\r\n        var yy = y * y;\r\n        var zz = z * z;\r\n        var c = Math.cos(angleInRadians);\r\n        var s = Math.sin(angleInRadians);\r\n        var oneMinusCosine = 1 - c;\r\n        var r00 = xx + (1 - xx) * c;\r\n        var r01 = x * y * oneMinusCosine + z * s;\r\n        var r02 = x * z * oneMinusCosine - y * s;\r\n        var r10 = x * y * oneMinusCosine - z * s;\r\n        var r11 = yy + (1 - yy) * c;\r\n        var r12 = y * z * oneMinusCosine + x * s;\r\n        var r20 = x * z * oneMinusCosine + y * s;\r\n        var r21 = y * z * oneMinusCosine - x * s;\r\n        var r22 = zz + (1 - zz) * c;\r\n        var m00 = m[0];\r\n        var m01 = m[1];\r\n        var m02 = m[2];\r\n        var m03 = m[3];\r\n        var m10 = m[4];\r\n        var m11 = m[5];\r\n        var m12 = m[6];\r\n        var m13 = m[7];\r\n        var m20 = m[8];\r\n        var m21 = m[9];\r\n        var m22 = m[10];\r\n        var m23 = m[11];\r\n        dst[0] = r00 * m00 + r01 * m10 + r02 * m20;\r\n        dst[1] = r00 * m01 + r01 * m11 + r02 * m21;\r\n        dst[2] = r00 * m02 + r01 * m12 + r02 * m22;\r\n        dst[3] = r00 * m03 + r01 * m13 + r02 * m23;\r\n        dst[4] = r10 * m00 + r11 * m10 + r12 * m20;\r\n        dst[5] = r10 * m01 + r11 * m11 + r12 * m21;\r\n        dst[6] = r10 * m02 + r11 * m12 + r12 * m22;\r\n        dst[7] = r10 * m03 + r11 * m13 + r12 * m23;\r\n        dst[8] = r20 * m00 + r21 * m10 + r22 * m20;\r\n        dst[9] = r20 * m01 + r21 * m11 + r22 * m21;\r\n        dst[10] = r20 * m02 + r21 * m12 + r22 * m22;\r\n        dst[11] = r20 * m03 + r21 * m13 + r22 * m23;\r\n        if (m !== dst) {\r\n            dst[12] = m[12];\r\n            dst[13] = m[13];\r\n            dst[14] = m[14];\r\n            dst[15] = m[15];\r\n        }\r\n        return matrix;\r\n    }\r\n    // make a scaling matrix\r\n    static newScaler(sx, sy, sz) {\r\n        return new matrix_Matrix4([sx, 0, 0, 0, 0, sy, 0, 0, 0, 0, sz, 0, 0, 0, 0, 1]);\r\n    }\r\n    /**\r\n     * Multiply by a scaling matrix\r\n     * @param {Matrix4} m matrix to multiply\r\n     * @param {number} sx x scale.\r\n     * @param {number} sy y scale.\r\n     * @param {number} sz z scale.\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     * @memberOf module:webgl-3d-math\r\n     */\r\n    scale(sx, sy, sz) {\r\n        // This is the optimized version of\r\n        // return multiply(m, scaling(sx, sy, sz), dst);\r\n        let matrix = new matrix_Matrix4();\r\n        let dst = matrix.data;\r\n        let m = this.data;\r\n        dst[0] = sx * m[0 * 4 + 0];\r\n        dst[1] = sx * m[0 * 4 + 1];\r\n        dst[2] = sx * m[0 * 4 + 2];\r\n        dst[3] = sx * m[0 * 4 + 3];\r\n        dst[4] = sy * m[1 * 4 + 0];\r\n        dst[5] = sy * m[1 * 4 + 1];\r\n        dst[6] = sy * m[1 * 4 + 2];\r\n        dst[7] = sy * m[1 * 4 + 3];\r\n        dst[8] = sz * m[2 * 4 + 0];\r\n        dst[9] = sz * m[2 * 4 + 1];\r\n        dst[10] = sz * m[2 * 4 + 2];\r\n        dst[11] = sz * m[2 * 4 + 3];\r\n        if (m !== dst) {\r\n            dst[12] = m[12];\r\n            dst[13] = m[13];\r\n            dst[14] = m[14];\r\n            dst[15] = m[15];\r\n        }\r\n        return matrix;\r\n    }\r\n    /**\r\n     * creates a matrix from translation, quaternion, scale\r\n     * @param {Number[]} translation [x, y, z] translation\r\n     * @param {Number[]} quaternion [x, y, z, z] quaternion rotation\r\n     * @param {Number[]} scale [x, y, z] scale\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     */\r\n    newCompose(translation, quaternion, scale) {\r\n        let matrix = new matrix_Matrix4();\r\n        let dst = matrix.data;\r\n        const x = quaternion.x;\r\n        const y = quaternion.y;\r\n        const z = quaternion.z;\r\n        const w = quaternion.w;\r\n        const x2 = x + x;\r\n        const y2 = y + y;\r\n        const z2 = z + z;\r\n        const xx = x * x2;\r\n        const xy = x * y2;\r\n        const xz = x * z2;\r\n        const yy = y * y2;\r\n        const yz = y * z2;\r\n        const zz = z * z2;\r\n        const wx = w * x2;\r\n        const wy = w * y2;\r\n        const wz = w * z2;\r\n        const sx = scale.x;\r\n        const sy = scale.y;\r\n        const sz = scale.z;\r\n        dst[0] = (1 - (yy + zz)) * sx;\r\n        dst[1] = (xy + wz) * sx;\r\n        dst[2] = (xz - wy) * sx;\r\n        dst[3] = 0;\r\n        dst[4] = (xy - wz) * sy;\r\n        dst[5] = (1 - (xx + zz)) * sy;\r\n        dst[6] = (yz + wx) * sy;\r\n        dst[7] = 0;\r\n        dst[8] = (xz + wy) * sz;\r\n        dst[9] = (yz - wx) * sz;\r\n        dst[10] = (1 - (xx + yy)) * sz;\r\n        dst[11] = 0;\r\n        dst[12] = translation.x;\r\n        dst[13] = translation.y;\r\n        dst[14] = translation.z;\r\n        dst[15] = 1;\r\n        return matrix;\r\n    }\r\n    // quatFromRotationMatrix() {\r\n    //     // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\r\n    //     // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n    //     const m11 = m[0];\r\n    //     const m12 = m[4];\r\n    //     const m13 = m[8];\r\n    //     const m21 = m[1];\r\n    //     const m22 = m[5];\r\n    //     const m23 = m[9];\r\n    //     const m31 = m[2];\r\n    //     const m32 = m[6];\r\n    //     const m33 = m[10];\r\n    //     const trace = m11 + m22 + m33;\r\n    //     if (trace > 0) {\r\n    //         const s = 0.5 / Math.sqrt(trace + 1);\r\n    //         dst[3] = 0.25 / s;\r\n    //         dst[0] = (m32 - m23) * s;\r\n    //         dst[1] = (m13 - m31) * s;\r\n    //         dst[2] = (m21 - m12) * s;\r\n    //     } else if (m11 > m22 && m11 > m33) {\r\n    //         const s = 2 * Math.sqrt(1 + m11 - m22 - m33);\r\n    //         dst[3] = (m32 - m23) / s;\r\n    //         dst[0] = 0.25 * s;\r\n    //         dst[1] = (m12 + m21) / s;\r\n    //         dst[2] = (m13 + m31) / s;\r\n    //     } else if (m22 > m33) {\r\n    //         const s = 2 * Math.sqrt(1 + m22 - m11 - m33);\r\n    //         dst[3] = (m13 - m31) / s;\r\n    //         dst[0] = (m12 + m21) / s;\r\n    //         dst[1] = 0.25 * s;\r\n    //         dst[2] = (m23 + m32) / s;\r\n    //     } else {\r\n    //         const s = 2 * Math.sqrt(1 + m33 - m11 - m22);\r\n    //         dst[3] = (m21 - m12) / s;\r\n    //         dst[0] = (m13 + m31) / s;\r\n    //         dst[1] = (m23 + m32) / s;\r\n    //         dst[2] = 0.25 * s;\r\n    //     }\r\n    // }\r\n    // decompose(mat, translation, quaternion, scale) {\r\n    //     let sx = m4.length(mat.slice(0, 3));\r\n    //     const sy = m4.length(mat.slice(4, 7));\r\n    //     const sz = m4.length(mat.slice(8, 11));\r\n    //     // if determinate is negative, we need to invert one scale\r\n    //     const det = determinate(mat);\r\n    //     if (det < 0) {\r\n    //         sx = -sx;\r\n    //     }\r\n    //     translation[0] = mat[12];\r\n    //     translation[1] = mat[13];\r\n    //     translation[2] = mat[14];\r\n    //     // scale the rotation part\r\n    //     const matrix = m4.copy(mat);\r\n    //     const invSX = 1 / sx;\r\n    //     const invSY = 1 / sy;\r\n    //     const invSZ = 1 / sz;\r\n    //     matrix[0] *= invSX;\r\n    //     matrix[1] *= invSX;\r\n    //     matrix[2] *= invSX;\r\n    //     matrix[4] *= invSY;\r\n    //     matrix[5] *= invSY;\r\n    //     matrix[6] *= invSY;\r\n    //     matrix[8] *= invSZ;\r\n    //     matrix[9] *= invSZ;\r\n    //     matrix[10] *= invSZ;\r\n    //     quatFromRotationMatrix(matrix, quaternion);\r\n    //     scale[0] = sx;\r\n    //     scale[1] = sy;\r\n    //     scale[2] = sz;\r\n    // }\r\n    determinate() {\r\n        let m = this.data;\r\n        var m00 = m[0 * 4 + 0];\r\n        var m01 = m[0 * 4 + 1];\r\n        var m02 = m[0 * 4 + 2];\r\n        var m03 = m[0 * 4 + 3];\r\n        var m10 = m[1 * 4 + 0];\r\n        var m11 = m[1 * 4 + 1];\r\n        var m12 = m[1 * 4 + 2];\r\n        var m13 = m[1 * 4 + 3];\r\n        var m20 = m[2 * 4 + 0];\r\n        var m21 = m[2 * 4 + 1];\r\n        var m22 = m[2 * 4 + 2];\r\n        var m23 = m[2 * 4 + 3];\r\n        var m30 = m[3 * 4 + 0];\r\n        var m31 = m[3 * 4 + 1];\r\n        var m32 = m[3 * 4 + 2];\r\n        var m33 = m[3 * 4 + 3];\r\n        var tmp_0 = m22 * m33;\r\n        var tmp_1 = m32 * m23;\r\n        var tmp_2 = m12 * m33;\r\n        var tmp_3 = m32 * m13;\r\n        var tmp_4 = m12 * m23;\r\n        var tmp_5 = m22 * m13;\r\n        var tmp_6 = m02 * m33;\r\n        var tmp_7 = m32 * m03;\r\n        var tmp_8 = m02 * m23;\r\n        var tmp_9 = m22 * m03;\r\n        var tmp_10 = m02 * m13;\r\n        var tmp_11 = m12 * m03;\r\n        var t0 = tmp_0 * m11 + tmp_3 * m21 + tmp_4 * m31 - (tmp_1 * m11 + tmp_2 * m21 + tmp_5 * m31);\r\n        var t1 = tmp_1 * m01 + tmp_6 * m21 + tmp_9 * m31 - (tmp_0 * m01 + tmp_7 * m21 + tmp_8 * m31);\r\n        var t2 = tmp_2 * m01 + tmp_7 * m11 + tmp_10 * m31 - (tmp_3 * m01 + tmp_6 * m11 + tmp_11 * m31);\r\n        var t3 = tmp_5 * m01 + tmp_8 * m11 + tmp_11 * m21 - (tmp_4 * m01 + tmp_9 * m11 + tmp_10 * m21);\r\n        return 1.0 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\r\n    }\r\n    inverse() {\r\n        let matrix = new matrix_Matrix4();\r\n        let dst = matrix.data;\r\n        let m = this.data;\r\n        var m00 = m[0 * 4 + 0];\r\n        var m01 = m[0 * 4 + 1];\r\n        var m02 = m[0 * 4 + 2];\r\n        var m03 = m[0 * 4 + 3];\r\n        var m10 = m[1 * 4 + 0];\r\n        var m11 = m[1 * 4 + 1];\r\n        var m12 = m[1 * 4 + 2];\r\n        var m13 = m[1 * 4 + 3];\r\n        var m20 = m[2 * 4 + 0];\r\n        var m21 = m[2 * 4 + 1];\r\n        var m22 = m[2 * 4 + 2];\r\n        var m23 = m[2 * 4 + 3];\r\n        var m30 = m[3 * 4 + 0];\r\n        var m31 = m[3 * 4 + 1];\r\n        var m32 = m[3 * 4 + 2];\r\n        var m33 = m[3 * 4 + 3];\r\n        var tmp_0 = m22 * m33;\r\n        var tmp_1 = m32 * m23;\r\n        var tmp_2 = m12 * m33;\r\n        var tmp_3 = m32 * m13;\r\n        var tmp_4 = m12 * m23;\r\n        var tmp_5 = m22 * m13;\r\n        var tmp_6 = m02 * m33;\r\n        var tmp_7 = m32 * m03;\r\n        var tmp_8 = m02 * m23;\r\n        var tmp_9 = m22 * m03;\r\n        var tmp_10 = m02 * m13;\r\n        var tmp_11 = m12 * m03;\r\n        var tmp_12 = m20 * m31;\r\n        var tmp_13 = m30 * m21;\r\n        var tmp_14 = m10 * m31;\r\n        var tmp_15 = m30 * m11;\r\n        var tmp_16 = m10 * m21;\r\n        var tmp_17 = m20 * m11;\r\n        var tmp_18 = m00 * m31;\r\n        var tmp_19 = m30 * m01;\r\n        var tmp_20 = m00 * m21;\r\n        var tmp_21 = m20 * m01;\r\n        var tmp_22 = m00 * m11;\r\n        var tmp_23 = m10 * m01;\r\n        var t0 = tmp_0 * m11 + tmp_3 * m21 + tmp_4 * m31 - (tmp_1 * m11 + tmp_2 * m21 + tmp_5 * m31);\r\n        var t1 = tmp_1 * m01 + tmp_6 * m21 + tmp_9 * m31 - (tmp_0 * m01 + tmp_7 * m21 + tmp_8 * m31);\r\n        var t2 = tmp_2 * m01 + tmp_7 * m11 + tmp_10 * m31 - (tmp_3 * m01 + tmp_6 * m11 + tmp_11 * m31);\r\n        var t3 = tmp_5 * m01 + tmp_8 * m11 + tmp_11 * m21 - (tmp_4 * m01 + tmp_9 * m11 + tmp_10 * m21);\r\n        var d = 1.0 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\r\n        dst[0] = d * t0;\r\n        dst[1] = d * t1;\r\n        dst[2] = d * t2;\r\n        dst[3] = d * t3;\r\n        dst[4] =\r\n            d *\r\n                (tmp_1 * m10 + tmp_2 * m20 + tmp_5 * m30 - (tmp_0 * m10 + tmp_3 * m20 + tmp_4 * m30));\r\n        dst[5] =\r\n            d *\r\n                (tmp_0 * m00 + tmp_7 * m20 + tmp_8 * m30 - (tmp_1 * m00 + tmp_6 * m20 + tmp_9 * m30));\r\n        dst[6] =\r\n            d *\r\n                (tmp_3 * m00 + tmp_6 * m10 + tmp_11 * m30 - (tmp_2 * m00 + tmp_7 * m10 + tmp_10 * m30));\r\n        dst[7] =\r\n            d *\r\n                (tmp_4 * m00 + tmp_9 * m10 + tmp_10 * m20 - (tmp_5 * m00 + tmp_8 * m10 + tmp_11 * m20));\r\n        dst[8] =\r\n            d *\r\n                (tmp_12 * m13 +\r\n                    tmp_15 * m23 +\r\n                    tmp_16 * m33 -\r\n                    (tmp_13 * m13 + tmp_14 * m23 + tmp_17 * m33));\r\n        dst[9] =\r\n            d *\r\n                (tmp_13 * m03 +\r\n                    tmp_18 * m23 +\r\n                    tmp_21 * m33 -\r\n                    (tmp_12 * m03 + tmp_19 * m23 + tmp_20 * m33));\r\n        dst[10] =\r\n            d *\r\n                (tmp_14 * m03 +\r\n                    tmp_19 * m13 +\r\n                    tmp_22 * m33 -\r\n                    (tmp_15 * m03 + tmp_18 * m13 + tmp_23 * m33));\r\n        dst[11] =\r\n            d *\r\n                (tmp_17 * m03 +\r\n                    tmp_20 * m13 +\r\n                    tmp_23 * m23 -\r\n                    (tmp_16 * m03 + tmp_21 * m13 + tmp_22 * m23));\r\n        dst[12] =\r\n            d *\r\n                (tmp_14 * m22 +\r\n                    tmp_17 * m32 +\r\n                    tmp_13 * m12 -\r\n                    (tmp_16 * m32 + tmp_12 * m12 + tmp_15 * m22));\r\n        dst[13] =\r\n            d *\r\n                (tmp_20 * m32 +\r\n                    tmp_12 * m02 +\r\n                    tmp_19 * m22 -\r\n                    (tmp_18 * m22 + tmp_21 * m32 + tmp_13 * m02));\r\n        dst[14] =\r\n            d *\r\n                (tmp_18 * m12 +\r\n                    tmp_23 * m32 +\r\n                    tmp_15 * m02 -\r\n                    (tmp_22 * m32 + tmp_14 * m02 + tmp_19 * m12));\r\n        dst[15] =\r\n            d *\r\n                (tmp_22 * m22 +\r\n                    tmp_16 * m02 +\r\n                    tmp_21 * m12 -\r\n                    (tmp_20 * m12 + tmp_23 * m22 + tmp_17 * m02));\r\n        return matrix;\r\n    }\r\n    multiplyVector(v) {\r\n        let data = new Array(3);\r\n        for (var i = 0; i < 3; ++i) {\r\n            data[i] = 0.0;\r\n            for (var j = 0; j < 4; ++j) {\r\n                data[i] += v.item(j) * this.get(j, i);\r\n            }\r\n        }\r\n        return new vector_Vector3(data[0], data[1], data[2]);\r\n    }\r\n    multiplyVectors(other) {\r\n        // dumb way\r\n        for (let i = 0; i < this.count(); i++) {\r\n            let vec = other.getVector(i);\r\n            vec = this.multiplyVector(vec);\r\n            other.setVector(i, vec);\r\n        }\r\n        return other;\r\n        // smart way\r\n        // let matrix = new Vector3Array(other.count());\r\n        // // for every row\r\n        // for (var r = 0; r < other.count(); r++) {\r\n        //     // for every item in row\r\n        //     for (var c = 0; c < 3; ++c) {\r\n        //         let item = 0.0;\r\n        //         for (var j = 0; j < 4; ++j) {\r\n        //             item += other.get(r, c) * this.get(j, c);\r\n        //         }\r\n        //         matrix.set(r, c, item);\r\n        //     }\r\n        // }\r\n        // other.data = matrix.data;\r\n        return other;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/math/util.ts\nclass Util {\r\n    static range(n) {\r\n        let array = [];\r\n        for (let i = 0; i < n; i++) {\r\n            array.push(i);\r\n        }\r\n        return array;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/math/vector.ts\n// author: \tJos Feenstra\r\n// inspiration from Three.js\r\n// note: \trecycle the class as much as possble, building a new class is expensive,\r\n// \t\t\tespecially in javascript\r\n// todo: \tBIJ NADER INZIEN: dont go the copy route. rewrite this in a more functional way creating new classes is expensive, but we really need immutable vectors.\r\n// \t\t\tthese types of consistent vectors are only useful in niche cases, and complitate a lot of common cases.\r\n\r\n\r\n\r\n\r\nclass vector_Vector3 {\r\n    // #region constructors\r\n    constructor(x, y, z) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n    }\r\n    static new(x, y, z) {\r\n        return new vector_Vector3(x, y, z);\r\n    }\r\n    static calculateWheelOrder(vectors, ihat, jhat) {\r\n        // console.log("wheel order");\r\n        // console.log("hats", ihat, jhat)\r\n        let angles = [];\r\n        vectors.forEach((v) => {\r\n            angles.push(new vector_Vector2(v.dot(ihat), v.dot(jhat)).angle());\r\n        });\r\n        // console.log("angles", angles);\r\n        let ids = Util.range(vectors.length);\r\n        ids.sort((a, b) => {\r\n            return angles[a] - angles[b];\r\n        });\r\n        return ids;\r\n    }\r\n    static fromLerp(v1, v2, alpha) {\r\n        return new vector_Vector3(v1.x + (v2.x - v1.x) * alpha, v1.y + (v2.y - v1.y) * alpha, v1.z + (v2.z - v1.z) * alpha);\r\n    }\r\n    static fromArray(a) {\r\n        return new vector_Vector3(a[0], a[1], a[2]);\r\n    }\r\n    static fromRandom() {\r\n        return new vector_Vector3(Math.random(), Math.random(), Math.random());\r\n    }\r\n    static fromSphere(radius, theta, phi) {\r\n        const sinPhiRadius = Math.sin(phi) * radius;\r\n        return this.constructor(sinPhiRadius * Math.sin(theta), Math.cos(phi) * radius, sinPhiRadius * Math.cos(theta));\r\n    }\r\n    static fromCylinder(radius, theta, height) {\r\n        return this.constructor(radius * Math.sin(theta), height, radius * Math.cos(theta));\r\n    }\r\n    static fromLerpWeights(p1, p2, tP1, tP2, t) {\r\n        if (Math.abs(t - tP1) < 0.00001)\r\n            return p1;\r\n        if (Math.abs(t - tP2) < 0.00001)\r\n            return p2;\r\n        if (Math.abs(tP1 - tP2) < 0.00001)\r\n            return p1;\r\n        let mu = (t - tP1) / (tP2 - tP1);\r\n        return new vector_Vector3(p1.x + mu * (p2.x - p1.x), p1.y + mu * (p2.y - p1.y), p1.z + mu * (p2.z - p1.z));\r\n    }\r\n    // #endregion\r\n    // #region defaults\r\n    static zero() {\r\n        return new vector_Vector3(0, 0, 0);\r\n    }\r\n    static unitX() {\r\n        return new vector_Vector3(1, 0, 0);\r\n    }\r\n    static unitY() {\r\n        return new vector_Vector3(0, 1, 0);\r\n    }\r\n    static unitZ() {\r\n        return new vector_Vector3(0, 0, 1);\r\n    }\r\n    // #endregion\r\n    // #region basics\r\n    toArray() {\r\n        return new Float32Array([this.x, this.y, this.z]);\r\n    }\r\n    set(x, y, z) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n        return this;\r\n    }\r\n    equals(v) {\r\n        return v.x === this.x && v.y === this.y && v.z === this.z;\r\n    }\r\n    toString() {\r\n        return `Vector3(${this.x}, ${this.y}, ${this.z})`;\r\n    }\r\n    toVector2() {\r\n        return new vector_Vector2(this.x, this.y);\r\n    }\r\n    clone() {\r\n        return new vector_Vector3(this.x, this.y, this.z);\r\n    }\r\n    copy(v) {\r\n        this.x = v.x;\r\n        this.y = v.y;\r\n        this.z = v.z;\r\n        return this;\r\n    }\r\n    to2D() {\r\n        return new vector_Vector2(this.x, this.y);\r\n    }\r\n    // #endregion\r\n    // #region math like vector2\r\n    largestValue() {\r\n        return Math.max(this.x, this.y, this.z);\r\n    }\r\n    added(v) {\r\n        return new vector_Vector3(this.x + v.x, this.y + v.y, this.z + v.z);\r\n    }\r\n    add(v) {\r\n        this.x += v.x;\r\n        this.y += v.y;\r\n        this.z += v.z;\r\n        return this;\r\n    }\r\n    subbed(v) {\r\n        return new vector_Vector3(this.x - v.x, this.y - v.y, this.z - v.z);\r\n    }\r\n    sub(v) {\r\n        (this.x -= v.x), (this.y -= v.y), (this.z -= v.z);\r\n        return this;\r\n    }\r\n    item(i) {\r\n        switch (i) {\r\n            case 0:\r\n                return this.x;\r\n            case 1:\r\n                return this.y;\r\n            case 2:\r\n                return this.z;\r\n            case 3:\r\n                return 1;\r\n            default:\r\n                throw "nope";\r\n        }\r\n    }\r\n    scaled(v) {\r\n        return new vector_Vector3(this.x * v, this.y * v, this.z * v);\r\n    }\r\n    scale(v) {\r\n        this.x *= v;\r\n        this.y *= v;\r\n        this.z *= v;\r\n        return this;\r\n    }\r\n    mul(v) {\r\n        this.x *= v.x;\r\n        this.y *= v.y;\r\n        this.z *= v.z;\r\n        return this;\r\n    }\r\n    multiplied(v) {\r\n        return new vector_Vector3(this.x * v.x, this.y * v.y, this.z * v.z);\r\n    }\r\n    divVector(v) {\r\n        return new vector_Vector3(this.x / v.x, this.y / v.y, this.z / v.z);\r\n    }\r\n    divided(value) {\r\n        return new vector_Vector3(this.x / value, this.y / value, this.z / value);\r\n    }\r\n    div(value) {\r\n        (this.x /= value), (this.y /= value), (this.z /= value);\r\n        return this;\r\n    }\r\n    minimumed(other) {\r\n        return new vector_Vector3(Math.min(this.x, other.x), Math.min(this.y, other.y), Math.min(this.z, other.z));\r\n    }\r\n    maximumed(other) {\r\n        return new vector_Vector3(Math.max(this.x, other.x), Math.max(this.y, other.y), Math.max(this.z, other.z));\r\n    }\r\n    clamped(min, max) {\r\n        return new vector_Vector3(Math.max(min.x, Math.min(max.x, this.x)), Math.max(min.y, Math.min(max.y, this.y)), Math.max(min.z, Math.min(max.z, this.z)));\r\n    }\r\n    clampScalared(min, max) {\r\n        return new vector_Vector3(GeonMath.clamp(this.x, min, max), GeonMath.clamp(this.y, min, max), GeonMath.clamp(this.z, min, max));\r\n    }\r\n    clampLengthed(min, max) {\r\n        const length = this.length();\r\n        return this.div(length || 1).scale(Math.max(min, Math.min(max, length)));\r\n    }\r\n    floored() {\r\n        return new vector_Vector3(Math.floor(this.x), Math.floor(this.y), Math.floor(this.z));\r\n    }\r\n    ceiled() {\r\n        return new vector_Vector3(Math.ceil(this.x), Math.ceil(this.y), Math.ceil(this.z));\r\n    }\r\n    rounded() {\r\n        return new vector_Vector3(Math.round(this.x), Math.round(this.y), Math.round(this.z));\r\n    }\r\n    roundedToZero() {\r\n        return new vector_Vector3(this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x), this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y), this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z));\r\n    }\r\n    negate() {\r\n        this.x = -this.x;\r\n        this.y = -this.y;\r\n        this.z = -this.z;\r\n        return this;\r\n    }\r\n    negated() {\r\n        return new vector_Vector3(-this.x, -this.y, -this.z);\r\n    }\r\n    angle(other, normal) {\r\n        let thisProjected = this.subbed(normal.scaled(this.dot(normal)));\r\n        let otherProjected = other.subbed(normal.scaled(other.dot(normal)));\r\n        console.log(thisProjected);\r\n        console.log(otherProjected);\r\n        return 0;\r\n    }\r\n    dot(v) {\r\n        return this.x * v.x + this.y * v.y + this.z * v.z;\r\n    }\r\n    cross(other) {\r\n        const ax = this.x, ay = this.y, az = this.z;\r\n        const bx = other.x, by = other.y, bz = other.z;\r\n        return new vector_Vector3(ay * bz - az * by, az * bx - ax * bz, ax * by - ay * bx);\r\n    }\r\n    getLengthSquared() {\r\n        return this.x * this.x + this.y * this.y + this.z * this.z;\r\n    }\r\n    length() {\r\n        return Math.sqrt(this.getLengthSquared());\r\n    }\r\n    manhat() {\r\n        return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);\r\n    }\r\n    normalize() {\r\n        return this.div(this.length() || 1);\r\n    }\r\n    normalized() {\r\n        return this.divided(this.length() || 1);\r\n    }\r\n    isNormal() {\r\n        return Math.abs(this.length() - 1) < const_Const.TOLERANCE;\r\n    }\r\n    disTo(v) {\r\n        return Math.sqrt(this.disToSquared(v));\r\n    }\r\n    disToSquared(v) {\r\n        const dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\r\n        return dx * dx + dy * dy + dz * dz;\r\n    }\r\n    disToManhat(v) {\r\n        return Math.abs(this.x - v.x) + Math.abs(this.y - v.y) + Math.abs(this.z - v.z);\r\n    }\r\n    setLength(length) {\r\n        return this.normalize().scale(length);\r\n    }\r\n    lerp(other, alpha) {\r\n        return new vector_Vector3((other.x - this.x) * alpha, (other.y - this.y) * alpha, (other.z - this.z) * alpha);\r\n    }\r\n    // #endregion\r\n    // #region math specific\r\n    projectOnVector(other) {\r\n        // use dot product to project this vector on the other vector\r\n        const denominator = other.getLengthSquared();\r\n        if (denominator === 0)\r\n            return this.set(0, 0, 0);\r\n        const scalar = other.dot(this) / denominator;\r\n        return this.copy(other).scale(scalar);\r\n    }\r\n    projectedOnPlane(normal) {\r\n        // project a vector\r\n        _vector.copy(this).projectOnVector(normal);\r\n        return this.minimumed(_vector);\r\n    }\r\n    mirrored(normal) {\r\n        // mirror incident vector off plane orthogonal to normal\r\n        // normal is assumed to have unit length\r\n        return this.minimumed(_vector.copy(normal).scale(2 * this.dot(normal)));\r\n    }\r\n    rotated(axis, angle) {\r\n        let mat = matrix_Matrix4.newAxisRotation(axis, angle);\r\n        return mat.multiplyVector(this);\r\n    }\r\n}\r\nconst _vector = new vector_Vector3(0, 0, 0);\r\nclass vector_Vector2 {\r\n    constructor(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    // --- factories & other statics\r\n    static fromArray(a) {\r\n        return new vector_Vector2(a[0], a[1]);\r\n    }\r\n    static fromLerp(v1, v2, alpha) {\r\n        return new vector_Vector2(v1.x + (v2.x - v1.x) * alpha, v1.y + (v2.y - v1.y) * alpha);\r\n    }\r\n    static fromRandom() {\r\n        return new vector_Vector2(Math.random(), Math.random());\r\n    }\r\n    static fromRandomAngle() {\r\n        let alpha = Math.random() * Math.PI * 2;\r\n        return new vector_Vector2(Math.cos(alpha), Math.sin(alpha));\r\n    }\r\n    // static from2Pt(from: Vector2, to: Vector2) : Vector2 {\r\n    // \treturn new Vector2(\r\n    // \t\tfrom.x - to.x,\r\n    // \t\tfrom.y - to.y\r\n    // \t)\r\n    // }\r\n    static fromCircle(center, radius, theta) {\r\n        return new vector_Vector2(center.x + radius * Math.sin(theta), center.y + radius * Math.cos(theta));\r\n    }\r\n    static fromCopy(other) {\r\n        return this.zero().copy(other);\r\n    }\r\n    static zero() {\r\n        return new vector_Vector2(0, 0);\r\n    }\r\n    static NaN() {\r\n        return new vector_Vector2(NaN, NaN);\r\n    }\r\n    static fromCircumcenter(a, b, c) {\r\n        const asum = a.squareSum();\r\n        const bsum = b.squareSum();\r\n        const csum = c.squareSum();\r\n        // sort of cross product\r\n        let d = 2 * (a.x * (b.y - c.y) + b.x * (c.y - a.y) + c.x * (a.y - b.y));\r\n        // if this triangle has no circumcenter?\r\n        if (d < 0.000001)\r\n            return vector_Vector2.NaN();\r\n        let x = (asum * (b.y - c.y) + bsum * (c.y - a.y) + csum * (a.y - b.y)) / d;\r\n        let y = (asum * (c.x - b.x) + bsum * (a.x - c.x) + csum * (b.x - a.x)) / d;\r\n        return new vector_Vector2(x, y);\r\n    }\r\n    static getSign(a, b, c) {\r\n        // test half plane relationship\r\n        // <0 : point on first half\r\n        // 0  : points collinear\r\n        // >0 : point on second half\r\n        return (a.x - c.x) * (b.y - c.y) - (b.x - c.x) * (a.y - c.y);\r\n    }\r\n    // --- basics\r\n    to3D() {\r\n        return new vector_Vector3(this.x, this.y, 0);\r\n    }\r\n    set(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n        return this;\r\n    }\r\n    roughlyEquals(v, tol) {\r\n        return Math.abs(this.x - v.x) < tol && Math.abs(this.y - v.y) < tol;\r\n    }\r\n    equals(v) {\r\n        return v.x === this.x && v.y === this.y;\r\n    }\r\n    toString() {\r\n        return `Vector2(${this.x}, ${this.y})`;\r\n    }\r\n    clone() {\r\n        return new vector_Vector2(this.x, this.y);\r\n    }\r\n    copy(v) {\r\n        this.x = v.x;\r\n        this.y = v.y;\r\n        return this;\r\n    }\r\n    // --- math\r\n    add(v) {\r\n        this.x += v.x;\r\n        this.y += v.y;\r\n        return this;\r\n    }\r\n    added(v) {\r\n        return new vector_Vector2(this.x + v.x, this.y + v.y);\r\n    }\r\n    addn(arg0, arg1) {\r\n        this.x += arg0;\r\n        this.y += arg1;\r\n        return this;\r\n    }\r\n    sub(v) {\r\n        this.x -= v.x;\r\n        this.y -= v.y;\r\n        return this;\r\n    }\r\n    subbed(v) {\r\n        return new vector_Vector2(this.x - v.x, this.y - v.y);\r\n    }\r\n    mul(v) {\r\n        this.x *= v.x;\r\n        this.y *= v.y;\r\n        return this;\r\n    }\r\n    scale(v) {\r\n        this.x *= v;\r\n        this.y *= v;\r\n        return this;\r\n    }\r\n    scaled(v) {\r\n        return new vector_Vector2(this.x * v, this.y * v);\r\n    }\r\n    divVector(v) {\r\n        this.x /= v.x;\r\n        this.y /= v.y;\r\n        return this;\r\n    }\r\n    div(v) {\r\n        this.x /= v;\r\n        this.y /= v;\r\n        return this;\r\n    }\r\n    dived(v) {\r\n        return new vector_Vector2(this.x / v, this.y / v);\r\n    }\r\n    minimum(other) {\r\n        this.x = Math.min(this.x, other.x);\r\n        this.y = Math.min(this.y, other.y);\r\n        return this;\r\n    }\r\n    maximum(other) {\r\n        this.x = Math.max(this.x, other.x);\r\n        this.y = Math.max(this.y, other.y);\r\n        return this;\r\n    }\r\n    clamp(min, max) {\r\n        // assumes min < max, componentwise\r\n        this.x = Math.max(min.x, Math.min(max.x, this.x));\r\n        this.y = Math.max(min.y, Math.min(max.y, this.y));\r\n        return this;\r\n    }\r\n    clampScalar(minVal, maxVal) {\r\n        this.x = Math.max(minVal, Math.min(maxVal, this.x));\r\n        this.y = Math.max(minVal, Math.min(maxVal, this.y));\r\n        return this;\r\n    }\r\n    clampLength(min, max) {\r\n        const length = this.length();\r\n        return this.div(length || 1).scale(Math.max(min, Math.min(max, length)));\r\n    }\r\n    floor() {\r\n        this.x = Math.floor(this.x);\r\n        this.y = Math.floor(this.y);\r\n        return this;\r\n    }\r\n    ceil() {\r\n        this.x = Math.ceil(this.x);\r\n        this.y = Math.ceil(this.y);\r\n        return this;\r\n    }\r\n    round() {\r\n        this.x = Math.round(this.x);\r\n        this.y = Math.round(this.y);\r\n        return this;\r\n    }\r\n    roundToZero() {\r\n        this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\r\n        this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\r\n        return this;\r\n    }\r\n    negate() {\r\n        this.x = -this.x;\r\n        this.y = -this.y;\r\n        return this;\r\n    }\r\n    dot(v) {\r\n        return this.x * v.x + this.y * v.y;\r\n    }\r\n    cross(v) {\r\n        return this.x * v.y - this.y * v.x; // ????\r\n    }\r\n    squareSum() {\r\n        return this.x * this.x + this.y * this.y;\r\n    }\r\n    length() {\r\n        return Math.sqrt(this.lengthSquared());\r\n    }\r\n    lengthSquared() {\r\n        return this.x * this.x + this.y * this.y;\r\n    }\r\n    manhat() {\r\n        return Math.abs(this.x) + Math.abs(this.y);\r\n    }\r\n    normalize() {\r\n        return this.div(this.length() || 1);\r\n    }\r\n    normalized() {\r\n        return this.dived(this.length() || 1);\r\n    }\r\n    angle() {\r\n        // computes the angle in radians with respect to the positive x-axis\r\n        const angle = Math.atan2(-this.y, -this.x) + Math.PI;\r\n        return angle;\r\n    }\r\n    disTo(v) {\r\n        return Math.sqrt(this.disToSquared(v));\r\n    }\r\n    disToSquared(v) {\r\n        let dx = this.x - v.x;\r\n        let dy = this.y - v.y;\r\n        return dx * dx + dy * dy;\r\n    }\r\n    disToManhat(v) {\r\n        return Math.abs(this.x - v.x) + Math.abs(this.y - v.y);\r\n    }\r\n    setLength(length) {\r\n        return this.normalize().scale(length);\r\n    }\r\n    lerp(other, alpha) {\r\n        return new vector_Vector2(this.x + (other.x - this.x) * alpha, this.y + (other.y - this.y) * alpha);\r\n    }\r\n    // calculate the \'triangle sign\' of three points. Can be used to determine clockwise & counter clockwise\r\n    sign(b, c) {\r\n        return (this.x - c.x) * (b.y - c.y) - (b.x - c.x) * (this.y - c.y);\r\n    }\r\n    // use dot product to project this vector on the other vector\r\n    projectOnVector(other) {\r\n        const denominator = other.lengthSquared();\r\n        if (denominator === 0)\r\n            return this.set(0, 0);\r\n        const scalar = other.dot(this) / denominator;\r\n        return this.copy(other).scale(scalar);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/data/vector-array.ts\n// name:    array.ts\r\n// author:  Jos Feenstra\r\n// purpose: Small wrapper around Float32Array / FloatMatrix to add interoperability with Vector2 & Vector3,\r\n//          while remaining a datastructure thats easy to pass over to webgl\r\n//\r\n// NOTE:    all these small wrappers might not be good pratice, but I\r\n//          like to extract simple logic like this to not clutter the code too much\r\n\r\n\r\nclass vector_array_Vector2Array extends float_matrix_FloatMatrix {\r\n    constructor(count) {\r\n        super(count, 2);\r\n    }\r\n    static fromList(vecs) {\r\n        let length = vecs.length;\r\n        let array = new vector_array_Vector2Array(length);\r\n        for (let i = 0; i < vecs.length; i++) {\r\n            array.data[i * 2] = vecs[i].x;\r\n            array.data[i * 2 + 1] = vecs[i].y;\r\n        }\r\n        return array;\r\n    }\r\n    forEach(callbackfn) {\r\n        for (let i = 0; i < this.count(); i++) {\r\n            let vec = this.getVector(i);\r\n            callbackfn(vec, i);\r\n            this.setVector(i, vec);\r\n        }\r\n        return this;\r\n    }\r\n    map(callbackfn) {\r\n        let clone = this.clone();\r\n        for (let i = 0; i < this.count(); i++) {\r\n            let vec = this.getVector(i);\r\n            let result = callbackfn(vec, i);\r\n            if (result instanceof vector_Vector2) {\r\n                clone.setVector(i, result);\r\n            }\r\n            else {\r\n                clone.setVector(i, vec);\r\n            }\r\n        }\r\n        return clone;\r\n    }\r\n    setVector(i, vec) {\r\n        this.data[i * this._width + 0] = vec.x;\r\n        this.data[i * this._width + 1] = vec.y;\r\n    }\r\n    getVector(i) {\r\n        return new vector_Vector2(this.data[i * this._width + 0], this.data[i * this._width + 1]);\r\n    }\r\n    toList() {\r\n        let vecs = [];\r\n        for (let i = 0; i < this._height; i++) {\r\n            vecs.push(this.getVector(i));\r\n        }\r\n        return vecs;\r\n    }\r\n    to3D() {\r\n        let array = new vector_array_Vector3Array(this.count());\r\n        for (let i = 0; i < this.count(); i++) {\r\n            let row = this.getRow(i);\r\n            array.setRow(i, [row[0], row[1], 0]);\r\n        }\r\n        return array;\r\n    }\r\n    clone() {\r\n        let clone = new vector_array_Vector2Array(this._height);\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            clone.data[i] = this.data[i];\r\n        }\r\n        return clone;\r\n    }\r\n}\r\nclass vector_array_Vector3Array extends float_matrix_FloatMatrix {\r\n    constructor(count) {\r\n        super(count, 3);\r\n    }\r\n    static fromList(vecs) {\r\n        let length = vecs.length;\r\n        let array = new vector_array_Vector3Array(length);\r\n        for (let i = 0; i < vecs.length; i++) {\r\n            array.data[i * 3] = vecs[i].x;\r\n            array.data[i * 3 + 1] = vecs[i].y;\r\n            array.data[i * 3 + 2] = vecs[i].z;\r\n        }\r\n        return array;\r\n    }\r\n    static fromNative(native) {\r\n        // assume all subarrays have the same shape!!\r\n        let height = native.length;\r\n        let matrix = new vector_array_Vector3Array(height);\r\n        for (var i = 0; i < native.length; i++) {\r\n            for (var j = 0; j < native[0].length; j++) {\r\n                matrix.set(i, j, native[i][j]);\r\n            }\r\n        }\r\n        return matrix;\r\n    }\r\n    fillFromList(vecs) {\r\n        for (let i = 0; i < vecs.length; i++) {\r\n            this.data[i * 3] = vecs[i].x;\r\n            this.data[i * 3 + 1] = vecs[i].y;\r\n            this.data[i * 3 + 2] = vecs[i].z;\r\n        }\r\n    }\r\n    forEach(callbackfn) {\r\n        for (let i = 0; i < this.count(); i++) {\r\n            let vec = this.getVector(i);\r\n            vec = callbackfn(vec, i);\r\n            if (vec instanceof vector_Vector3) {\r\n                this.setVector(i, vec);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    take(indices) {\r\n        // create a new floatarray\r\n        const count = indices.length;\r\n        let array = new vector_array_Vector3Array(count);\r\n        for (let i = 0; i < count; i++) {\r\n            let getIndex = indices[i];\r\n            array.setVector(i, this.getVector(getIndex));\r\n        }\r\n        return array;\r\n    }\r\n    map(callbackfn) {\r\n        let clone = this.clone();\r\n        for (let i = 0; i < this.count(); i++) {\r\n            let vec = this.getVector(i);\r\n            let result = callbackfn(vec, i);\r\n            if (result instanceof vector_Vector3) {\r\n                clone.setVector(i, result);\r\n            }\r\n            else {\r\n                clone.setVector(i, vec);\r\n            }\r\n        }\r\n        return clone;\r\n    }\r\n    mapWith(other, callback) {\r\n        return super.mapWith(other, callback);\r\n    }\r\n    setVector(i, vec) {\r\n        this.data[i * this._width + 0] = vec.x;\r\n        this.data[i * this._width + 1] = vec.y;\r\n        this.data[i * this._width + 2] = vec.z;\r\n    }\r\n    getVector(i) {\r\n        return new vector_Vector3(this.data[i * this._width + 0], this.data[i * this._width + 1], this.data[i * this._width + 2]);\r\n    }\r\n    toList() {\r\n        let vecs = [];\r\n        for (let i = 0; i < this._height; i++) {\r\n            vecs.push(this.getVector(i));\r\n        }\r\n        return vecs;\r\n    }\r\n    transform(m) {\r\n        // THIS CAN BE SPEED UP: BOTH MATRIX 4 & VECTOR3ARRAY ARE JUST FLOAT-MATRICES\r\n        for (let i = 0; i < this._height; i++) {\r\n            let vec = this.getVector(i);\r\n            vec = m.multiplyVector(vec);\r\n            this.setVector(i, vec);\r\n        }\r\n        // this.data = m.MultiplyM(this).data;\r\n        return this;\r\n    }\r\n    to2D() {\r\n        let clone = new vector_array_Vector2Array(this._height);\r\n        for (let i = 0; i < this._height; i++) {\r\n            for (let j = 0; j < 2; j++) {\r\n                clone.set(i, j, this.get(i, j));\r\n            }\r\n        }\r\n        return clone;\r\n    }\r\n    clone() {\r\n        let clone = new vector_array_Vector3Array(this._height);\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            clone.data[i] = this.data[i];\r\n        }\r\n        return clone;\r\n    }\r\n    mean() {\r\n        // the mean vector of a series of vectors\r\n        let sum = vector_Vector3.zero();\r\n        let count = this.count();\r\n        for (let i = 0; i < count; i++) {\r\n            sum.x += this.data[i * 3];\r\n            sum.y += this.data[i * 3 + 1];\r\n            sum.z += this.data[i * 3 + 2];\r\n        }\r\n        return sum.scale(1 / count);\r\n    }\r\n    average() {\r\n        return this.mean();\r\n    }\r\n    closestId(point) {\r\n        let lowScore = Infinity;\r\n        let id = -1;\r\n        this.forEach((v, i) => {\r\n            let disSquared = point.disToSquared(v);\r\n            if (disSquared < lowScore) {\r\n                lowScore = disSquared;\r\n                id = i;\r\n            }\r\n        });\r\n        return id;\r\n    }\r\n    closestIds(point, n) {\r\n        // O(m*n)... TODO implement quicksort\r\n        let ids = [];\r\n        for (let i = 0; i < n; i++) {\r\n            let lowScore = Infinity;\r\n            let id = -1;\r\n            this.forEach((v, i) => {\r\n                if (ids.includes(id))\r\n                    return;\r\n                let disSquared = point.disToSquared(v);\r\n                if (disSquared < lowScore) {\r\n                    lowScore = disSquared;\r\n                    id = i;\r\n                }\r\n            });\r\n            ids.push(id);\r\n        }\r\n        return ids;\r\n    }\r\n}\r\n// TODO : to FloatMatrix\r\nfunction vector_array_getGeneralFloatMatrix(vectors) {\r\n    if (vectors instanceof vector_array_Vector2Array) {\r\n        return vectors;\r\n    }\r\n    else if (vectors instanceof vector_array_Vector3Array) {\r\n        return vectors;\r\n    }\r\n    else if (vectors[0] instanceof vector_Vector2) {\r\n        return vector_array_Vector2Array.fromList(vectors);\r\n    }\r\n    else {\r\n        return vector_array_Vector3Array.fromList(vectors);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/mesh/render-mesh.ts\n// Name: render-mesh.ts\r\n// Author: Jos Feenstra\r\n// Purpose:\r\n// a mesh representation with the sole purpose of to be renderer.\r\n// - fixed length attributes\r\n// - can represent:\r\n//   - pointcloud (links = null)\r\n//   - graph (links.width = 2)\r\n//   - triangles (links.width = 3)\r\n//   - quads (links.width = 4. will need to be converted to triangles)\r\n\r\n\r\n\r\nvar MeshType;\r\n(function (MeshType) {\r\n    MeshType[MeshType["Invalid"] = 0] = "Invalid";\r\n    MeshType[MeshType["Points"] = 1] = "Points";\r\n    MeshType[MeshType["Lines"] = 2] = "Lines";\r\n    MeshType[MeshType["Triangles"] = 3] = "Triangles";\r\n    MeshType[MeshType["Quads"] = 4] = "Quads";\r\n})(MeshType || (MeshType = {}));\r\nvar render_mesh_NormalKind;\r\n(function (NormalKind) {\r\n    NormalKind[NormalKind["None"] = 0] = "None";\r\n    NormalKind[NormalKind["Vertex"] = 1] = "Vertex";\r\n    NormalKind[NormalKind["Face"] = 2] = "Face";\r\n    NormalKind[NormalKind["MultiVertex"] = 3] = "MultiVertex";\r\n})(render_mesh_NormalKind || (render_mesh_NormalKind = {}));\r\nclass render_mesh_Renderable {\r\n    constructor(vertCount, normCount, uvCount, faceCount, texture = undefined) {\r\n        this._normKind = render_mesh_NormalKind.None;\r\n        // render speed\r\n        // shader\r\n        this.color = [1, 1, 1, 1];\r\n        this.linecolor = [1, 1, 1, 1];\r\n        let perFaceCount = 3;\r\n        this.mesh = mesh_Mesh.newEmpty(vertCount, faceCount, perFaceCount);\r\n        this.norms = new vector_array_Vector3Array(normCount);\r\n        this.uvs = new vector_array_Vector2Array(uvCount);\r\n        this.ambi = new Float32Array(vertCount);\r\n        this.texture = texture;\r\n        this.position = matrix_Matrix4.newIdentity();\r\n    }\r\n    static new(vertCount, normCount, uvCount, faceCount, texture = undefined) {\r\n        return new render_mesh_Renderable(vertCount, normCount, uvCount, faceCount, texture);\r\n    }\r\n    static fromMesh(mesh) {\r\n        let r = new render_mesh_Renderable(mesh.verts.count(), 0, 0, mesh.links.count());\r\n        r.mesh.verts.data = mesh.verts.data;\r\n        r.mesh.links.data = mesh.links.data;\r\n        return r;\r\n    }\r\n    static fromData(verts, norms, uvs, faces) {\r\n        // NOTE : this type of parsing makes my life easy, but is dangerous. This is why i created the\r\n        // Array class.\r\n        let r = new render_mesh_Renderable(verts.length / 3, norms.length / 3, uvs.length / 2, faces.length / 3);\r\n        r.mesh.verts.fillWith(verts);\r\n        r.mesh.links.fillWith(faces);\r\n        r.norms.fillWith(norms);\r\n        r.uvs.fillWith(uvs);\r\n        return r;\r\n    }\r\n    static fromGraph(graph) {\r\n        let mesh = graph.toMesh();\r\n        let r = render_mesh_Renderable.fromMesh(mesh);\r\n        r.norms = vector_array_Vector3Array.fromList(graph.allNorms());\r\n        r._normKind = render_mesh_NormalKind.Vertex; // fix this!!\r\n        return r;\r\n    }\r\n    // geometry trait\r\n    transform(matrix) {\r\n        for (let i = 0; i < this.mesh.verts.count(); i++) {\r\n            let v = this.mesh.verts.getVector(i);\r\n            let n = this.norms.getVector(i);\r\n            this.mesh.verts.setVector(i, matrix.multiplyVector(v));\r\n            this.norms.setVector(i, matrix.multiplyVector(n)); // TODO, EXTRACT ONLY ROTATION PART FROM THE MATRIX\r\n        }\r\n    }\r\n    // getters & selectors\r\n    // VERY POORLY OPTIMIZED\r\n    getAdjacentFaces(v) {\r\n        let faces = [];\r\n        let count = this.mesh.links.count();\r\n        for (let i = 0; i < count; i++) {\r\n            if (this.mesh.links.getRow(i).includes(v)) {\r\n                faces.push(i);\r\n            }\r\n        }\r\n        return faces;\r\n    }\r\n    getFaceVertices(f) {\r\n        return this.mesh.getLinkVerts(f);\r\n    }\r\n    getType() {\r\n        return this.mesh.getType();\r\n    }\r\n    getNormalType() {\r\n        return this._normKind;\r\n    }\r\n    // setters\r\n    setTexture(texture) {\r\n        this.texture = texture;\r\n        // recalculate things if needed\r\n    }\r\n    setUvs(uvs) {\r\n        if (uvs instanceof Float32Array) {\r\n            this.uvs.data = uvs;\r\n        }\r\n        else {\r\n            this.uvs = uvs;\r\n        }\r\n        // recalculate if needed\r\n    }\r\n    // convert\r\n    exportToObj(path) {\r\n        throw "todo";\r\n    }\r\n    // ------ normals ------\r\n    // set 1 normal per face\r\n    calculateFaceNormals() {\r\n        if (this.getType() != MeshType.Triangles) {\r\n            console.error("can only calculate normals from triangular meshes");\r\n            this.norms = new vector_array_Vector3Array(0);\r\n            return;\r\n        }\r\n        let norms = this.mesh.calculateFaceNormals();\r\n        this.norms = vector_array_Vector3Array.fromList(norms);\r\n        this._normKind = render_mesh_NormalKind.Face;\r\n    }\r\n    calculateVertexNormals() {\r\n        let norms = this.mesh.calculateVertexNormals();\r\n        this.norms = vector_array_Vector3Array.fromList(norms);\r\n        this._normKind = render_mesh_NormalKind.Vertex;\r\n    }\r\n    calculateMultiVertexNormals() {\r\n        // set type\r\n        this._normKind = render_mesh_NormalKind.MultiVertex;\r\n        // calculate\r\n        this.calculateFaceNormals();\r\n        let vertNormals = new vector_array_Vector3Array(this.mesh.verts.count());\r\n        this.mesh.verts.forEach((v, i) => {\r\n            let adjFaces = this.getAdjacentFaces(i);\r\n            vertNormals.setVector(i, this.norms.take(adjFaces).average());\r\n        });\r\n        this.norms = vertNormals;\r\n    }\r\n}\r\n// ================ Obj ===================\r\nfunction meshFromObj(text) {\r\n    // This is not a full .obj parser.\r\n    // see http://paulbourke.net/dataformats/obj/\r\n    // INDEXES ORIGINALLY REFER TO LINES, so -1 is needed\r\n    // run through all lines, and temporarely store\r\n    // all data in raw number lists, since we dont know how\r\n    // many vertices or faces well get.\r\n    let verts = []; // 3 long float\r\n    let norms = []; // 3 long float\r\n    let uvs = []; // 2 long float\r\n    let faces = []; // 9 long ints, u16\'s should suffice.\r\n    // note : this is very inefficient, but it\'ll have to do for now...\r\n    const keywordRE = /(\\w*)(?: )*(.*)/;\r\n    const lines = text.split("\\n");\r\n    for (let i = 0; i < lines.length; ++i) {\r\n        const line = lines[i].trim();\r\n        // filter out comments\r\n        if (line === "" || line.startsWith("#")) {\r\n            continue;\r\n        }\r\n        const m = keywordRE.exec(line);\r\n        if (!m) {\r\n            continue;\r\n        }\r\n        const [, keyword, unparsedArgs] = m;\r\n        const parts = line.split(/\\s+/).slice(1);\r\n        switch (keyword) {\r\n            case "v":\r\n                for (const part of parts) {\r\n                    verts.push(parseFloat(part));\r\n                }\r\n                break;\r\n            case "vn":\r\n                for (const part of parts) {\r\n                    norms.push(parseFloat(part));\r\n                }\r\n                break;\r\n            case "vt":\r\n                for (const part of parts) {\r\n                    uvs.push(parseFloat(part));\r\n                }\r\n                break;\r\n            case "f":\r\n                for (const value of ProcessObjFace(parts)) {\r\n                    faces.push(value);\r\n                }\r\n                break;\r\n            default:\r\n                console.warn("unhandled keyword:", keyword); // eslint-disable-line no-console\r\n                continue;\r\n        }\r\n    }\r\n    // console.log("number of vertices: " + verts.length / 3);\r\n    // console.log("number of faces: " + faces.length / 3);\r\n    // console.log("number of uvs: " + uvs.length / 2);\r\n    // console.log("number of norms: " + norms.length / 3);\r\n    let mesh = render_mesh_Renderable.fromData(verts, norms, uvs, faces);\r\n    return mesh;\r\n}\r\n// NOTE: for now, uv and normals are completely ignored!!!\r\n// we assume the indices are the same als the vertices!!!\r\n// verbose way of processing one single vertex/normal/uv combination in a face.\r\nfunction ProcessObjFaceVertex(part) {\r\n    // make sure data always has length: 3\r\n    let data = [];\r\n    // cut string apart and process it\r\n    let subparts = part.split("/");\r\n    if (subparts.length == 1) {\r\n        data.push(parseInt(subparts[0]) - 1);\r\n        // data.push(0);\r\n        // data.push(0);\r\n    }\r\n    else if (subparts.length == 3) {\r\n        data.push(parseInt(subparts[0]) - 1);\r\n        // data.push(parseInt(subparts[1])-1);\r\n        // data.push(parseInt(subparts[2])-1);\r\n    }\r\n    else {\r\n        throw "invalid face found when processing";\r\n    }\r\n    return data;\r\n}\r\n// process a face entry in an obj file\r\nfunction ProcessObjFace(parts) {\r\n    let data = [];\r\n    if (parts.length == 4) {\r\n        // i dont want to deal with quads for now, create 2 faces from a quad\r\n        let a = ProcessObjFaceVertex(parts[0]);\r\n        let b = ProcessObjFaceVertex(parts[1]);\r\n        let c = ProcessObjFaceVertex(parts[2]);\r\n        let d = ProcessObjFaceVertex(parts[3]);\r\n        data.push(...a, ...b, ...c, ...a, ...c, ...d);\r\n    }\r\n    else if (parts.length == 3) {\r\n        // as normal\r\n        let a = ProcessObjFaceVertex(parts[0]);\r\n        let b = ProcessObjFaceVertex(parts[1]);\r\n        let c = ProcessObjFaceVertex(parts[2]);\r\n        data.push(...a, ...b, ...c);\r\n    }\r\n    // data always has length 9 or 18\r\n    return data;\r\n}\r\n\n;// CONCATENATED MODULE: ./src/math/statistics.ts\n// name:    statistics.ts\r\n// author:  Jos Feenstra\r\n// purpose: functionality and documentation of variance,\r\n//          covariance, eigen vectors, least squares, and other\r\n//          statistical operations.\r\n// source:  been a while since I did this,\r\n//          https://datascienceplus.com/understanding-the-covariance-matrix/\r\n//          https://wiki.pathmind.com/eigenvector\r\n//          used to make sure the basics are correct :).\r\n// notes:   Whats the difference between a Principal Component and an Eigen vector?\r\n//          "Because eigenvectors trace the principal lines of force, and the axes of greatest variance and covariance illustrate where the data is most susceptible to change."\r\n\r\nclass Stat {\r\n    // calculate sum\r\n    static sum(x) {\r\n        let sum = 0;\r\n        for (let i = 0; i < x.length; i++) {\r\n            sum += x[i];\r\n        }\r\n        return sum;\r\n    }\r\n    // calculate average\r\n    static mean(x) {\r\n        return this.sum(x) / x.length;\r\n    }\r\n    // calculate variance\r\n    static variance(x) {\r\n        //σ^2x = (1/n−1) * n∑i=1 (x[i] – xAvr)^2\r\n        let n = x.length;\r\n        let avr = this.mean(x);\r\n        let sum = 0;\r\n        for (let i = 0; i < n; i++) {\r\n            sum += Math.pow((x[i] - avr), 2);\r\n        }\r\n        return sum / (n - 1);\r\n    }\r\n    // calculate the standard deviation\r\n    static deviation(x) {\r\n        return Math.pow(this.variance(x), 0.5);\r\n    }\r\n    // calculate covariance\r\n    static covariance(x, y) {\r\n        if (x.length != y.length)\r\n            throw "this is not how covariance works...";\r\n        let n = x.length;\r\n        let xAvr = this.mean(x);\r\n        let yAvr = this.mean(y);\r\n        let sum = 0;\r\n        for (let i = 0; i < n; i++) {\r\n            sum += (x[i] - xAvr) * (y[i] - yAvr);\r\n        }\r\n        return sum / (n - 1); // losing one degree of freedom\r\n    }\r\n    // calculate variance / covariance matrix\r\n    static cov(matrix) {\r\n        let size = matrix._width;\r\n        let cov = new float_matrix_FloatMatrix(size, size);\r\n        let columns = Array(size);\r\n        for (let i = 0; i < size; i++) {\r\n            columns[i] = matrix.getColumn(i);\r\n        }\r\n        // matrix is symmertical, so only run through one half\r\n        for (let i = 0; i < size; i++) {\r\n            for (let j = i; j < size; j++) {\r\n                let value = this.covariance(columns[i], columns[j]);\r\n                cov.set(i, j, value);\r\n                cov.set(j, i, value);\r\n            }\r\n        }\r\n        return cov;\r\n    }\r\n    static eig(A) {\r\n        let results = this.svd(A);\r\n        return [results[1], results[2]];\r\n    }\r\n    /**\r\n     * Single Value Decomposition.\r\n     * Can be used for Eigen Value Decomposition\r\n     * from G. H. Golub and C. Reinsch, Numer. Math. 14, 403-420 (1970).\r\n     * Taken from numeric.js. not yet cleaned & optimized.\r\n     * https://en.wikipedia.org/wiki/Singular_value_decomposition\r\n     * @param  {FloatMatrix} A matrix to decompose, such as a covariance matrix\r\n     * @returns [U, ∑, V]\r\n     * U -> during EVD, these are the eigen vectors of A transposed, if im not mistaken\r\n     * ∑ -> during EVD, this are the eigen values\r\n     * V -> during EVD, the columns are eigen vectors\r\n     */\r\n    static svd(A) {\r\n        var prec = Math.pow(2, -52); // assumes double prec\r\n        var tolerance = 1e-64 / prec;\r\n        var itmax = 50;\r\n        var c = 0;\r\n        var i = 0;\r\n        var j = 0;\r\n        var k = 0;\r\n        var l = 0;\r\n        var u = A.clone().toNative();\r\n        var m = u.length;\r\n        var n = u[0].length;\r\n        if (m < n)\r\n            throw "Need more rows than columns";\r\n        var e = new Array(n);\r\n        var q = new Array(n);\r\n        for (i = 0; i < n; i++)\r\n            e[i] = q[i] = 0.0;\r\n        var v = rep([n, n], 0);\r\n        function pythag(a, b) {\r\n            a = Math.abs(a);\r\n            b = Math.abs(b);\r\n            if (a > b)\r\n                return a * Math.sqrt(1.0 + (b * b) / a / a);\r\n            else if (b == 0.0)\r\n                return a;\r\n            return b * Math.sqrt(1.0 + (a * a) / b / b);\r\n        }\r\n        //rep function, [JF] : dont know what this does exactly...\r\n        function rep(s, v, k = 0) {\r\n            let n = s[k];\r\n            let ret = Array(n);\r\n            let i;\r\n            if (k === s.length - 1) {\r\n                for (i = n - 2; i >= 0; i -= 2) {\r\n                    ret[i + 1] = v;\r\n                    ret[i] = v;\r\n                }\r\n                if (i === -1) {\r\n                    ret[0] = v;\r\n                }\r\n                return ret;\r\n            }\r\n            for (i = n - 1; i >= 0; i--) {\r\n                ret[i] = rep(s, v, k + 1);\r\n            }\r\n            return ret;\r\n        }\r\n        //Householder\'s reduction to bidiagonal form\r\n        var f = 0.0;\r\n        var g = 0.0;\r\n        var h = 0.0;\r\n        var x = 0.0;\r\n        var y = 0.0;\r\n        var z = 0.0;\r\n        var s = 0.0;\r\n        for (i = 0; i < n; i++) {\r\n            e[i] = g;\r\n            s = 0.0;\r\n            l = i + 1;\r\n            for (j = i; j < m; j++)\r\n                s += u[j][i] * u[j][i];\r\n            if (s <= tolerance)\r\n                g = 0.0;\r\n            else {\r\n                f = u[i][i];\r\n                g = Math.sqrt(s);\r\n                if (f >= 0.0)\r\n                    g = -g;\r\n                h = f * g - s;\r\n                u[i][i] = f - g;\r\n                for (j = l; j < n; j++) {\r\n                    s = 0.0;\r\n                    for (k = i; k < m; k++)\r\n                        s += u[k][i] * u[k][j];\r\n                    f = s / h;\r\n                    for (k = i; k < m; k++)\r\n                        u[k][j] += f * u[k][i];\r\n                }\r\n            }\r\n            q[i] = g;\r\n            s = 0.0;\r\n            for (j = l; j < n; j++)\r\n                s = s + u[i][j] * u[i][j];\r\n            if (s <= tolerance)\r\n                g = 0.0;\r\n            else {\r\n                f = u[i][i + 1];\r\n                g = Math.sqrt(s);\r\n                if (f >= 0.0)\r\n                    g = -g;\r\n                h = f * g - s;\r\n                u[i][i + 1] = f - g;\r\n                for (j = l; j < n; j++)\r\n                    e[j] = u[i][j] / h;\r\n                for (j = l; j < m; j++) {\r\n                    s = 0.0;\r\n                    for (k = l; k < n; k++)\r\n                        s += u[j][k] * u[i][k];\r\n                    for (k = l; k < n; k++)\r\n                        u[j][k] += s * e[k];\r\n                }\r\n            }\r\n            y = Math.abs(q[i]) + Math.abs(e[i]);\r\n            if (y > x)\r\n                x = y;\r\n        }\r\n        // accumulation of right hand gtransformations\r\n        for (i = n - 1; i != -1; i += -1) {\r\n            if (g != 0.0) {\r\n                h = g * u[i][i + 1];\r\n                for (j = l; j < n; j++)\r\n                    v[j][i] = u[i][j] / h;\r\n                for (j = l; j < n; j++) {\r\n                    s = 0.0;\r\n                    for (k = l; k < n; k++)\r\n                        s += u[i][k] * v[k][j];\r\n                    for (k = l; k < n; k++)\r\n                        v[k][j] += s * v[k][i];\r\n                }\r\n            }\r\n            for (j = l; j < n; j++) {\r\n                v[i][j] = 0;\r\n                v[j][i] = 0;\r\n            }\r\n            v[i][i] = 1;\r\n            g = e[i];\r\n            l = i;\r\n        }\r\n        // accumulation of left hand transformations\r\n        for (i = n - 1; i != -1; i += -1) {\r\n            l = i + 1;\r\n            g = q[i];\r\n            for (j = l; j < n; j++)\r\n                u[i][j] = 0;\r\n            if (g != 0.0) {\r\n                h = u[i][i] * g;\r\n                for (j = l; j < n; j++) {\r\n                    s = 0.0;\r\n                    for (k = l; k < m; k++)\r\n                        s += u[k][i] * u[k][j];\r\n                    f = s / h;\r\n                    for (k = i; k < m; k++)\r\n                        u[k][j] += f * u[k][i];\r\n                }\r\n                for (j = i; j < m; j++)\r\n                    u[j][i] = u[j][i] / g;\r\n            }\r\n            else\r\n                for (j = i; j < m; j++)\r\n                    u[j][i] = 0;\r\n            u[i][i] += 1;\r\n        }\r\n        // diagonalization of the bidiagonal form\r\n        prec = prec * x;\r\n        for (k = n - 1; k != -1; k += -1) {\r\n            for (var iteration = 0; iteration < itmax; iteration++) {\r\n                // test f splitting\r\n                var test_convergence = false;\r\n                for (l = k; l != -1; l += -1) {\r\n                    if (Math.abs(e[l]) <= prec) {\r\n                        test_convergence = true;\r\n                        break;\r\n                    }\r\n                    if (Math.abs(q[l - 1]) <= prec)\r\n                        break;\r\n                }\r\n                if (!test_convergence) {\r\n                    // cancellation of e[l] if l>0\r\n                    c = 0.0;\r\n                    s = 1.0;\r\n                    var l1 = l - 1;\r\n                    for (i = l; i < k + 1; i++) {\r\n                        f = s * e[i];\r\n                        e[i] = c * e[i];\r\n                        if (Math.abs(f) <= prec)\r\n                            break;\r\n                        g = q[i];\r\n                        h = pythag(f, g);\r\n                        q[i] = h;\r\n                        c = g / h;\r\n                        s = -f / h;\r\n                        for (j = 0; j < m; j++) {\r\n                            y = u[j][l1];\r\n                            z = u[j][i];\r\n                            u[j][l1] = y * c + z * s;\r\n                            u[j][i] = -y * s + z * c;\r\n                        }\r\n                    }\r\n                }\r\n                // test f convergence\r\n                z = q[k];\r\n                if (l == k) {\r\n                    //convergence\r\n                    if (z < 0.0) {\r\n                        //q[k] is made non-negative\r\n                        q[k] = -z;\r\n                        for (j = 0; j < n; j++)\r\n                            v[j][k] = -v[j][k];\r\n                    }\r\n                    break; //break out of iteration loop and move on to next k value\r\n                }\r\n                if (iteration >= itmax - 1)\r\n                    throw "Error: no convergence.";\r\n                // shift from bottom 2x2 minor\r\n                x = q[l];\r\n                y = q[k - 1];\r\n                g = e[k - 1];\r\n                h = e[k];\r\n                f = ((y - z) * (y + z) + (g - h) * (g + h)) / (2.0 * h * y);\r\n                g = pythag(f, 1.0);\r\n                if (f < 0.0)\r\n                    f = ((x - z) * (x + z) + h * (y / (f - g) - h)) / x;\r\n                else\r\n                    f = ((x - z) * (x + z) + h * (y / (f + g) - h)) / x;\r\n                // next QR transformation\r\n                c = 1.0;\r\n                s = 1.0;\r\n                for (i = l + 1; i < k + 1; i++) {\r\n                    g = e[i];\r\n                    y = q[i];\r\n                    h = s * g;\r\n                    g = c * g;\r\n                    z = pythag(f, h);\r\n                    e[i - 1] = z;\r\n                    c = f / z;\r\n                    s = h / z;\r\n                    f = x * c + g * s;\r\n                    g = -x * s + g * c;\r\n                    h = y * s;\r\n                    y = y * c;\r\n                    for (j = 0; j < n; j++) {\r\n                        x = v[j][i - 1];\r\n                        z = v[j][i];\r\n                        v[j][i - 1] = x * c + z * s;\r\n                        v[j][i] = -x * s + z * c;\r\n                    }\r\n                    z = pythag(f, h);\r\n                    q[i - 1] = z;\r\n                    c = f / z;\r\n                    s = h / z;\r\n                    f = c * g + s * y;\r\n                    x = -s * g + c * y;\r\n                    for (j = 0; j < m; j++) {\r\n                        y = u[j][i - 1];\r\n                        z = u[j][i];\r\n                        u[j][i - 1] = y * c + z * s;\r\n                        u[j][i] = -y * s + z * c;\r\n                    }\r\n                }\r\n                e[l] = 0.0;\r\n                e[k] = f;\r\n                q[k] = x;\r\n            }\r\n        }\r\n        for (i = 0; i < q.length; i++)\r\n            if (q[i] < prec)\r\n                q[i] = 0;\r\n        //sort eigenvalues\r\n        var temp;\r\n        for (i = 0; i < n; i++) {\r\n            for (j = i - 1; j >= 0; j--) {\r\n                if (q[j] < q[i]) {\r\n                    c = q[j];\r\n                    q[j] = q[i];\r\n                    q[i] = c;\r\n                    for (k = 0; k < u.length; k++) {\r\n                        temp = u[k][i];\r\n                        u[k][i] = u[k][j];\r\n                        u[k][j] = temp;\r\n                    }\r\n                    for (k = 0; k < v.length; k++) {\r\n                        temp = v[k][i];\r\n                        v[k][i] = v[k][j];\r\n                        v[k][j] = temp;\r\n                    }\r\n                    i = j;\r\n                }\r\n            }\r\n        }\r\n        return [float_matrix_FloatMatrix.fromNative(u), new Float32Array(q), float_matrix_FloatMatrix.fromNative(v)];\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/geo/plane.ts\n// name:    plane.ts\r\n// author:  Jos Feenstra\r\n// purpose: definition of a 3d plane.\r\n// todo:    turn Center, Ihat, Jhat, Khat construction to an actual matrix\r\n\r\n\r\n\r\n\r\nclass plane_Plane {\r\n    // _inverse!: Matrix4; // NOTE: currently im not caching this. Might be needed.\r\n    // NOTE : d is not really needed anymore...\r\n    constructor(m) {\r\n        this._matrix = m;\r\n    }\r\n    static fromPN(center, normal) {\r\n        let cross = normal.cross(vector_Vector3.unitX());\r\n        if (cross.length() < const_Const.TOLERANCE) {\r\n            cross = normal.cross(vector_Vector3.unitY());\r\n        }\r\n        let ihat = cross.normalize();\r\n        let jhat = normal.cross(ihat).normalize();\r\n        let mat = plane_Plane.planeMatrixFromVecs(center, ihat, jhat, normal);\r\n        return new plane_Plane(mat);\r\n    }\r\n    static fromPVV(a, v1, v2) {\r\n        // TODO check if we still need this -1 thing\r\n        let khat = v1.clone().cross(v2).normalize(); //.scale(-1);\r\n        let center = a.clone();\r\n        let ihat = v1.normalize();\r\n        let jhat = v1.clone().cross(khat);\r\n        let mat = plane_Plane.planeMatrixFromVecs(center, ihat, jhat, khat);\r\n        return new plane_Plane(mat);\r\n    }\r\n    static from3pt(a, b, c) {\r\n        let v1 = b.clone().sub(a);\r\n        let v2 = c.clone().sub(a);\r\n        return this.fromPVV(a, v1, v2);\r\n    }\r\n    static WorldXY() {\r\n        return plane_Plane.from3pt(vector_Vector3.zero(), vector_Vector3.unitX(), vector_Vector3.unitY());\r\n    }\r\n    static WorldYZ() {\r\n        return plane_Plane.from3pt(vector_Vector3.zero(), vector_Vector3.unitY(), vector_Vector3.unitZ());\r\n    }\r\n    static WorldXZ() {\r\n        return plane_Plane.from3pt(vector_Vector3.zero(), vector_Vector3.unitX(), vector_Vector3.unitZ());\r\n    }\r\n    static fromLeastSquares(pts) {\r\n        let mean = pts.mean();\r\n        let cov = Stat.cov(pts);\r\n        let [eigValues, eigVectors] = Stat.eig(cov);\r\n        console.log(eigValues);\r\n        let biggestEigenVector = vector_Vector3.fromArray(eigVectors.getColumn(0));\r\n        let secondBiggestEigenVector = vector_Vector3.fromArray(eigVectors.getColumn(1));\r\n        return plane_Plane.fromPVV(mean, biggestEigenVector, secondBiggestEigenVector);\r\n    }\r\n    static fromXYLeastSquares(pts) {\r\n        // quite specific, but this was needed.\r\n        let mean = pts.mean();\r\n        return plane_Plane.WorldXY().transform(matrix_Matrix4.newTranslation(mean.x, mean.y, mean.z));\r\n    }\r\n    static planeMatrixFromVecs(c, i, j, k) {\r\n        return new matrix_Matrix4([i.x, i.y, i.z, 0, j.x, j.y, j.z, 0, k.x, k.y, k.z, 0, c.x, c.y, c.z, 1]);\r\n    }\r\n    get ihat() {\r\n        return vector_Vector3.fromArray(this._matrix.getRow(0));\r\n    }\r\n    get jhat() {\r\n        return vector_Vector3.fromArray(this._matrix.getRow(1));\r\n    }\r\n    get khat() {\r\n        return vector_Vector3.fromArray(this._matrix.getRow(2));\r\n    }\r\n    get center() {\r\n        return vector_Vector3.fromArray(this._matrix.getRow(3));\r\n    }\r\n    get matrix() {\r\n        return this._matrix.clone();\r\n    }\r\n    get normal() {\r\n        return this.khat;\r\n    }\r\n    get d() {\r\n        return this.closestPoint(vector_Vector3.zero())[1];\r\n    }\r\n    set ihat(v) {\r\n        this._matrix.setRow(0, [v.x, v.y, v.z, 0]);\r\n    }\r\n    set jhat(v) {\r\n        this._matrix.setRow(1, [v.x, v.y, v.z, 0]);\r\n    }\r\n    set khat(v) {\r\n        this._matrix.setRow(2, [v.x, v.y, v.z, 0]);\r\n    }\r\n    set center(v) {\r\n        this._matrix.setRow(3, [v.x, v.y, v.z, 1]);\r\n    }\r\n    set matrix(m) {\r\n        this._matrix = m;\r\n    }\r\n    get inverse() {\r\n        // TODO CACHE INVERSE MATRIX\r\n        return this._matrix.inverse();\r\n    }\r\n    setPosition(vec) {\r\n        this.center = vec;\r\n    }\r\n    setNormal(vec) {\r\n        this.khat = vec;\r\n    }\r\n    clone() {\r\n        return new plane_Plane(this._matrix.clone());\r\n    }\r\n    transform(m) {\r\n        this._matrix = this._matrix.multiply(m);\r\n        return this;\r\n    }\r\n    moveTo(origin) {\r\n        this.center = origin;\r\n        return this;\r\n    }\r\n    // NOTE: pulling is inefficient since i do not cache the inverse.\r\n    pullToPlane(p) {\r\n        return this.inverse.multiplyVector(p);\r\n    }\r\n    pushToWorld(p) {\r\n        return this.matrix.multiplyVector(p);\r\n    }\r\n    closestPoint(p) {\r\n        let pulled = this.pullToPlane(p);\r\n        let distance = pulled.z;\r\n        pulled.z = 0;\r\n        let vec = this.pushToWorld(pulled);\r\n        return [vec, distance];\r\n    }\r\n    rotateVector(v, radians) {\r\n        let pulled = this.pullToPlane(v);\r\n        let rotation = matrix_Matrix4.newAxisRotation(this.normal, radians);\r\n        pulled = rotation.multiplyVector(pulled);\r\n        return this.pushToWorld(pulled);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/data/hash-table.ts\n// note: this wont always work, but it does in most cases\r\n// todo: implement proper hashtable\r\nclass hash_table_HashTable {\r\n    constructor() {\r\n        this.data = new Map();\r\n    }\r\n    stringify(key) {\r\n        return key.toString();\r\n    }\r\n    set(key, value) {\r\n        return this.data.set(this.stringify(key), value);\r\n    }\r\n    has(key) {\r\n        return this.data.has(this.stringify(key));\r\n    }\r\n    get(key) {\r\n        return this.data.get(this.stringify(key));\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/mesh/graph.ts\n// name: graph.ts\r\n// author:  Jos Feenstra\r\n// purpose: HalfEdge Mesh in 3D.\r\n// This does mean that the order around a vertex is not staight forward, and must be handled using normals.\r\n// TODO\r\n// - graph clean\r\n// - graph delete vert\r\n// - to line renderable\r\n// - keep track of faces, for quick meshification\r\n//   - THIS WILL SPEED UP \'GET ALL FACES THREMENDOUSLY, WHICH WILL SPEED UP SUBDIVISONS\'\r\n// - remove ambiguity of halfedges & edges\r\n//   - fix the fact that we \'dont\' realllly use halfedges, we consistently use pairs of two.\r\n//   - aka, twins are implicit: 0 -> 1 & 1 -> 0 OR 21 -> 20 & 20 -> 21\r\n\r\n\r\n\r\n\r\n\r\n\r\n// FACES MUST BE CONVEX, OR BUGS MIGHT OCCUR!!!!\r\n// interface Face {\r\n//    edge: EdgeIndex,\r\n// }\r\n// NOTE: create an interface which hides the Edge, Vert & Face interfaces.\r\n// NOTE: half edge is implied\r\nclass Graph {\r\n    constructor() {\r\n        this.verts = [];\r\n        this.edges = [];\r\n    }\r\n    static new() {\r\n        return new Graph();\r\n    }\r\n    static fromMesh(mesh) {\r\n        let graph = Graph.new();\r\n        let normals = mesh.calculateVertexNormals();\r\n        mesh.verts.forEach((v, i) => {\r\n            graph.addVert(v, normals[i]);\r\n        });\r\n        let type = mesh.getType();\r\n        if (type == MeshType.Invalid || type == MeshType.Points) {\r\n            return graph;\r\n        }\r\n        let map = new hash_table_HashTable();\r\n        let width = mesh.links._width;\r\n        mesh.links.forEachRow((row, i) => {\r\n            // go through pairs\r\n            // NOTE: this can be done way easier by creating 1 half edge per pair\r\n            for (let i = 0; i < width; i++) {\r\n                let iNext = (i + 1) % width;\r\n                let a = row[i];\r\n                let b = row[iNext];\r\n                // console.log(a, b);\r\n                if (a == -1 || b == -1)\r\n                    continue;\r\n                graph.addEdgeIfNew(a, b);\r\n                // let normal = normals[a].add(normals[b]).normalize();\r\n                // if (map.has([a, b])) {\r\n                //     console.log("GOT IT ALREADY")\r\n                //     continue;\r\n                // }\r\n                // graph.addEdgeWithCustomNormal(a, b, normal);\r\n                // map.set([b, a], true);\r\n                // graph.addEdge(a, b);\r\n            }\r\n        });\r\n        return graph;\r\n    }\r\n    // geometry trait\r\n    clone() {\r\n        throw new Error("not yet implemented...");\r\n    }\r\n    transform(matrix) {\r\n        for (let i = 0; i < this.verts.length; i++) {\r\n            let v = this.verts[i];\r\n            v.pos = matrix.multiplyVector(v.pos);\r\n        }\r\n    }\r\n    // UTILITY\r\n    print() {\r\n        console.log("graph");\r\n        console.log("--------");\r\n        console.log(`${this.verts.length} verts: `);\r\n        for (let i = 0; i < this.verts.length; i++) {\r\n            let v = this.verts[i];\r\n            console.log(`v(${i}) | edge: ${v.edge}, data: ${v.pos.toString()} normal: ${v.normal.toString()}`);\r\n        }\r\n        console.log("--------");\r\n        console.log(`${this.edges.length} edges:  `);\r\n        for (let i = 0; i < this.edges.length; i++) {\r\n            let e = this.edges[i];\r\n            console.log(`e(${i}) | vert: ${e.vert}, twin: ${e.twin}, next: ${e.next}, dead ${e.dead}`);\r\n        }\r\n        console.log("--------");\r\n    }\r\n    // CONVERTERS\r\n    toMesh() {\r\n        return mesh_Mesh.fromGraph(this);\r\n    }\r\n    toLines() {\r\n        return mesh_Mesh.newLines(this.allVertPositions(), this.allUniqueEdgeVerts());\r\n    }\r\n    toRenderable() {\r\n        return render_mesh_Renderable.fromGraph(this);\r\n    }\r\n    // public getters\r\n    allNorms() {\r\n        let data = [];\r\n        this.verts.forEach((v) => {\r\n            data.push(v.normal);\r\n        });\r\n        return data;\r\n    }\r\n    allVertPositions() {\r\n        let data = [];\r\n        this.verts.forEach((v) => {\r\n            data.push(v.pos);\r\n        });\r\n        return data;\r\n    }\r\n    allUniqueEdges() {\r\n        let edges = [];\r\n        let count = this.edges.length / 2;\r\n        for (let i = 0; i < count; i++) {\r\n            let i1 = i * 2;\r\n            let i2 = i * 2 + 1;\r\n            let a = this.getEdge(i1);\r\n            let b = this.getEdge(i2);\r\n            if (a.dead || b.dead) {\r\n                continue;\r\n            }\r\n            edges.push(i1);\r\n        }\r\n        return edges;\r\n    }\r\n    allUniqueEdgeVerts() {\r\n        let edges = [];\r\n        let count = this.edges.length / 2;\r\n        for (let i = 0; i < count; i++) {\r\n            let i1 = i * 2;\r\n            let i2 = i * 2 + 1;\r\n            let a = this.getEdge(i1);\r\n            let b = this.getEdge(i2);\r\n            if (a.dead || b.dead) {\r\n                continue;\r\n            }\r\n            edges.push(a.vert, b.vert);\r\n        }\r\n        return edges;\r\n    }\r\n    allEdgeVerts() {\r\n        let data = [];\r\n        // let edges = new Map<number, number>()\r\n        this.edges.forEach((e, i) => {\r\n            if (e.dead)\r\n                return;\r\n            let a = e.vert;\r\n            let b = this.getEdge(e.twin).vert;\r\n            if (a < b) {\r\n                data.push(a);\r\n                data.push(b);\r\n            }\r\n        });\r\n        return data;\r\n    }\r\n    allVertLoops() {\r\n        throw "TODO";\r\n    }\r\n    allVertLoopsAsInts() {\r\n        // TODO speed this up\r\n        let loops = [];\r\n        let unvisited = new Set();\r\n        this.edges.forEach((e, i) => {\r\n            if (e.dead) {\r\n                return;\r\n            }\r\n            unvisited.add(i);\r\n        });\r\n        let i = 0;\r\n        const limit = this.edges.length; // we will never visit an edge twice if all is according to plan\r\n        while (unvisited.size > 0) {\r\n            let loop = [];\r\n            let ei = unvisited.entries().next().value[0];\r\n            let start = ei;\r\n            do {\r\n                if (i > limit) {\r\n                    // this.print();\r\n                    throw "topology is corrupt!";\r\n                }\r\n                i += 1;\r\n                let e = this.getEdge(ei);\r\n                unvisited.delete(ei);\r\n                loop.push(e.vert);\r\n                ei = e.next;\r\n            } while (ei != start);\r\n            loops.push(loop);\r\n        }\r\n        return loops;\r\n    }\r\n    getLoop(ei) {\r\n        let loop = [];\r\n        let i = 0;\r\n        const limit = this.edges.length;\r\n        let start = ei;\r\n        do {\r\n            if (i > limit) {\r\n                // this.print();\r\n                throw "topology is corrupt!";\r\n            }\r\n            i += 1;\r\n            let e = this.getEdge(ei);\r\n            loop.push(ei);\r\n            ei = e.next;\r\n        } while (ei != start);\r\n        return loop;\r\n    }\r\n    getVertexPos(vi) {\r\n        if (vi < 0 || vi >= this.verts.length) {\r\n            throw "out of range";\r\n        }\r\n        return this.verts[vi].pos;\r\n    }\r\n    getVertexNormal(vi) {\r\n        if (vi < 0 || vi >= this.verts.length) {\r\n            throw "out of range";\r\n        }\r\n        return this.verts[vi].normal;\r\n    }\r\n    getVertexCount() {\r\n        return this.verts.length;\r\n    }\r\n    getHalfEdgeCount() {\r\n        return this.edges.length;\r\n    }\r\n    changeVertex(vi, pos, norm) {\r\n        let v = this.verts[vi];\r\n        v.pos = pos;\r\n        v.normal = norm;\r\n    }\r\n    getVert(vi) {\r\n        if (vi < 0 || vi >= this.verts.length) {\r\n            throw "out of range";\r\n        }\r\n        return this.verts[vi];\r\n    }\r\n    getEdge(ei) {\r\n        if (ei < 0 || ei >= this.edges.length) {\r\n            console.error("out of range");\r\n        }\r\n        return this.edges[ei];\r\n    }\r\n    getEdgeIndexBetween(ai, bi) {\r\n        let res = this.getEdgeBetween(ai, bi);\r\n        if (res)\r\n            return this.getEdgeIndex(res);\r\n        return undefined;\r\n    }\r\n    getEdgeBetween(ai, bi) {\r\n        let edges = this.getVertEdgeFan(ai);\r\n        for (let i = 0; i < edges.length; i++) {\r\n            if (this.getEdge(edges[i].twin).vert == bi) {\r\n                return edges[i];\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n    getVertEdgeFan(vi) {\r\n        // get all edges connected to this vertex.\r\n        // NOTE: all are outgoing (e.vert == vi)\r\n        // console.log("getting fan");\r\n        let fan = [];\r\n        let v = this.verts[vi];\r\n        let ei = v.edge;\r\n        let start = ei;\r\n        if (ei == -1) {\r\n            return fan;\r\n        }\r\n        let count = 0;\r\n        while (true) {\r\n            if (count > this.verts.length) {\r\n                this.print();\r\n                console.log("fan: ", fan);\r\n                throw "nope";\r\n            }\r\n            count += 1;\r\n            // console.log("step", count, "ei", ei);\r\n            let e = this.getEdge(ei);\r\n            let e_twin = this.getEdgeTwin(ei);\r\n            fan.push(e);\r\n            ei = e_twin.next;\r\n            if (ei == start) {\r\n                break;\r\n            }\r\n        }\r\n        // console.log("returning fan: ", fan);\r\n        return fan;\r\n    }\r\n    getLoopsAdjacentToEdge(ei) {\r\n        let loops = [];\r\n        loops.push(this.getLoop(ei));\r\n        loops.push(this.getLoop(this.getEdge(ei).twin));\r\n        return loops;\r\n    }\r\n    getVertNeighbors(vi) {\r\n        let ids = [];\r\n        this.getVertEdgeFan(vi).forEach((e) => {\r\n            ids.push(this.getEdge(e.twin).vert);\r\n        });\r\n        return ids;\r\n    }\r\n    getEdgeIndex(e) {\r\n        return this.getEdge(e.twin).twin;\r\n    }\r\n    getEdgeTwin(ei) {\r\n        return this.edges[this.edges[ei].twin];\r\n    }\r\n    hasEdge(a, b) {\r\n        let nbs = this.getVertNeighbors(a);\r\n        return nbs.includes(b);\r\n    }\r\n    addVert(vector, normal) {\r\n        this.verts.push({ pos: vector, edge: -1, normal: normal, dead: false });\r\n        return this.verts.length - 1;\r\n    }\r\n    removeVert(a) {\r\n        throw "TODO FIGURE OUT NULL & REMOVAL";\r\n    }\r\n    addEdgeIfNew(a, b) {\r\n        if (!this.hasEdge(a, b)) {\r\n            // console.log("not there!");\r\n            this.addEdge(a, b);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    addEdge(vi_1, vi_2) {\r\n        //             ei1\r\n        // / vi1 \\  ---------\x3e / vi2 \\\r\n        // \\     / <---------  \\     /\r\n        //             ei2\r\n        let ei_1 = this.edges.length;\r\n        let ei_2 = ei_1 + 1;\r\n        this.edges.push({\r\n            next: -1,\r\n            twin: ei_2,\r\n            vert: vi_1,\r\n            dead: false,\r\n        });\r\n        this.edges.push({\r\n            next: -1,\r\n            twin: ei_1,\r\n            vert: vi_2,\r\n            dead: false,\r\n        });\r\n        // make sure the \'next\' things are fixed, and more\r\n        this.addEdgeToDisk(vi_1, ei_1);\r\n        this.addEdgeToDisk(vi_2, ei_2);\r\n    }\r\n    deleteEdgeByIndex(id) {\r\n        // flag it as \'to be removed\'\r\n        this.deleteEdge(this.getEdge(id));\r\n    }\r\n    deleteEdge(edge) {\r\n        // flag it as \'to be removed\'\r\n        let twin = this.getEdge(edge.twin);\r\n        edge.dead = true;\r\n        twin.dead = true;\r\n        // remove all pointers\r\n        this.deleteEdgeFromDisk(edge);\r\n        this.deleteEdgeFromDisk(twin);\r\n    }\r\n    // SETTERS\r\n    getDiskPositions(ei) {\r\n        // returns edgeIndex before, edgeIndex after\r\n        let e = this.getEdge(ei);\r\n        let v = this.getVert(e.vert);\r\n        let twin = this.getEdgeTwin(ei);\r\n        let v_twin = this.verts[twin.vert];\r\n        let myVector = v.pos.subbed(v_twin.pos);\r\n        // get all vectors\r\n        let vectors = [];\r\n        vectors.push(myVector);\r\n        // get more vectors by getting all edges currently connected to vertex v\r\n        // if this Edge is already within the fan, filter it out, so this assessment can be correctly made\r\n        let edgesPotentiallyWithExistingEdge = this.getVertEdgeFan(e.vert);\r\n        let edges = [];\r\n        for (let i = 0; i < edgesPotentiallyWithExistingEdge.length; i++) {\r\n            let edge = edgesPotentiallyWithExistingEdge[i];\r\n            if (this.getEdgeIndex(edge) == ei) {\r\n                // console.log("edge is in the fan!");\r\n            }\r\n            else {\r\n                edges.push(edge);\r\n            }\r\n        }\r\n        if (edges.length == 0) {\r\n            return [ei, ei];\r\n        }\r\n        if (edges.length == 1) {\r\n            let e = edges[0];\r\n            return [this.getEdgeIndex(e), this.getEdgeIndex(e)];\r\n        }\r\n        // console.log("edges", edges);\r\n        for (let i = 0; i < edges.length; i++) {\r\n            let edge = edges[i];\r\n            let twin = this.getEdge(edge.twin);\r\n            let neighbor = this.verts[twin.vert];\r\n            let neighborVector = v.pos.subbed(neighbor.pos);\r\n            vectors.push(neighborVector);\r\n        }\r\n        // console.log("all vectors: ", vectors);\r\n        // order them by \'wheel\'\r\n        let plane = plane_Plane.fromPN(v.pos, v.normal);\r\n        let ihat = plane.ihat;\r\n        let jhat = plane.jhat;\r\n        let order = vector_Vector3.calculateWheelOrder(vectors, ihat, jhat);\r\n        // console.log("order", order);\r\n        // find index 0 in the ordering. that is the position of this new edge. get the edges before and after this edge\r\n        let i_before = -1;\r\n        let i_after = -1;\r\n        for (let a = 0; a < order.length; a++) {\r\n            let b = (a + 1) % order.length;\r\n            let c = (a + 2) % order.length;\r\n            if (order[b] == 0) {\r\n                i_before = order[a];\r\n                i_after = order[c];\r\n                break;\r\n            }\r\n        }\r\n        // pick. NOTE: IF CCW / CC OF GRAPH NEEDS TO BE CHANGED, CHANGE THIS ORDER, BUT USE WITH CAUTION\r\n        // minus one, since we have 1 vector more than the edge list\r\n        let e_before = edges[i_after - 1];\r\n        let e_after = edges[i_before - 1];\r\n        return [this.getEdgeIndex(e_before), this.getEdgeIndex(e_after)];\r\n    }\r\n    addEdgeToDisk(vi, ei) {\r\n        let v = this.getVert(vi);\r\n        let twin = this.getEdgeTwin(ei);\r\n        if (v.edge == -1) {\r\n            // set two pointers:\r\n            v.edge = ei; // I am the vertex\'s first edge\r\n            twin.next = ei; // that means my twin points back to me\r\n        }\r\n        else {\r\n            let [ei_before, ei_after] = this.getDiskPositions(ei);\r\n            let [e_before, e_after] = [this.getEdge(ei_before), this.getEdge(ei_after)];\r\n            // set two pointers:\r\n            this.getEdge(e_before.twin).next = ei;\r\n            twin.next = this.getEdgeIndex(e_after);\r\n        }\r\n    }\r\n    deleteEdgeFromDisk(edge) {\r\n        let ei = this.getEdgeIndex(edge);\r\n        // console.log("deleting...", ei);\r\n        let vert = this.getVert(edge.vert);\r\n        // console.log("deleting from disk...");\r\n        let [ei_before, ei_after] = this.getDiskPositions(ei);\r\n        if (ei_before == ei) {\r\n            vert.edge = -1;\r\n            return;\r\n        }\r\n        // let flower = this.getVertEdgeFan(edge.vert);\r\n        // flower.forEach((e) => {console.log(this.getEdgeIndex(e))});\r\n        let [e_before, e_after] = [this.getEdge(ei_before), this.getEdge(ei_after)];\r\n        // set one pointer\r\n        // console.log("this is edge", ei);\r\n        // // console.log("before is", ei_before);\r\n        // console.log("after is", ei_after);\r\n        // console.log("before.twin.next is", this.getEdge(e_before.twin).next);\r\n        // console.log("after.twin.next is", this.getEdge(e_after.twin).next);\r\n        this.getEdge(e_before.twin).next = ei_after;\r\n        if (vert.edge == ei) {\r\n            vert.edge = ei_after;\r\n        }\r\n    }\r\n    // MISC\r\n    splitEdge(ai, bi, alpha) {\r\n        // get the edge\r\n        let edge = this.getEdgeBetween(ai, bi);\r\n        if (!edge)\r\n            throw new Error(`No Edge found between ${ai} and ${bi}`);\r\n        let twin = this.getEdge(edge.twin);\r\n        let a = this.getVert(ai);\r\n        let b = this.getVert(bi);\r\n        let v = vector_Vector3.fromLerp(a.pos, b.pos, alpha);\r\n        let n = vector_Vector3.fromLerp(a.normal, b.normal, alpha);\r\n        let ci = this.addVert(v, n);\r\n        let c = this.getVert(ci);\r\n        // change the edges\r\n        // if (ai == 0) {\r\n        // }\r\n        this.deleteEdge(edge);\r\n        this.addEdge(ai, ci);\r\n        this.addEdge(ci, bi);\r\n        return ci;\r\n    }\r\n    subdivide() {\r\n        // 1. get all edges\r\n        let edges = this.allEdgeVerts();\r\n        let faces = this.allVertLoopsAsInts();\r\n        // this maps old edges to new vertices\r\n        let deadEdgeMap = new hash_table_HashTable(); // this\r\n        // 2. split all edges, map\r\n        let count = edges.length / 2;\r\n        let middlePoints = new Array(count);\r\n        for (let i = 0; i < count; i++) {\r\n            let vai = edges[i * 2];\r\n            let vbi = edges[i * 2 + 1];\r\n            // let edgeI = this.getEdgeIndexBetween(vai, vbi)!;\r\n            // let edgeII = this.getEdgeIndexBetween(vbi, vai)!;\r\n            let vci = this.splitEdge(vai, vbi, 0.5);\r\n            middlePoints[i] = vci;\r\n            deadEdgeMap.set([vai, vbi], vci);\r\n            deadEdgeMap.set([vbi, vai], vci);\r\n        }\r\n        // 3. per old face: connect the dots\r\n        for (let i = 0; i < faces.length; i++) {\r\n            let face = faces[i];\r\n            // get all middle points\r\n            let middlePoints = new Array(face.length);\r\n            for (let j = 0; j < face.length; j++) {\r\n                let jNext = (j + 1) % face.length;\r\n                let via = face[j];\r\n                let vib = face[jNext];\r\n                // console.log(via, vib);\r\n                middlePoints[j] = deadEdgeMap.get([via, vib]);\r\n            }\r\n            // console.log(middlePoints);\r\n            // connect the dots\r\n            for (let j = 0; j < face.length; j++) {\r\n                let jNext = (j + 1) % face.length;\r\n                this.addEdge(middlePoints[j], middlePoints[jNext]);\r\n            }\r\n        }\r\n    }\r\n    subdivideQuad() {\r\n        // 1. get all edges\r\n        let edges = this.allEdgeVerts();\r\n        let faces = this.allVertLoopsAsInts();\r\n        // this maps old edges to new vertices\r\n        let deadEdgeMap = new hash_table_HashTable(); // this\r\n        // 2. split all edges, map\r\n        let count = edges.length / 2;\r\n        for (let i = 0; i < count; i++) {\r\n            let vai = edges[i * 2];\r\n            let vbi = edges[i * 2 + 1];\r\n            // let edgeI = this.getEdgeIndexBetween(vai, vbi)!;\r\n            // let edgeII = this.getEdgeIndexBetween(vbi, vai)!;\r\n            let vci = this.splitEdge(vai, vbi, 0.5);\r\n            deadEdgeMap.set([vai, vbi], vci);\r\n            deadEdgeMap.set([vbi, vai], vci);\r\n        }\r\n        // 3. per old face: connect the dots\r\n        for (let i = 0; i < faces.length; i++) {\r\n            let face = faces[i];\r\n            // get center point\r\n            let pos = vector_Vector3.zero();\r\n            for (let j = 0; j < face.length; j++) {\r\n                pos.add(this.getVertexPos(face[j]));\r\n            }\r\n            pos.scale(1 / face.length);\r\n            let norm = calcPlanarFaceNormal(face.map((v) => this.getVertexPos(v)));\r\n            let si = this.addVert(pos, norm);\r\n            // per middle point, connect the dots\r\n            for (let j = 0; j < face.length; j++) {\r\n                let jNext = (j + 1) % face.length;\r\n                let via = face[j];\r\n                let vib = face[jNext];\r\n                // console.log(via, vib);\r\n                let c = deadEdgeMap.get([via, vib]);\r\n                this.addEdge(si, c);\r\n            }\r\n        }\r\n    }\r\n    forEveryEdgeVerts(callback) {\r\n        let edges = this.allUniqueEdgeVerts();\r\n        let edgeCount = edges.length / 2;\r\n        for (let i = 0; i < edgeCount; i++) {\r\n            let a = this.getVert(edges[i * 2]);\r\n            let b = this.getVert(edges[i * 2 + 1]);\r\n            callback(a.pos, b.pos);\r\n        }\r\n    }\r\n}\r\nfunction calcPlanarFaceNormal(face) {\r\n    // ASSUMES : FACE = PLANAR & FACE = NOT SLIVER POLYGON (AREA > 0)\r\n    let count = face.length;\r\n    if (count < 3) {\r\n        throw "cannot get face planar with 2 or less edges";\r\n    }\r\n    // get the normal of a planar face\r\n    let normal = vector_Vector3.zero();\r\n    // two edges could be parallel, but there will be two edges in the face that are different.\r\n    let ihat = face[1].subbed(face[0]);\r\n    let jhat = face[2].subbed(face[1]);\r\n    for (let i = 1; i < count; i++) {\r\n        if (Math.abs(ihat.dot(jhat)) > const_Const.TOLERANCE) {\r\n            return ihat.cross(jhat);\r\n        }\r\n        else {\r\n            // try again with next pair of\r\n            let i2 = (i + 1) % count;\r\n            let i3 = (i + 2) % count;\r\n            jhat = face[i3].subbed(face[i2]);\r\n        }\r\n    }\r\n    throw "get planar face failed...";\r\n}\r\n\n;// CONCATENATED MODULE: ./src/mesh/mesh.ts\n// mesh.ts\r\n// Author: Jos Feenstra\r\n// Purpose:\r\n// a very pure idea of a mesh : Vertices + links between vertices.\r\n// Could be anything with these properties: lines, triangle-mesh, quads\r\n// idea: should normals be part of the Mesh?\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass mesh_Mesh {\r\n    // CONSTRUCTORS\r\n    constructor(verts, links) {\r\n        this.verts = verts;\r\n        this.links = links;\r\n    }\r\n    clone() {\r\n        return new mesh_Mesh(this.verts.clone(), this.links.clone());\r\n    }\r\n    static new(verts, links) {\r\n        return new mesh_Mesh(verts, links);\r\n    }\r\n    static fromLists(verts, faces) {\r\n        return new mesh_Mesh(vector_array_Vector3Array.fromList(verts), int_matrix_IntMatrix.fromList(faces, 3));\r\n    }\r\n    static newEmpty(vertCount, linkCount, perLinkCount) {\r\n        return new mesh_Mesh(new vector_array_Vector3Array(vertCount), new int_matrix_IntMatrix(linkCount, perLinkCount));\r\n    }\r\n    static newLines(positions, edges) {\r\n        let verts = vector_array_Vector3Array.fromList(positions);\r\n        let links = int_matrix_IntMatrix.fromList(edges, 2);\r\n        return new mesh_Mesh(verts, links);\r\n    }\r\n    static zero() {\r\n        return new mesh_Mesh(new vector_array_Vector3Array(0), new int_matrix_IntMatrix(0, 0));\r\n    }\r\n    static fromJoin(meshes) {\r\n        // join meshes, dont try to look for duplicate vertices\r\n        // TODO : make this the trouble of Matrices and Arrays\r\n        let vertCount = 0;\r\n        let faceCount = 0;\r\n        for (let mesh of meshes) {\r\n            vertCount += mesh.verts.count();\r\n            faceCount += mesh.links.count();\r\n        }\r\n        let verts = new vector_array_Vector3Array(vertCount);\r\n        let links = new int_matrix_IntMatrix(faceCount, 3);\r\n        let accVerts = 0;\r\n        let accFaces = 0;\r\n        for (let mesh of meshes) {\r\n            for (let i = 0; i < mesh.verts.count(); i++) {\r\n                verts.setVector(accVerts + i, mesh.verts.getVector(i));\r\n            }\r\n            for (let i = 0; i < mesh.links.count(); i++) {\r\n                let face = mesh.links.getRow(i);\r\n                for (let j = 0; j < face.length; j++) {\r\n                    face[j] = face[j] + accVerts;\r\n                }\r\n                links.setRow(accFaces + i, face);\r\n            }\r\n            accVerts += mesh.verts.count();\r\n            accFaces += mesh.links.count();\r\n        }\r\n        return new mesh_Mesh(verts, links);\r\n    }\r\n    static fromRect(rect) {\r\n        let verts = rect.getCorners();\r\n        // we cant handle quads yet\r\n        let faces = [];\r\n        faces.push(...quadToTri(cubeFaces[0]));\r\n        let rend = new render_mesh_Renderable(4, 0, 0, 2);\r\n        rend.mesh.verts.fillFromList(verts);\r\n        rend.mesh.links.setData(faces);\r\n        // console.log(mesh.verts);\r\n        // console.log(mesh.links);\r\n        rend.setUvs(new Float32Array([0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0]));\r\n        return rend;\r\n    }\r\n    static newQuad(corners) {\r\n        let faces = [...quadToTri(cubeFaces[0])];\r\n        return this.fromLists(corners, faces);\r\n    }\r\n    static newOct(corners) {\r\n        let faces = [];\r\n        for (let face of cubeFaces) {\r\n            faces.push(...quadToTri(face));\r\n        }\r\n        return this.fromLists(corners, faces);\r\n    }\r\n    static fromCube(cube) {\r\n        let verts = cube.getCorners();\r\n        return mesh_Mesh.newOct(verts);\r\n    }\r\n    static newIcosahedron(scale = 1) {\r\n        let graph = new Graph();\r\n        let a = scale;\r\n        let phi = (1 + Math.pow(5, 0.5)) / 2;\r\n        let b = a * phi;\r\n        let addVert = (v) => {\r\n            graph.addVert(v, v);\r\n        };\r\n        addVert(new vector_Vector3(-a, -b, 0));\r\n        addVert(new vector_Vector3(a, -b, 0));\r\n        addVert(new vector_Vector3(-a, b, 0));\r\n        addVert(new vector_Vector3(a, b, 0));\r\n        addVert(new vector_Vector3(0, -a, -b));\r\n        addVert(new vector_Vector3(0, a, -b));\r\n        addVert(new vector_Vector3(0, -a, b));\r\n        addVert(new vector_Vector3(0, a, b));\r\n        addVert(new vector_Vector3(-b, 0, -a));\r\n        addVert(new vector_Vector3(-b, 0, a));\r\n        addVert(new vector_Vector3(b, 0, -a));\r\n        addVert(new vector_Vector3(b, 0, a));\r\n        // build edges\r\n        let addEdge = (a, b) => {\r\n            graph.addEdge(a, b);\r\n        };\r\n        for (let i = 0; i < 12; i += 4) {\r\n            addEdge(i + 0, i + 1);\r\n            addEdge(i + 2, i + 3);\r\n            let inext = (i + 4) % 12;\r\n            addEdge(i + 0, inext + 2);\r\n            addEdge(i + 0, inext + 0);\r\n            addEdge(i + 1, inext + 2);\r\n            addEdge(i + 1, inext + 0);\r\n            addEdge(i + 2, inext + 3);\r\n            addEdge(i + 2, inext + 1);\r\n            addEdge(i + 3, inext + 3);\r\n            addEdge(i + 3, inext + 1);\r\n        }\r\n        return this.fromGraph(graph);\r\n    }\r\n    static newSphere(center, radius, numRings, numPerRing) {\r\n        // verts\r\n        let vertCount = numRings * numPerRing + 2;\r\n        let verts = new vector_array_Vector3Array(vertCount);\r\n        let setVert = function (i, vector) {\r\n            verts.setVector(i, vector.scale(radius).add(center));\r\n        };\r\n        setVert(0, new vector_Vector3(0, 0, 1));\r\n        for (let ring = 0; ring < numRings; ring++) {\r\n            for (let perRing = 0; perRing < numPerRing; perRing++) {\r\n                let alpha = (Math.PI * (ring + 1)) / (numRings + 1);\r\n                let beta = (2 * Math.PI * perRing) / numPerRing;\r\n                let x = Math.sin(alpha) * Math.cos(beta);\r\n                let y = Math.sin(alpha) * Math.sin(beta);\r\n                let z = Math.cos(alpha);\r\n                let index = 1 + ring * numPerRing + perRing;\r\n                setVert(index, new vector_Vector3(x, y, z));\r\n            }\r\n        }\r\n        setVert(vertCount - 1, new vector_Vector3(0, 0, -1));\r\n        // faces\r\n        let faceCount = numPerRing * numRings * 2;\r\n        let links = new int_matrix_IntMatrix(faceCount, 3);\r\n        links.fill(-1);\r\n        let setFace = function (i, row) {\r\n            links.setRow(i, row);\r\n        };\r\n        // faces top\r\n        for (let i = 0; i < numPerRing; i++) {\r\n            setFace(i, [0, i + 1, ((i + 1) % numPerRing) + 1]);\r\n        }\r\n        // faces middle\r\n        // we are at this cursor\r\n        // console.log("faces", faceCount);\r\n        for (let ring = 0; ring < numRings - 1; ring++) {\r\n            let vertCursor = numPerRing * ring + 1;\r\n            let vertCursorBelow = vertCursor + numPerRing;\r\n            for (let perRing = 0; perRing < numPerRing; perRing++) {\r\n                let a = vertCursor + perRing;\r\n                let b = vertCursor + ((perRing + 1) % numPerRing);\r\n                let c = vertCursorBelow + perRing;\r\n                let d = vertCursorBelow + ((perRing + 1) % numPerRing);\r\n                let iFace = numPerRing + numPerRing * ring * 2 + perRing * 2;\r\n                // console.log(iFace);\r\n                setFace(iFace, [a, c, b]);\r\n                setFace(iFace + 1, [c, d, b]);\r\n            }\r\n        }\r\n        // faces bottom\r\n        for (let i = 0; i < numPerRing; i++) {\r\n            let iNext = (i + 1) % numPerRing;\r\n            let last = vertCount - 1;\r\n            let iFace = faceCount - numPerRing + i;\r\n            let zero = vertCount - numPerRing - 1;\r\n            let vertI = zero + i;\r\n            let vertINext = zero + iNext;\r\n            // console.log(iFace);\r\n            // console.log("face", last, vertINext, vertI);\r\n            setFace(iFace, [last, vertINext, vertI]);\r\n        }\r\n        return new mesh_Mesh(verts, links);\r\n    }\r\n    static newCylinder(from, to, radius, numPerRing) {\r\n        let normal = to.subbed(from);\r\n        let numVerts = numPerRing * 2 + 2;\r\n        let numFaces = (numVerts - 2) * 2;\r\n        let verts = new vector_array_Vector3Array(numVerts);\r\n        // some dumb stuff\r\n        let setVert = function (i, vector) {\r\n            verts.setVector(i, vector);\r\n        };\r\n        // planes to represent top & bottom\r\n        let planeFrom = plane_Plane.fromPN(from, normal);\r\n        // console.log(planeFrom);\r\n        let planeTo = plane_Plane.fromPN(to, normal);\r\n        // console.log(planeFrom);\r\n        // verts \'from ring\r\n        setVert(0, from);\r\n        for (let i = 0; i < numPerRing; i++) {\r\n            let v = new vector_Vector3(Math.cos((Math.PI * 2 * i) / numPerRing), Math.sin((Math.PI * 2 * i) / numPerRing), 0).scale(radius);\r\n            v = planeFrom.matrix.multiplyVector(v);\r\n            setVert(i + 1, v);\r\n        }\r\n        // verts \'to\' ring\r\n        let numVertsHalf = numVerts / 2;\r\n        for (let i = 0; i < numPerRing; i++) {\r\n            let v = new vector_Vector3(Math.cos((Math.PI * 2 * i) / numPerRing), Math.sin((Math.PI * 2 * i) / numPerRing), 0).scale(radius);\r\n            v = planeTo.matrix.multiplyVector(v);\r\n            setVert(numVertsHalf + i, v);\r\n        }\r\n        setVert(numVerts - 1, to);\r\n        // start making links\r\n        let links = new int_matrix_IntMatrix(numFaces, 3);\r\n        links.fill(-1);\r\n        let setFace = function (i, row) {\r\n            links.setRow(i, row);\r\n        };\r\n        // set faces\r\n        for (let i = 0; i < numPerRing; i++) {\r\n            let a = 0;\r\n            let b = 1 + i;\r\n            let c = 1 + ((i + 1) % numPerRing);\r\n            let d = numVerts - 1;\r\n            let e = numVertsHalf + i;\r\n            let f = numVertsHalf + ((i + 1) % numPerRing);\r\n            setFace(i * 4, [a, c, b]);\r\n            setFace(i * 4 + 1, [b, c, e]);\r\n            setFace(i * 4 + 2, [c, f, e]);\r\n            setFace(i * 4 + 3, [d, e, f]);\r\n        }\r\n        return new mesh_Mesh(verts, links);\r\n    }\r\n    static newCone(center, radius, height, numPerRing) {\r\n        let numVerts = numPerRing + 2;\r\n        let numFaces = numPerRing * 2;\r\n        let verts = new vector_array_Vector3Array(numVerts);\r\n        let setVert = function (i, vector) {\r\n            verts.setVector(i, vector.add(center));\r\n        };\r\n        let links = new int_matrix_IntMatrix(numFaces, 3);\r\n        links.fill(-1);\r\n        let setFace = function (i, row) {\r\n            links.setRow(i, row);\r\n        };\r\n        // set verts\r\n        setVert(0, new vector_Vector3(0, 0, 0));\r\n        for (let i = 0; i < numPerRing; i++) {\r\n            setVert(i + 1, new vector_Vector3(Math.cos((Math.PI * 2 * i) / numPerRing), Math.sin((Math.PI * 2 * i) / numPerRing), 0).scale(radius));\r\n        }\r\n        setVert(numVerts - 1, new vector_Vector3(0, 0, height));\r\n        // set faces\r\n        for (let i = 0; i < numPerRing; i++) {\r\n            let a = 0;\r\n            let b = numVerts - 1;\r\n            let c = 1 + i;\r\n            let d = 1 + ((i + 1) % numPerRing);\r\n            setFace(i * 2, [a, d, c]);\r\n            setFace(i * 2 + 1, [c, d, b]);\r\n        }\r\n        return new mesh_Mesh(verts, links);\r\n    }\r\n    static fromGraph(graph) {\r\n        // NOTE : doesnt really work if the loops are not of size 3.\r\n        let verts = vector_array_Vector3Array.fromList(graph.allVertPositions());\r\n        let loops = graph.allVertLoopsAsInts();\r\n        let links = new int_matrix_IntMatrix(loops.length, 3);\r\n        loops.forEach((loop, i) => {\r\n            if (loop.length == 3) {\r\n                links.setRow(i, loop);\r\n            }\r\n            else {\r\n                console.log("cant convert loop");\r\n            }\r\n        });\r\n        return mesh_Mesh.new(verts, links);\r\n    }\r\n    // CONVERTERS\r\n    toLines() {\r\n        const getLines = (num) => {\r\n            let count = this.links.count() * num;\r\n            let lines = new int_matrix_IntMatrix(count, 2);\r\n            for (let i = 0; i < this.links.count(); i++) {\r\n                for (let j = 0; j < num; j++) {\r\n                    let jnext = (j + 1) % num;\r\n                    let iLines = i * num + j;\r\n                    lines.set(iLines, 0, this.links.get(i, j));\r\n                    lines.set(iLines, 1, this.links.get(i, jnext));\r\n                }\r\n            }\r\n            return lines;\r\n        };\r\n        let type = this.getType();\r\n        if (type == MeshType.Lines) {\r\n            return this.clone();\r\n        }\r\n        else if (type == MeshType.Triangles) {\r\n            let lines = getLines(3);\r\n            return mesh_Mesh.new(this.verts.clone(), lines);\r\n        }\r\n        else if (type == MeshType.Quads) {\r\n            let lines = getLines(4);\r\n            return mesh_Mesh.new(this.verts.clone(), lines);\r\n        }\r\n        else {\r\n            console.warn("cannot convert to lines");\r\n            return mesh_Mesh.newEmpty(0, 0, 0);\r\n        }\r\n    }\r\n    toRenderable() {\r\n        return render_mesh_Renderable.fromMesh(this);\r\n    }\r\n    toGraph() {\r\n        return Graph.fromMesh(this);\r\n    }\r\n    // GETTERS\r\n    getType() {\r\n        if (this.links._width == MeshType.Points) {\r\n            return MeshType.Points;\r\n        }\r\n        else if (this.links._width == MeshType.Lines) {\r\n            return MeshType.Lines;\r\n        }\r\n        else if (this.links._width == MeshType.Triangles) {\r\n            return MeshType.Triangles;\r\n        }\r\n        else if (this.links._width == MeshType.Quads) {\r\n            return MeshType.Quads;\r\n        }\r\n        else {\r\n            return MeshType.Invalid;\r\n        }\r\n    }\r\n    getLinkVerts(f) {\r\n        let verts = new vector_array_Vector3Array(this.links._width);\r\n        this.links.getRow(f).forEach((v, i) => {\r\n            verts.setVector(i, this.verts.getVector(v));\r\n        });\r\n        return verts;\r\n    }\r\n    // MISC\r\n    calculateFaceNormals() {\r\n        let norms = [];\r\n        if (this.getType() != MeshType.Triangles) {\r\n            console.error("can only calculate normals from triangular meshes");\r\n            return norms;\r\n        }\r\n        let faceCount = this.links.count();\r\n        for (let i = 0; i < faceCount; i++) {\r\n            let verts = this.getLinkVerts(i).toList();\r\n            let normal = verts[1].subbed(verts[0]).cross(verts[2].subbed(verts[0])).normalize();\r\n            norms.push(normal);\r\n        }\r\n        return norms;\r\n    }\r\n    calculateVertexNormals() {\r\n        let faceCount = this.links.count();\r\n        let faceNormals = this.calculateFaceNormals();\r\n        // stack all face normals per vertex\r\n        let array = new vector_array_Vector3Array(this.verts.count());\r\n        for (let i = 0; i < faceCount; i++) {\r\n            let normal = faceNormals[i];\r\n            this.links.getRow(i).forEach((vertexIndex) => {\r\n                let v = array.getVector(vertexIndex);\r\n                array.setVector(vertexIndex, v.add(normal));\r\n            });\r\n        }\r\n        // normalize all\r\n        let normals = array.toList();\r\n        for (let i = 0; i < normals.length; i++) {\r\n            normals[i].normalize();\r\n        }\r\n        return normals;\r\n    }\r\n}\r\n// ================ Help ==================\r\n// 0 ------- 1\r\n// | \\     / |\r\n// |  4---5  |\r\n// |  |   |  |\r\n// |  6---7  |\r\n// | /     \\ |\r\n// 2 ------- 3\r\nconst cubeFaces = [\r\n    [0, 1, 3, 2],\r\n    [4, 0, 2, 6],\r\n    [1, 0, 4, 5],\r\n    [1, 5, 7, 3],\r\n    [2, 3, 7, 6],\r\n    [5, 4, 6, 7],\r\n];\r\nfunction quadToTri(abcd) {\r\n    return [abcd[0], abcd[2], abcd[1], abcd[0], abcd[3], abcd[2]];\r\n}\r\n\n;// CONCATENATED MODULE: ./src/algorithms/marching-cubes.ts\n// name:    marching-cubes.ts\r\n// author:  Jos Feenstra\r\n// purpose: a marching cubes implementation useful for converting scalar discrete fields to contours\r\n\r\n\r\n// based upon:\r\n// http://paulbourke.net/geometry/polygonise/\r\n// Polygonising a scalar field\r\n// Also known as: "3D Contouring", "Marching Cubes", "Surface Reconstruction"\r\n// Written by Paul Bourke\r\n// May 1994\r\n//\r\n//\r\n// The cube model used:\r\n//\r\n//     (4) ------ 4 ------ (5)\r\n//     /|                  /|\r\n//    7 |                 5 |\r\n//   /  |                /  |\r\n// (7) ------ 6 ------ (6)  |\r\n//  |   8               |   9\r\n//  |   |               |   |\r\n//  |   |               |   |\r\n//  |  (0) ------ 0 ------ (1)\r\n//  11 /               10  /\r\n//  | 3                 | 1\r\n//  |/                  |/\r\n// (3) ------ 2 ------ (2)\r\n/*\r\n    Given a grid cell and an isolevel, calculate the triangular\r\n    facets required to represent the isosurface through the cell.\r\n    Return the number of triangular facets, the array "triangles"\r\n    will be loaded up with the vertices at most 5 triangular facets.\r\n     0 will be returned if the grid cell is either totally above\r\n    of totally below the isolevel.\r\n */\r\n// typedef struct {\r\n//     XYZ p[3];\r\n//  } TRIANGLE;\r\n//  typedef struct {\r\n//     XYZ p[8];\r\n//     double val[8];\r\n//  } GRIDCELL;\r\nclass Gridcell {\r\n    constructor() {\r\n        this.points = []; // 8\r\n        this.corner = []; // 8\r\n    }\r\n}\r\nclass Triangle {\r\n    constructor() {\r\n        this.xyz = []; // 3\r\n    }\r\n}\r\nconst edgeTable = (/* unused pure expression or super */ null && ([\r\n    0x0,\r\n    0x109,\r\n    0x203,\r\n    0x30a,\r\n    0x406,\r\n    0x50f,\r\n    0x605,\r\n    0x70c,\r\n    0x80c,\r\n    0x905,\r\n    0xa0f,\r\n    0xb06,\r\n    0xc0a,\r\n    0xd03,\r\n    0xe09,\r\n    0xf00,\r\n    0x190,\r\n    0x99,\r\n    0x393,\r\n    0x29a,\r\n    0x596,\r\n    0x49f,\r\n    0x795,\r\n    0x69c,\r\n    0x99c,\r\n    0x895,\r\n    0xb9f,\r\n    0xa96,\r\n    0xd9a,\r\n    0xc93,\r\n    0xf99,\r\n    0xe90,\r\n    0x230,\r\n    0x339,\r\n    0x33,\r\n    0x13a,\r\n    0x636,\r\n    0x73f,\r\n    0x435,\r\n    0x53c,\r\n    0xa3c,\r\n    0xb35,\r\n    0x83f,\r\n    0x936,\r\n    0xe3a,\r\n    0xf33,\r\n    0xc39,\r\n    0xd30,\r\n    0x3a0,\r\n    0x2a9,\r\n    0x1a3,\r\n    0xaa,\r\n    0x7a6,\r\n    0x6af,\r\n    0x5a5,\r\n    0x4ac,\r\n    0xbac,\r\n    0xaa5,\r\n    0x9af,\r\n    0x8a6,\r\n    0xfaa,\r\n    0xea3,\r\n    0xda9,\r\n    0xca0,\r\n    0x460,\r\n    0x569,\r\n    0x663,\r\n    0x76a,\r\n    0x66,\r\n    0x16f,\r\n    0x265,\r\n    0x36c,\r\n    0xc6c,\r\n    0xd65,\r\n    0xe6f,\r\n    0xf66,\r\n    0x86a,\r\n    0x963,\r\n    0xa69,\r\n    0xb60,\r\n    0x5f0,\r\n    0x4f9,\r\n    0x7f3,\r\n    0x6fa,\r\n    0x1f6,\r\n    0xff,\r\n    0x3f5,\r\n    0x2fc,\r\n    0xdfc,\r\n    0xcf5,\r\n    0xfff,\r\n    0xef6,\r\n    0x9fa,\r\n    0x8f3,\r\n    0xbf9,\r\n    0xaf0,\r\n    0x650,\r\n    0x759,\r\n    0x453,\r\n    0x55a,\r\n    0x256,\r\n    0x35f,\r\n    0x55,\r\n    0x15c,\r\n    0xe5c,\r\n    0xf55,\r\n    0xc5f,\r\n    0xd56,\r\n    0xa5a,\r\n    0xb53,\r\n    0x859,\r\n    0x950,\r\n    0x7c0,\r\n    0x6c9,\r\n    0x5c3,\r\n    0x4ca,\r\n    0x3c6,\r\n    0x2cf,\r\n    0x1c5,\r\n    0xcc,\r\n    0xfcc,\r\n    0xec5,\r\n    0xdcf,\r\n    0xcc6,\r\n    0xbca,\r\n    0xac3,\r\n    0x9c9,\r\n    0x8c0,\r\n    0x8c0,\r\n    0x9c9,\r\n    0xac3,\r\n    0xbca,\r\n    0xcc6,\r\n    0xdcf,\r\n    0xec5,\r\n    0xfcc,\r\n    0xcc,\r\n    0x1c5,\r\n    0x2cf,\r\n    0x3c6,\r\n    0x4ca,\r\n    0x5c3,\r\n    0x6c9,\r\n    0x7c0,\r\n    0x950,\r\n    0x859,\r\n    0xb53,\r\n    0xa5a,\r\n    0xd56,\r\n    0xc5f,\r\n    0xf55,\r\n    0xe5c,\r\n    0x15c,\r\n    0x55,\r\n    0x35f,\r\n    0x256,\r\n    0x55a,\r\n    0x453,\r\n    0x759,\r\n    0x650,\r\n    0xaf0,\r\n    0xbf9,\r\n    0x8f3,\r\n    0x9fa,\r\n    0xef6,\r\n    0xfff,\r\n    0xcf5,\r\n    0xdfc,\r\n    0x2fc,\r\n    0x3f5,\r\n    0xff,\r\n    0x1f6,\r\n    0x6fa,\r\n    0x7f3,\r\n    0x4f9,\r\n    0x5f0,\r\n    0xb60,\r\n    0xa69,\r\n    0x963,\r\n    0x86a,\r\n    0xf66,\r\n    0xe6f,\r\n    0xd65,\r\n    0xc6c,\r\n    0x36c,\r\n    0x265,\r\n    0x16f,\r\n    0x66,\r\n    0x76a,\r\n    0x663,\r\n    0x569,\r\n    0x460,\r\n    0xca0,\r\n    0xda9,\r\n    0xea3,\r\n    0xfaa,\r\n    0x8a6,\r\n    0x9af,\r\n    0xaa5,\r\n    0xbac,\r\n    0x4ac,\r\n    0x5a5,\r\n    0x6af,\r\n    0x7a6,\r\n    0xaa,\r\n    0x1a3,\r\n    0x2a9,\r\n    0x3a0,\r\n    0xd30,\r\n    0xc39,\r\n    0xf33,\r\n    0xe3a,\r\n    0x936,\r\n    0x83f,\r\n    0xb35,\r\n    0xa3c,\r\n    0x53c,\r\n    0x435,\r\n    0x73f,\r\n    0x636,\r\n    0x13a,\r\n    0x33,\r\n    0x339,\r\n    0x230,\r\n    0xe90,\r\n    0xf99,\r\n    0xc93,\r\n    0xd9a,\r\n    0xa96,\r\n    0xb9f,\r\n    0x895,\r\n    0x99c,\r\n    0x69c,\r\n    0x795,\r\n    0x49f,\r\n    0x596,\r\n    0x29a,\r\n    0x393,\r\n    0x99,\r\n    0x190,\r\n    0xf00,\r\n    0xe09,\r\n    0xd03,\r\n    0xc0a,\r\n    0xb06,\r\n    0xa0f,\r\n    0x905,\r\n    0x80c,\r\n    0x70c,\r\n    0x605,\r\n    0x50f,\r\n    0x406,\r\n    0x30a,\r\n    0x203,\r\n    0x109,\r\n    0x0,\r\n]));\r\nconst triTable = (/* unused pure expression or super */ null && ([\r\n    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 8, 3, 9, 8, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 8, 3, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 2, 10, 0, 2, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [2, 8, 3, 2, 10, 8, 10, 9, 8, -1, -1, -1, -1, -1, -1, -1],\r\n    [3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 11, 2, 8, 11, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 9, 0, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 11, 2, 1, 9, 11, 9, 8, 11, -1, -1, -1, -1, -1, -1, -1],\r\n    [3, 10, 1, 11, 10, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 10, 1, 0, 8, 10, 8, 11, 10, -1, -1, -1, -1, -1, -1, -1],\r\n    [3, 9, 0, 3, 11, 9, 11, 10, 9, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [4, 3, 0, 7, 3, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 1, 9, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [4, 1, 9, 4, 7, 1, 7, 3, 1, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 2, 10, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [3, 4, 7, 3, 0, 4, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 2, 10, 9, 0, 2, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1],\r\n    [2, 10, 9, 2, 9, 7, 2, 7, 3, 7, 9, 4, -1, -1, -1, -1],\r\n    [8, 4, 7, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [11, 4, 7, 11, 2, 4, 2, 0, 4, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 0, 1, 8, 4, 7, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1],\r\n    [4, 7, 11, 9, 4, 11, 9, 11, 2, 9, 2, 1, -1, -1, -1, -1],\r\n    [3, 10, 1, 3, 11, 10, 7, 8, 4, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 11, 10, 1, 4, 11, 1, 0, 4, 7, 11, 4, -1, -1, -1, -1],\r\n    [4, 7, 8, 9, 0, 11, 9, 11, 10, 11, 0, 3, -1, -1, -1, -1],\r\n    [4, 7, 11, 4, 11, 9, 9, 11, 10, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 5, 4, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 5, 4, 1, 5, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [8, 5, 4, 8, 3, 5, 3, 1, 5, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 2, 10, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [3, 0, 8, 1, 2, 10, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1],\r\n    [5, 2, 10, 5, 4, 2, 4, 0, 2, -1, -1, -1, -1, -1, -1, -1],\r\n    [2, 10, 5, 3, 2, 5, 3, 5, 4, 3, 4, 8, -1, -1, -1, -1],\r\n    [9, 5, 4, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 11, 2, 0, 8, 11, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 5, 4, 0, 1, 5, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1],\r\n    [2, 1, 5, 2, 5, 8, 2, 8, 11, 4, 8, 5, -1, -1, -1, -1],\r\n    [10, 3, 11, 10, 1, 3, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1],\r\n    [4, 9, 5, 0, 8, 1, 8, 10, 1, 8, 11, 10, -1, -1, -1, -1],\r\n    [5, 4, 0, 5, 0, 11, 5, 11, 10, 11, 0, 3, -1, -1, -1, -1],\r\n    [5, 4, 8, 5, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 7, 8, 5, 7, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 3, 0, 9, 5, 3, 5, 7, 3, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 7, 8, 0, 1, 7, 1, 5, 7, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 7, 8, 9, 5, 7, 10, 1, 2, -1, -1, -1, -1, -1, -1, -1],\r\n    [10, 1, 2, 9, 5, 0, 5, 3, 0, 5, 7, 3, -1, -1, -1, -1],\r\n    [8, 0, 2, 8, 2, 5, 8, 5, 7, 10, 5, 2, -1, -1, -1, -1],\r\n    [2, 10, 5, 2, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1],\r\n    [7, 9, 5, 7, 8, 9, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 5, 7, 9, 7, 2, 9, 2, 0, 2, 7, 11, -1, -1, -1, -1],\r\n    [2, 3, 11, 0, 1, 8, 1, 7, 8, 1, 5, 7, -1, -1, -1, -1],\r\n    [11, 2, 1, 11, 1, 7, 7, 1, 5, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 5, 8, 8, 5, 7, 10, 1, 3, 10, 3, 11, -1, -1, -1, -1],\r\n    [5, 7, 0, 5, 0, 9, 7, 11, 0, 1, 0, 10, 11, 10, 0, -1],\r\n    [11, 10, 0, 11, 0, 3, 10, 5, 0, 8, 0, 7, 5, 7, 0, -1],\r\n    [11, 10, 5, 7, 11, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 8, 3, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 0, 1, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 8, 3, 1, 9, 8, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 6, 5, 2, 6, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 6, 5, 1, 2, 6, 3, 0, 8, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 6, 5, 9, 0, 6, 0, 2, 6, -1, -1, -1, -1, -1, -1, -1],\r\n    [5, 9, 8, 5, 8, 2, 5, 2, 6, 3, 2, 8, -1, -1, -1, -1],\r\n    [2, 3, 11, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [11, 0, 8, 11, 2, 0, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 1, 9, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1],\r\n    [5, 10, 6, 1, 9, 2, 9, 11, 2, 9, 8, 11, -1, -1, -1, -1],\r\n    [6, 3, 11, 6, 5, 3, 5, 1, 3, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 8, 11, 0, 11, 5, 0, 5, 1, 5, 11, 6, -1, -1, -1, -1],\r\n    [3, 11, 6, 0, 3, 6, 0, 6, 5, 0, 5, 9, -1, -1, -1, -1],\r\n    [6, 5, 9, 6, 9, 11, 11, 9, 8, -1, -1, -1, -1, -1, -1, -1],\r\n    [5, 10, 6, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [4, 3, 0, 4, 7, 3, 6, 5, 10, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 9, 0, 5, 10, 6, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1],\r\n    [10, 6, 5, 1, 9, 7, 1, 7, 3, 7, 9, 4, -1, -1, -1, -1],\r\n    [6, 1, 2, 6, 5, 1, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 2, 5, 5, 2, 6, 3, 0, 4, 3, 4, 7, -1, -1, -1, -1],\r\n    [8, 4, 7, 9, 0, 5, 0, 6, 5, 0, 2, 6, -1, -1, -1, -1],\r\n    [7, 3, 9, 7, 9, 4, 3, 2, 9, 5, 9, 6, 2, 6, 9, -1],\r\n    [3, 11, 2, 7, 8, 4, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1],\r\n    [5, 10, 6, 4, 7, 2, 4, 2, 0, 2, 7, 11, -1, -1, -1, -1],\r\n    [0, 1, 9, 4, 7, 8, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1],\r\n    [9, 2, 1, 9, 11, 2, 9, 4, 11, 7, 11, 4, 5, 10, 6, -1],\r\n    [8, 4, 7, 3, 11, 5, 3, 5, 1, 5, 11, 6, -1, -1, -1, -1],\r\n    [5, 1, 11, 5, 11, 6, 1, 0, 11, 7, 11, 4, 0, 4, 11, -1],\r\n    [0, 5, 9, 0, 6, 5, 0, 3, 6, 11, 6, 3, 8, 4, 7, -1],\r\n    [6, 5, 9, 6, 9, 11, 4, 7, 9, 7, 11, 9, -1, -1, -1, -1],\r\n    [10, 4, 9, 6, 4, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [4, 10, 6, 4, 9, 10, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1],\r\n    [10, 0, 1, 10, 6, 0, 6, 4, 0, -1, -1, -1, -1, -1, -1, -1],\r\n    [8, 3, 1, 8, 1, 6, 8, 6, 4, 6, 1, 10, -1, -1, -1, -1],\r\n    [1, 4, 9, 1, 2, 4, 2, 6, 4, -1, -1, -1, -1, -1, -1, -1],\r\n    [3, 0, 8, 1, 2, 9, 2, 4, 9, 2, 6, 4, -1, -1, -1, -1],\r\n    [0, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [8, 3, 2, 8, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1],\r\n    [10, 4, 9, 10, 6, 4, 11, 2, 3, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 8, 2, 2, 8, 11, 4, 9, 10, 4, 10, 6, -1, -1, -1, -1],\r\n    [3, 11, 2, 0, 1, 6, 0, 6, 4, 6, 1, 10, -1, -1, -1, -1],\r\n    [6, 4, 1, 6, 1, 10, 4, 8, 1, 2, 1, 11, 8, 11, 1, -1],\r\n    [9, 6, 4, 9, 3, 6, 9, 1, 3, 11, 6, 3, -1, -1, -1, -1],\r\n    [8, 11, 1, 8, 1, 0, 11, 6, 1, 9, 1, 4, 6, 4, 1, -1],\r\n    [3, 11, 6, 3, 6, 0, 0, 6, 4, -1, -1, -1, -1, -1, -1, -1],\r\n    [6, 4, 8, 11, 6, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [7, 10, 6, 7, 8, 10, 8, 9, 10, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 7, 3, 0, 10, 7, 0, 9, 10, 6, 7, 10, -1, -1, -1, -1],\r\n    [10, 6, 7, 1, 10, 7, 1, 7, 8, 1, 8, 0, -1, -1, -1, -1],\r\n    [10, 6, 7, 10, 7, 1, 1, 7, 3, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 2, 6, 1, 6, 8, 1, 8, 9, 8, 6, 7, -1, -1, -1, -1],\r\n    [2, 6, 9, 2, 9, 1, 6, 7, 9, 0, 9, 3, 7, 3, 9, -1],\r\n    [7, 8, 0, 7, 0, 6, 6, 0, 2, -1, -1, -1, -1, -1, -1, -1],\r\n    [7, 3, 2, 6, 7, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [2, 3, 11, 10, 6, 8, 10, 8, 9, 8, 6, 7, -1, -1, -1, -1],\r\n    [2, 0, 7, 2, 7, 11, 0, 9, 7, 6, 7, 10, 9, 10, 7, -1],\r\n    [1, 8, 0, 1, 7, 8, 1, 10, 7, 6, 7, 10, 2, 3, 11, -1],\r\n    [11, 2, 1, 11, 1, 7, 10, 6, 1, 6, 7, 1, -1, -1, -1, -1],\r\n    [8, 9, 6, 8, 6, 7, 9, 1, 6, 11, 6, 3, 1, 3, 6, -1],\r\n    [0, 9, 1, 11, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [7, 8, 0, 7, 0, 6, 3, 11, 0, 11, 6, 0, -1, -1, -1, -1],\r\n    [7, 11, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [3, 0, 8, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 1, 9, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [8, 1, 9, 8, 3, 1, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1],\r\n    [10, 1, 2, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 2, 10, 3, 0, 8, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1],\r\n    [2, 9, 0, 2, 10, 9, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1],\r\n    [6, 11, 7, 2, 10, 3, 10, 8, 3, 10, 9, 8, -1, -1, -1, -1],\r\n    [7, 2, 3, 6, 2, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [7, 0, 8, 7, 6, 0, 6, 2, 0, -1, -1, -1, -1, -1, -1, -1],\r\n    [2, 7, 6, 2, 3, 7, 0, 1, 9, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 6, 2, 1, 8, 6, 1, 9, 8, 8, 7, 6, -1, -1, -1, -1],\r\n    [10, 7, 6, 10, 1, 7, 1, 3, 7, -1, -1, -1, -1, -1, -1, -1],\r\n    [10, 7, 6, 1, 7, 10, 1, 8, 7, 1, 0, 8, -1, -1, -1, -1],\r\n    [0, 3, 7, 0, 7, 10, 0, 10, 9, 6, 10, 7, -1, -1, -1, -1],\r\n    [7, 6, 10, 7, 10, 8, 8, 10, 9, -1, -1, -1, -1, -1, -1, -1],\r\n    [6, 8, 4, 11, 8, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [3, 6, 11, 3, 0, 6, 0, 4, 6, -1, -1, -1, -1, -1, -1, -1],\r\n    [8, 6, 11, 8, 4, 6, 9, 0, 1, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 4, 6, 9, 6, 3, 9, 3, 1, 11, 3, 6, -1, -1, -1, -1],\r\n    [6, 8, 4, 6, 11, 8, 2, 10, 1, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 2, 10, 3, 0, 11, 0, 6, 11, 0, 4, 6, -1, -1, -1, -1],\r\n    [4, 11, 8, 4, 6, 11, 0, 2, 9, 2, 10, 9, -1, -1, -1, -1],\r\n    [10, 9, 3, 10, 3, 2, 9, 4, 3, 11, 3, 6, 4, 6, 3, -1],\r\n    [8, 2, 3, 8, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 9, 0, 2, 3, 4, 2, 4, 6, 4, 3, 8, -1, -1, -1, -1],\r\n    [1, 9, 4, 1, 4, 2, 2, 4, 6, -1, -1, -1, -1, -1, -1, -1],\r\n    [8, 1, 3, 8, 6, 1, 8, 4, 6, 6, 10, 1, -1, -1, -1, -1],\r\n    [10, 1, 0, 10, 0, 6, 6, 0, 4, -1, -1, -1, -1, -1, -1, -1],\r\n    [4, 6, 3, 4, 3, 8, 6, 10, 3, 0, 3, 9, 10, 9, 3, -1],\r\n    [10, 9, 4, 6, 10, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [4, 9, 5, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 8, 3, 4, 9, 5, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1],\r\n    [5, 0, 1, 5, 4, 0, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1],\r\n    [11, 7, 6, 8, 3, 4, 3, 5, 4, 3, 1, 5, -1, -1, -1, -1],\r\n    [9, 5, 4, 10, 1, 2, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1],\r\n    [6, 11, 7, 1, 2, 10, 0, 8, 3, 4, 9, 5, -1, -1, -1, -1],\r\n    [7, 6, 11, 5, 4, 10, 4, 2, 10, 4, 0, 2, -1, -1, -1, -1],\r\n    [3, 4, 8, 3, 5, 4, 3, 2, 5, 10, 5, 2, 11, 7, 6, -1],\r\n    [7, 2, 3, 7, 6, 2, 5, 4, 9, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 5, 4, 0, 8, 6, 0, 6, 2, 6, 8, 7, -1, -1, -1, -1],\r\n    [3, 6, 2, 3, 7, 6, 1, 5, 0, 5, 4, 0, -1, -1, -1, -1],\r\n    [6, 2, 8, 6, 8, 7, 2, 1, 8, 4, 8, 5, 1, 5, 8, -1],\r\n    [9, 5, 4, 10, 1, 6, 1, 7, 6, 1, 3, 7, -1, -1, -1, -1],\r\n    [1, 6, 10, 1, 7, 6, 1, 0, 7, 8, 7, 0, 9, 5, 4, -1],\r\n    [4, 0, 10, 4, 10, 5, 0, 3, 10, 6, 10, 7, 3, 7, 10, -1],\r\n    [7, 6, 10, 7, 10, 8, 5, 4, 10, 4, 8, 10, -1, -1, -1, -1],\r\n    [6, 9, 5, 6, 11, 9, 11, 8, 9, -1, -1, -1, -1, -1, -1, -1],\r\n    [3, 6, 11, 0, 6, 3, 0, 5, 6, 0, 9, 5, -1, -1, -1, -1],\r\n    [0, 11, 8, 0, 5, 11, 0, 1, 5, 5, 6, 11, -1, -1, -1, -1],\r\n    [6, 11, 3, 6, 3, 5, 5, 3, 1, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 2, 10, 9, 5, 11, 9, 11, 8, 11, 5, 6, -1, -1, -1, -1],\r\n    [0, 11, 3, 0, 6, 11, 0, 9, 6, 5, 6, 9, 1, 2, 10, -1],\r\n    [11, 8, 5, 11, 5, 6, 8, 0, 5, 10, 5, 2, 0, 2, 5, -1],\r\n    [6, 11, 3, 6, 3, 5, 2, 10, 3, 10, 5, 3, -1, -1, -1, -1],\r\n    [5, 8, 9, 5, 2, 8, 5, 6, 2, 3, 8, 2, -1, -1, -1, -1],\r\n    [9, 5, 6, 9, 6, 0, 0, 6, 2, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 5, 8, 1, 8, 0, 5, 6, 8, 3, 8, 2, 6, 2, 8, -1],\r\n    [1, 5, 6, 2, 1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 3, 6, 1, 6, 10, 3, 8, 6, 5, 6, 9, 8, 9, 6, -1],\r\n    [10, 1, 0, 10, 0, 6, 9, 5, 0, 5, 6, 0, -1, -1, -1, -1],\r\n    [0, 3, 8, 5, 6, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [10, 5, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [11, 5, 10, 7, 5, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [11, 5, 10, 11, 7, 5, 8, 3, 0, -1, -1, -1, -1, -1, -1, -1],\r\n    [5, 11, 7, 5, 10, 11, 1, 9, 0, -1, -1, -1, -1, -1, -1, -1],\r\n    [10, 7, 5, 10, 11, 7, 9, 8, 1, 8, 3, 1, -1, -1, -1, -1],\r\n    [11, 1, 2, 11, 7, 1, 7, 5, 1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 8, 3, 1, 2, 7, 1, 7, 5, 7, 2, 11, -1, -1, -1, -1],\r\n    [9, 7, 5, 9, 2, 7, 9, 0, 2, 2, 11, 7, -1, -1, -1, -1],\r\n    [7, 5, 2, 7, 2, 11, 5, 9, 2, 3, 2, 8, 9, 8, 2, -1],\r\n    [2, 5, 10, 2, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1],\r\n    [8, 2, 0, 8, 5, 2, 8, 7, 5, 10, 2, 5, -1, -1, -1, -1],\r\n    [9, 0, 1, 5, 10, 3, 5, 3, 7, 3, 10, 2, -1, -1, -1, -1],\r\n    [9, 8, 2, 9, 2, 1, 8, 7, 2, 10, 2, 5, 7, 5, 2, -1],\r\n    [1, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 8, 7, 0, 7, 1, 1, 7, 5, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 0, 3, 9, 3, 5, 5, 3, 7, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 8, 7, 5, 9, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [5, 8, 4, 5, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1],\r\n    [5, 0, 4, 5, 11, 0, 5, 10, 11, 11, 3, 0, -1, -1, -1, -1],\r\n    [0, 1, 9, 8, 4, 10, 8, 10, 11, 10, 4, 5, -1, -1, -1, -1],\r\n    [10, 11, 4, 10, 4, 5, 11, 3, 4, 9, 4, 1, 3, 1, 4, -1],\r\n    [2, 5, 1, 2, 8, 5, 2, 11, 8, 4, 5, 8, -1, -1, -1, -1],\r\n    [0, 4, 11, 0, 11, 3, 4, 5, 11, 2, 11, 1, 5, 1, 11, -1],\r\n    [0, 2, 5, 0, 5, 9, 2, 11, 5, 4, 5, 8, 11, 8, 5, -1],\r\n    [9, 4, 5, 2, 11, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [2, 5, 10, 3, 5, 2, 3, 4, 5, 3, 8, 4, -1, -1, -1, -1],\r\n    [5, 10, 2, 5, 2, 4, 4, 2, 0, -1, -1, -1, -1, -1, -1, -1],\r\n    [3, 10, 2, 3, 5, 10, 3, 8, 5, 4, 5, 8, 0, 1, 9, -1],\r\n    [5, 10, 2, 5, 2, 4, 1, 9, 2, 9, 4, 2, -1, -1, -1, -1],\r\n    [8, 4, 5, 8, 5, 3, 3, 5, 1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 4, 5, 1, 0, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [8, 4, 5, 8, 5, 3, 9, 0, 5, 0, 3, 5, -1, -1, -1, -1],\r\n    [9, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [4, 11, 7, 4, 9, 11, 9, 10, 11, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 8, 3, 4, 9, 7, 9, 11, 7, 9, 10, 11, -1, -1, -1, -1],\r\n    [1, 10, 11, 1, 11, 4, 1, 4, 0, 7, 4, 11, -1, -1, -1, -1],\r\n    [3, 1, 4, 3, 4, 8, 1, 10, 4, 7, 4, 11, 10, 11, 4, -1],\r\n    [4, 11, 7, 9, 11, 4, 9, 2, 11, 9, 1, 2, -1, -1, -1, -1],\r\n    [9, 7, 4, 9, 11, 7, 9, 1, 11, 2, 11, 1, 0, 8, 3, -1],\r\n    [11, 7, 4, 11, 4, 2, 2, 4, 0, -1, -1, -1, -1, -1, -1, -1],\r\n    [11, 7, 4, 11, 4, 2, 8, 3, 4, 3, 2, 4, -1, -1, -1, -1],\r\n    [2, 9, 10, 2, 7, 9, 2, 3, 7, 7, 4, 9, -1, -1, -1, -1],\r\n    [9, 10, 7, 9, 7, 4, 10, 2, 7, 8, 7, 0, 2, 0, 7, -1],\r\n    [3, 7, 10, 3, 10, 2, 7, 4, 10, 1, 10, 0, 4, 0, 10, -1],\r\n    [1, 10, 2, 8, 7, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [4, 9, 1, 4, 1, 7, 7, 1, 3, -1, -1, -1, -1, -1, -1, -1],\r\n    [4, 9, 1, 4, 1, 7, 0, 8, 1, 8, 7, 1, -1, -1, -1, -1],\r\n    [4, 0, 3, 7, 4, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [4, 8, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [3, 0, 9, 3, 9, 11, 11, 9, 10, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 1, 10, 0, 10, 8, 8, 10, 11, -1, -1, -1, -1, -1, -1, -1],\r\n    [3, 1, 10, 11, 3, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 2, 11, 1, 11, 9, 9, 11, 8, -1, -1, -1, -1, -1, -1, -1],\r\n    [3, 0, 9, 3, 9, 11, 1, 2, 9, 2, 11, 9, -1, -1, -1, -1],\r\n    [0, 2, 11, 8, 0, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [3, 2, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [2, 3, 8, 2, 8, 10, 10, 8, 9, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 10, 2, 0, 9, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [2, 3, 8, 2, 8, 10, 0, 1, 8, 1, 10, 8, -1, -1, -1, -1],\r\n    [1, 10, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 3, 8, 9, 1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 9, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 3, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n]));\r\nfunction polygonise(corners, values, level) {\r\n    let triangles = null;\r\n    // get the marching cube index based on corners\r\n    let cubeindex = 0;\r\n    if (values[0] < level)\r\n        cubeindex |= 1;\r\n    if (values[1] < level)\r\n        cubeindex |= 2;\r\n    if (values[2] < level)\r\n        cubeindex |= 4;\r\n    if (values[3] < level)\r\n        cubeindex |= 8;\r\n    if (values[4] < level)\r\n        cubeindex |= 16;\r\n    if (values[5] < level)\r\n        cubeindex |= 32;\r\n    if (values[6] < level)\r\n        cubeindex |= 64;\r\n    if (values[7] < level)\r\n        cubeindex |= 128;\r\n    /* Cube is entirely in/out of the surface */\r\n    let vertlist = []; // 12\r\n    if (edgeTable[cubeindex] == 0)\r\n        return Mesh.zero();\r\n    /* Find the vertices where the surface intersects the cube */\r\n    if (edgeTable[cubeindex] & 1)\r\n        vertlist[0] = lerp(level, corners[0], corners[1], values[0], values[1]);\r\n    if (edgeTable[cubeindex] & 2)\r\n        vertlist[1] = lerp(level, corners[1], corners[2], values[1], values[2]);\r\n    if (edgeTable[cubeindex] & 4)\r\n        vertlist[2] = lerp(level, corners[2], corners[3], values[2], values[3]);\r\n    if (edgeTable[cubeindex] & 8)\r\n        vertlist[3] = lerp(level, corners[3], corners[0], values[3], values[0]);\r\n    if (edgeTable[cubeindex] & 16)\r\n        vertlist[4] = lerp(level, corners[4], corners[5], values[4], values[5]);\r\n    if (edgeTable[cubeindex] & 32)\r\n        vertlist[5] = lerp(level, corners[5], corners[6], values[5], values[6]);\r\n    if (edgeTable[cubeindex] & 64)\r\n        vertlist[6] = lerp(level, corners[6], corners[7], values[6], values[7]);\r\n    if (edgeTable[cubeindex] & 128)\r\n        vertlist[7] = lerp(level, corners[7], corners[4], values[7], values[4]);\r\n    if (edgeTable[cubeindex] & 256)\r\n        vertlist[8] = lerp(level, corners[0], corners[4], values[0], values[4]);\r\n    if (edgeTable[cubeindex] & 512)\r\n        vertlist[9] = lerp(level, corners[1], corners[5], values[1], values[5]);\r\n    if (edgeTable[cubeindex] & 1024)\r\n        vertlist[10] = lerp(level, corners[2], corners[6], values[2], values[6]);\r\n    if (edgeTable[cubeindex] & 2048)\r\n        vertlist[11] = lerp(level, corners[3], corners[7], values[3], values[7]);\r\n    // create triangles\r\n    // ntriang = 0;\r\n    // for (let i = 0; triTable[cubeindex][i]!=-1; i+=3) {\r\n    //     triangles[ntriang].p[0] = vertlist[triTable[cubeindex][i  ]];\r\n    //     triangles[ntriang].p[1] = vertlist[triTable[cubeindex][i+1]];\r\n    //     triangles[ntriang].p[2] = vertlist[triTable[cubeindex][i+2]];\r\n    //     ntriang++;\r\n    // }\r\n    // return(ntriang);\r\n    return Mesh.zero();\r\n}\r\n/*\r\n    Linearly interpolate the position where an isosurface cuts\r\n    an edge between two vertices, each with their own scalar value\r\n */\r\nfunction lerp(level, p1, p2, valp1, valp2) {\r\n    return Vector3.fromLerpWeights(p1, p2, valp1, valp2, level);\r\n}\r\n\n;// CONCATENATED MODULE: ./src/app/app.ts\nclass App {\r\n    constructor(gl, des = "") {\r\n        // unique constructor\r\n        this.gl = gl;\r\n        this.name = this.constructor.name;\r\n        this.description = des;\r\n    }\r\n    ui(ui) {\r\n        // setup for UI\r\n    }\r\n    start() {\r\n        // additional setup of state\r\n    }\r\n    update(state) {\r\n        // updating state\r\n    }\r\n    draw(gl) {\r\n        // drawing state\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/system/ui.ts\n// name:    ui.js\r\n// author:  Jos Feenstra\r\n// purpose: lets create the UI using html & dom api, because why the hell not\r\n\r\nclass UI {\r\n    constructor(frame) {\r\n        this.globalContext = frame;\r\n        this.currentContext = frame;\r\n    }\r\n    // the context system makes sure that ui additions appear under the currently active,\r\n    // selected app, and that these ui elements are removed when switching to another app.\r\n    toggleVisibility() {\r\n        // simple toggle\r\n        if (this.globalContext.hidden) {\r\n            this.show();\r\n        }\r\n        else {\r\n            this.hide();\r\n        }\r\n    }\r\n    hide() {\r\n        this.globalContext.hidden = true;\r\n    }\r\n    show() {\r\n        this.globalContext.hidden = false;\r\n    }\r\n    addContext(appName) {\r\n        this.currentContext = this.globalContext;\r\n        let appDiv = this.addDiv(appName + " app-interface");\r\n        this.currentContext = appDiv;\r\n    }\r\n    setContext(appName) {\r\n        this.globalContext.getElementsByClassName(appName);\r\n    }\r\n    removeContext(appName) {\r\n        this.setContext(appName);\r\n        let count = this.currentContext.childElementCount;\r\n        for (let i = count - 1; i >= 0; i -= 1) {\r\n            this.currentContext.removeChild(this.currentContext.children.item(i));\r\n        }\r\n        let temp = this.currentContext;\r\n        this.currentContext = this.globalContext;\r\n        this.currentContext.removeChild(temp);\r\n    }\r\n    addElement(element, className = "") {\r\n        let el = document.createElement(element);\r\n        el.className = className;\r\n        this.currentContext.appendChild(el);\r\n        return el;\r\n    }\r\n    addDiv(classname, items = []) {\r\n        let div = this.addElement("div", classname);\r\n        items.forEach((item) => {\r\n            div.appendChild(item);\r\n        });\r\n        return div;\r\n    }\r\n    addBooleanParameter(param, onInput = () => { }) {\r\n        // create hacky button\r\n        // <label class="check-container">\r\n        //   <input type="checkbox" checked="checked">\r\n        //   <span class="checkmark"></span>\r\n        // </label>\r\n        let checkbox = this.addElement("input", "checkbox");\r\n        checkbox.type = "checkbox";\r\n        checkbox.addEventListener("change", () => {\r\n            let state = checkbox.checked;\r\n            param.set(state ? 1 : 0);\r\n            onInput(checkbox.valueAsNumber);\r\n            text1.innerText = param.name;\r\n        });\r\n        checkbox.checked = param.get() == 1;\r\n        // this needs to be done to make css happy\r\n        let checkcontainer = this.addElement("label", "check-container");\r\n        let checkmark = this.addElement("span", "checkmark");\r\n        checkcontainer.appendChild(checkbox);\r\n        checkcontainer.appendChild(checkmark);\r\n        // text\r\n        let text1 = this.addElement("p", "control-text");\r\n        text1.innerText = param.name;\r\n        // TODO update beyond our control\r\n        // param.onset = () => {\r\n        //     // console.log("TODO");\r\n        // };\r\n        this.addDiv("control", [text1, checkcontainer]);\r\n        return checkbox;\r\n    }\r\n    addParameter(param, onInput = () => { }) {\r\n        let p;\r\n        if (param instanceof EnumParameter) {\r\n            p = param.p;\r\n        }\r\n        else {\r\n            p = param;\r\n        }\r\n        // create slider itself\r\n        let slider = this.addRangeInput(p, onInput);\r\n        // create slider title\r\n        let text1 = this.addElement("p", "control-text");\r\n        text1.innerText = p.name;\r\n        // create slider value indicator\r\n        let text2 = this.addElement("p", "control-value");\r\n        if (param instanceof EnumParameter) {\r\n            text2.innerText = param.getName();\r\n        }\r\n        else {\r\n            text2.innerText = slider.value;\r\n        }\r\n        // put them all together\r\n        this.addDiv("control", [text1, slider, text2]);\r\n        // on reverse update\r\n        param.setSliderAndText(slider, text2);\r\n        // on update by user\r\n        slider.oninput = () => {\r\n            p.set(slider.valueAsNumber, false);\r\n            onInput(slider.valueAsNumber);\r\n            if (param instanceof EnumParameter) {\r\n                text2.innerText = param.getName();\r\n            }\r\n            else {\r\n                text2.innerText = slider.value;\r\n            }\r\n        };\r\n        return slider;\r\n    }\r\n    addRangeInput(param, onInput = () => { }) {\r\n        // a slider looks like this : <input type="range" min="1" max="100" step="1" value="50">\r\n        let slider = this.addElement("input", "control-slider");\r\n        slider.type = "range";\r\n        slider.min = param.min.toString();\r\n        slider.max = param.max.toString();\r\n        slider.valueAsNumber = param.state;\r\n        slider.step = param.step.toString();\r\n        return slider;\r\n    }\r\n    addText(text) {\r\n        let p = this.addElement("p", "ui-text");\r\n        p.innerText = text;\r\n    }\r\n    addButton(name, callback) {\r\n        let button = this.addElement("button", "control-button");\r\n        button.innerText = name;\r\n        button.addEventListener("click", callback);\r\n        let text1 = this.addElement("p", "control-text");\r\n        let control = this.addDiv("control", [text1, button]);\r\n        return control;\r\n    }\r\n    addDropdown(enumParam, onchange) {\r\n        // <select>\r\n        //  <option>Cappuccino</option>\r\n        //  <option>Mocha</option>\r\n        // </select>\r\n        let count = enumParam.values.length;\r\n        let dropdownSelector = this.addElement("select", "enum-selector dropdown-select");\r\n        for (let i = 0; i < count; i++) {\r\n            let o = this.addElement("option", "enum-item");\r\n            o.innerText = enumParam.values[i];\r\n            dropdownSelector.appendChild(o);\r\n        }\r\n        // console.log(e);\r\n        dropdownSelector.addEventListener("change", (e) => {\r\n            let target = e.target;\r\n            let i = target.selectedIndex;\r\n            enumParam.set(i);\r\n            onchange(i);\r\n        });\r\n        this.addDiv("dropdown-dark", [dropdownSelector]);\r\n        return dropdownSelector;\r\n    }\r\n}\r\n// a slider parameter\r\nclass Parameter {\r\n    constructor(name, state, min = -Infinity, max = Infinity, step = 0.1) {\r\n        this.name = name;\r\n        this.min = min;\r\n        this.max = max;\r\n        this.step = step;\r\n        this.state = state;\r\n        this.set(this.state);\r\n    }\r\n    static new(name, state, min = -Infinity, max = Infinity, step = 0.1) {\r\n        return new Parameter(name, state, min, max, step);\r\n    }\r\n    static newBoolean(name, state) {\r\n        return new Parameter(name, state ? 1 : 0, 0, 1, 1);\r\n    }\r\n    get() {\r\n        return this.state;\r\n    }\r\n    set(state, activateOnSet = true) {\r\n        // something is still wrong here...\r\n        let clamped = GeonMath.clamp(state, this.min, this.max);\r\n        let rest = state - this.min;\r\n        let times = Math.round(rest / this.step);\r\n        let stepped = this.min + this.step * times;\r\n        this.state = GeonMath.clamp(stepped, this.min, this.max);\r\n        if (activateOnSet && this.slider && this.text)\r\n            this.onset();\r\n    }\r\n    getNPermutations() {\r\n        return Math.min((this.max - this.min) / this.step + 1);\r\n    }\r\n    setSliderAndText(slider, text) {\r\n        this.slider = slider;\r\n        this.text = text;\r\n    }\r\n    onset() {\r\n        this.slider.valueAsNumber = this.state;\r\n        this.text.innerText = this.state.toString();\r\n    }\r\n}\r\n// a parameter representing distinct states\r\nclass EnumParameter {\r\n    constructor(p, values) {\r\n        this.p = p;\r\n        this.values = values;\r\n    }\r\n    static new(name, state, descriptions) {\r\n        return new EnumParameter(new Parameter(name, state, 0, descriptions.length - 1, 1), descriptions);\r\n    }\r\n    getName() {\r\n        return this.values[this.get()];\r\n    }\r\n    // passthroughs\r\n    get() {\r\n        return this.p.get();\r\n    }\r\n    set(state) {\r\n        return this.p.set(state);\r\n    }\r\n    getNPermutations() {\r\n        return this.p.getNPermutations();\r\n    }\r\n    setSliderAndText(slider, text) {\r\n        this.slider = slider;\r\n        this.text = text;\r\n    }\r\n    onset() {\r\n        this.slider.valueAsNumber = this.get();\r\n        this.text.innerText = this.getName();\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/app/swap-app.ts\n// name:    swap-app\r\n// author:  Jos Feenstra\r\n// purpose: swap between different apps.\r\n//          - factory for initiazing these apps\r\n//          - making sure core deletes old apps\r\n\r\n\r\nclass SwapApp extends App {\r\n    constructor(gl, core, possibleApps) {\r\n        super(gl);\r\n        this.currentAppIndex = -1;\r\n        this.isuihidden = false;\r\n        this.core = core;\r\n        this.possibleApps = possibleApps;\r\n    }\r\n    getAppNames() {\r\n        let names = [];\r\n        let count = this.possibleApps.length;\r\n        for (let i = 0; i < count; i++) {\r\n            names.push(this.possibleApps[i].name.replace("App", ""));\r\n        }\r\n        return names;\r\n    }\r\n    ui(ui) {\r\n        let names = this.getAppNames();\r\n        this.param = EnumParameter.new("apps", 0, names);\r\n        ui.addDropdown(this.param, (i) => {\r\n            this.swap(i);\r\n        });\r\n    }\r\n    swapFromUrl(hash, ifnot) {\r\n        // select one of the apps based on an url\r\n        let test = hash.substr(1);\r\n        let names = this.getAppNames();\r\n        for (let i = 0; i < names.length; i++) {\r\n            if (names[i].toLowerCase() === test) {\r\n                this.swap(i);\r\n                return;\r\n            }\r\n        }\r\n        // no match\r\n        console.log("no hash match, defaulting...");\r\n        this.swap(ifnot);\r\n    }\r\n    swap(index) {\r\n        // todo do some range checking\r\n        let AppType = this.possibleApps[index];\r\n        if (this.currentAppIndex > -1) {\r\n            let PreviousType = this.possibleApps[this.currentAppIndex];\r\n            console.log("removing", PreviousType.name);\r\n            this.core.removeApp(PreviousType.name);\r\n        }\r\n        console.log("constructing", AppType.name);\r\n        this.currentAppIndex = index;\r\n        let app = new AppType(this.gl);\r\n        \r\n        this.core.addApp(app);\r\n    }\r\n    update(state) {\r\n        if (state.IsKeyPressed("m")) {\r\n            // simple toggle\r\n            this.core.ui.toggleVisibility();\r\n        }\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/data/int-cube.ts\n\r\n// a Cube of voxels\r\nclass IntCube {\r\n    constructor(height, width, depth, data = []) {\r\n        this._height = height;\r\n        this._width = width;\r\n        this._depth = depth;\r\n        let size = this._width * this._height * this._depth;\r\n        this.data = new Int32Array(size);\r\n        if (data == [] || data.length == 0)\r\n            this.fill(0);\r\n        else {\r\n            this.setData(data);\r\n        }\r\n    }\r\n    size() {\r\n        return this._width * this._height * this._depth;\r\n    }\r\n    // shallow copy\r\n    clone() {\r\n        let clone = new IntCube(this._height, this._width, this._depth);\r\n        clone.data = this.data;\r\n        return clone;\r\n    }\r\n    setData(data) {\r\n        if (data.length != this.size())\r\n            throw "data.length does not match width * height " + data.length.toString();\r\n        this.data.set(data);\r\n    }\r\n    fill(value) {\r\n        let size = this.size();\r\n        for (let i = 0; i < size; i++) {\r\n            this.data[i] = value;\r\n        }\r\n    }\r\n    inRange(i, j, k) {\r\n        return !(i < 0 || j < 0 || k < 0 || i > this._width - 1 || j > this._height - 1 || k > this._depth - 1);\r\n    }\r\n    getIndex(i, j, k) {\r\n        return i * (this._height * this._depth) + j * this._depth + k;\r\n    }\r\n    getCoords(index) {\r\n        // javascript, dont you dare turn  \'int / int\' into a float...\r\n        let i = Math.floor(index / (this._height * this._depth)) % this._width;\r\n        let j = Math.floor(index / this._depth) % this._height;\r\n        let k = index % this._depth;\r\n        return new Vector3(i, j, k);\r\n    }\r\n    get(i, j, k) {\r\n        return this.data[this.getIndex(i, j, k)];\r\n    }\r\n    tryGet(i, j, k) {\r\n        if (this.inRange(i, j, k)) {\r\n            return this.data[this.getIndex(i, j, k)];\r\n        }\r\n        else {\r\n            return;\r\n        }\r\n    }\r\n    set(i, j, k, value) {\r\n        this.data[this.getIndex(i, j, k)] = value;\r\n    }\r\n    trySet(i, j, k, value) {\r\n        if (this.inRange(i, j, k)) {\r\n            this.data[this.getIndex(i, j, k)] = value;\r\n        }\r\n    }\r\n    iter(callbackfn) {\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            callbackfn(this.data[i], i);\r\n        }\r\n    }\r\n    map(callbackfn) {\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            this.data[i] = callbackfn(this.data[i], i);\r\n        }\r\n    }\r\n    trueForAll(callbackfn) {\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            if (!callbackfn(this.data[i], i)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/geo/circle2.ts\n\r\n\r\nclass Circle2 {\r\n    constructor(center, radius) {\r\n        this.center = center;\r\n        this.radius = radius;\r\n    }\r\n    // thank you mr Mitteldorf for making me remember how basic math works\r\n    // http://mathforum.org/library/drmath/view/53027.html\r\n    // calculate the centers of two circles, defined by two points and a radius\r\n    static centersFromPPR(a, b, radius) {\r\n        // throw new Error("Method not implemented.");\r\n        // get in between length and halfway point\r\n        let normal = b.clone().sub(a);\r\n        let dis = normal.length();\r\n        let middle = a\r\n            .clone()\r\n            .add(b)\r\n            .scale(1 / 2);\r\n        // scalar length on mirror line (pythagoras)\r\n        let value = Math.pow(radius, 2) - Math.pow((dis / 2), 2);\r\n        if (value < -Const.TOLERANCE) {\r\n            // no sollution\r\n            return [];\r\n        }\r\n        else if (value < Const.TOLERANCE) {\r\n            // center roughly in the middle, so just return the middle\r\n            return [middle];\r\n        }\r\n        else {\r\n            // two circles possible:\r\n            let disToCenter = Math.pow(value, 0.5);\r\n            let normY = new Vector2(normal.y, -normal.x).normalize();\r\n            // move the middle point up and down\r\n            return [\r\n                middle.clone().add(normY.clone().scale(disToCenter)),\r\n                middle.clone().add(normY.clone().scale(-disToCenter)),\r\n            ];\r\n        }\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/geo/circle3.ts\n// purpose: represents a 3d circle\r\n\r\n\r\nclass Circle3 {\r\n    constructor(plane, radius) {\r\n        this.plane = plane;\r\n        this.radius = radius;\r\n    }\r\n    static fromCircle2(circle2, plane = Plane.WorldXY()) {\r\n        // elevate center of circle, make it the center of a plane\r\n        let center3d = plane.pushToWorld(circle2.center.to3D());\r\n        plane = plane.clone();\r\n        plane.center = center3d;\r\n        return new Circle3(plane, circle2.radius);\r\n    }\r\n    includes(p) {\r\n        // test if the point falls in range of the circle, by regarding\r\n        // the circle as a torus\r\n        // CHANGE NOTE: i set this to zero, for testing\r\n        // vertical error\r\n        let [projPoint, yError] = this.plane.closestPoint(p);\r\n        yError = yError / 3;\r\n        // horizontal error: get the difference between point\r\n        let xError = this.plane.center.clone().disTo(projPoint) - this.radius;\r\n        // length of total error vector needs to be smaller than the given\r\n        // tolerance\r\n        return Math.pow(yError, 2) + Math.pow(xError, 2) < Const.TOL_SQUARED;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/math/domain.ts\n// domain.ts\r\n//\r\n// author: Jos Feenstra\r\n// purpose: general representation of a domain / range / bound of numbers\r\n//\r\n\r\n\r\nclass domain_Domain {\r\n    constructor(t0 = 0.0, t1 = 1.0) {\r\n        // if (t0 > t1) console.error("created a domain with negative size.");\r\n        // if (t0 == t1) console.warn("created a domain with size is 0.0. could cause problems");\r\n        this.t0 = t0;\r\n        this.t1 = t1;\r\n    }\r\n    static fromRadius(r) {\r\n        return new domain_Domain(-r, r);\r\n    }\r\n    static fromInclude(data) {\r\n        // create a new domain which bounds all parsed values\r\n        let min = Number.MAX_VALUE;\r\n        let max = Number.MIN_VALUE;\r\n        for (let i = 0; i < data.length; i++) {\r\n            if (data[i] < min)\r\n                min = data[i];\r\n            if (data[i] > max)\r\n                max = data[i];\r\n        }\r\n        return new domain_Domain(min, max);\r\n    }\r\n    offset(t0Offset, t1Offset) {\r\n        this.t0 += t0Offset;\r\n        this.t1 += t1Offset;\r\n        return this;\r\n    }\r\n    includes(value) {\r\n        // note: including t0, including t1\r\n        return value >= this.t0 && value <= this.t1;\r\n    }\r\n    size() {\r\n        // the size or length of this domain\r\n        return this.t1 - this.t0;\r\n    }\r\n    normalize(value) {\r\n        // normalize a parameter\r\n        return (value - this.t0) / this.size();\r\n    }\r\n    elevate(t) {\r\n        // elevate a normalized parameter to the parameter space of this domain\r\n        return t * this.size() + this.t0;\r\n    }\r\n    remap(value, other = new domain_Domain()) {\r\n        // normalize a value, then elevate it to a new domain\r\n        let norm = this.normalize(value);\r\n        return other.elevate(norm);\r\n    }\r\n    *iter(count) {\r\n        // iterate over this Domain \'count\' number of times\r\n        let step = this.size() / count;\r\n        for (let i = this.t0; i < this.t1; i += step) {\r\n            yield i;\r\n        }\r\n    }\r\n    *iterStep(step) {\r\n        // iterate over this domain with a stepsize of \'step\'\r\n        for (let i = this.t0; i < this.t1; i += step) {\r\n            yield i;\r\n        }\r\n    }\r\n    // comform a number to the bound\r\n    comform(value) {\r\n        if (value < this.t0) {\r\n            return this.t0;\r\n        }\r\n        else if (value > this.t1) {\r\n            return this.t1;\r\n        }\r\n        else {\r\n            return value;\r\n        }\r\n    }\r\n}\r\nclass domain_Domain2 {\r\n    constructor(x = new domain_Domain(), y = new domain_Domain()) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    static fromRadius(r) {\r\n        return new domain_Domain2(domain_Domain.fromRadius(r), domain_Domain.fromRadius(r));\r\n    }\r\n    static fromBounds(x0, x1, y0, y1) {\r\n        return new domain_Domain2(new domain_Domain(x0, x1), new domain_Domain(y0, y1));\r\n    }\r\n    static fromInclude(data) {\r\n        // note : could be quicker by going verbose, this now iterates over data 4 times\r\n        return new domain_Domain2(domain_Domain.fromInclude(data.getColumn(0)), domain_Domain.fromInclude(data.getColumn(1)));\r\n    }\r\n    offset(xXyYoffset) {\r\n        let off = xXyYoffset;\r\n        if (off.length != 4)\r\n            throw "need 4 values";\r\n        this.x.offset(off[0], off[1]);\r\n        this.y.offset(off[2], off[3]);\r\n        return this;\r\n    }\r\n    includes(value) {\r\n        // note: including t0, including t1\r\n        return this.x.includes(value.x) && this.y.includes(value.y);\r\n    }\r\n    size() {\r\n        // the size or length of this domain\r\n        return new Vector2(this.x.size(), this.y.size());\r\n    }\r\n    normalize(value) {\r\n        // normalize a parameter\r\n        return new Vector2(this.x.normalize(value.x), this.y.normalize(value.y));\r\n    }\r\n    elevate(t) {\r\n        // elevate a normalized parameter to the parameter space of this domain\r\n        return new Vector2(this.x.elevate(t.x), this.y.elevate(t.y));\r\n    }\r\n    remap(value, other = new domain_Domain2()) {\r\n        // normalize a value, then elevate it to a new domain\r\n        let norm = this.normalize(value);\r\n        return other.elevate(norm);\r\n    }\r\n    corners() {\r\n        // render the extends of this boundary / domain\r\n        let dim = 2;\r\n        let corners = Math.pow(2, dim);\r\n        let data = [];\r\n        for (let x of [this.x.t0, this.x.t1]) {\r\n            for (let y of [this.y.t0, this.y.t1]) {\r\n                data.push(new Vector2(x, y));\r\n            }\r\n        }\r\n        return data;\r\n    }\r\n}\r\nclass domain_Domain3 {\r\n    constructor(x = new domain_Domain(), y = new domain_Domain(), z = new domain_Domain()) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n    }\r\n    static fromBounds(x0, x1, y0, y1, z0, z1) {\r\n        return new domain_Domain3(new domain_Domain(x0, x1), new domain_Domain(y0, y1), new domain_Domain(z0, z1));\r\n    }\r\n    static fromRadius(r) {\r\n        return new domain_Domain3(domain_Domain.fromRadius(r), domain_Domain.fromRadius(r), domain_Domain.fromRadius(r));\r\n    }\r\n    static fromRadii(rx, ry, rz) {\r\n        return new domain_Domain3(domain_Domain.fromRadius(rx), domain_Domain.fromRadius(ry), domain_Domain.fromRadius(rz));\r\n    }\r\n    static fromInclude(data) {\r\n        // note : could be quicker by going verbose, this now iterates over data 6 times\r\n        return new domain_Domain3(domain_Domain.fromInclude(data.getColumn(0)), domain_Domain.fromInclude(data.getColumn(1)), domain_Domain.fromInclude(data.getColumn(2)));\r\n    }\r\n    offset(xXyYoffset) {\r\n        let off = xXyYoffset;\r\n        if (off.length != 6)\r\n            throw "need 6 values";\r\n        this.x.offset(off[0], off[1]);\r\n        this.y.offset(off[2], off[3]);\r\n        this.z.offset(off[4], off[5]);\r\n        return this;\r\n    }\r\n    includes(value) {\r\n        // note: including t0, including t1\r\n        return this.x.includes(value.x) && this.y.includes(value.y) && this.z.includes(value.z);\r\n    }\r\n    size() {\r\n        // the size or length of this domain\r\n        return new Vector3(this.x.size(), this.y.size(), this.z.size());\r\n    }\r\n    normalize(value) {\r\n        // normalize a parameter\r\n        return new Vector3(this.x.normalize(value.x), this.y.normalize(value.y), this.z.normalize(value.z));\r\n    }\r\n    elevate(t) {\r\n        // elevate a normalized parameter to the parameter space of this domain\r\n        return new Vector3(this.x.elevate(t.x), this.y.elevate(t.y), this.z.elevate(t.z));\r\n    }\r\n    remap(value, other = new domain_Domain3()) {\r\n        // normalize a value, then elevate it to a new domain\r\n        let norm = this.normalize(value);\r\n        return other.elevate(norm);\r\n    }\r\n    remapAll(values, other = new domain_Domain3()) {\r\n        // normalize a value, then elevate it to a new domain\r\n        let newValues = new Vector3Array(values.count());\r\n        for (let i = 0; i < values.count(); i++) {\r\n            let norm = this.normalize(values.getVector(i));\r\n            newValues.setVector(i, other.elevate(norm));\r\n        }\r\n        return newValues;\r\n    }\r\n    corners(matrix) {\r\n        // render the extends of this boundary / domain\r\n        let dim = 3;\r\n        let corners = 2 ^ dim;\r\n        let data = [];\r\n        for (let x of [this.x.t0, this.x.t1]) {\r\n            for (let y of [this.y.t0, this.y.t1]) {\r\n                for (let z of [this.z.t0, this.z.t1]) {\r\n                    data.push(matrix.multiplyVector(new Vector3(x, y, z)));\r\n                }\r\n            }\r\n        }\r\n        return data;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/geo/cube.ts\n// name:    cube.ts\r\n// author:  Jos Feenstra\r\n// purpose: Represents a cube in 3d space, in a certain pose.\r\n\r\n\r\nclass Cube {\r\n    constructor(plane, domain) {\r\n        this.plane = plane;\r\n        this.domain = domain;\r\n    }\r\n    static new(plane, domain) {\r\n        return new Cube(plane, domain);\r\n    }\r\n    static fromRadius(point, radius) {\r\n        return new Cube(Plane.WorldXY().moveTo(point), Domain3.fromRadius(radius));\r\n    }\r\n    getCorners() {\r\n        return this.domain.corners(this.plane.matrix);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/geo/geo.ts\n// name:    geo.ts\r\n// author:  Jos Feenstra\r\n// purpose: base class of all 3d geometry\r\n// note:    TODO\r\n\r\n// i want traits....\r\nclass Geo {\r\n    constructor() { }\r\n    clone() { }\r\n    transform(m) {\r\n        return this;\r\n    }\r\n    rotateX(radians) {\r\n        let rotater = Matrix4.newXRotation(radians);\r\n        // etc...\r\n    }\r\n    rotateY(radians) {\r\n        let rotater = Matrix4.newYRotation(radians);\r\n        // etc...\r\n    }\r\n    rotateZ(radians) {\r\n        let rotater = Matrix4.newZRotation(radians);\r\n        // etc...\r\n    }\r\n    rotate(radians, axis) {\r\n        let rotater = Matrix4.newAxisRotation(axis, radians);\r\n        // etc...\r\n    }\r\n    move(m) {\r\n        let mover = Matrix4.newScaler(m.x, m.y, m.z);\r\n        // etc...\r\n    }\r\n    scale(s) {\r\n        let scaler = Matrix4.newScaler(s.x, s.y, s.z);\r\n        // etc..\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/geo/intersect.ts\n\r\n/**\r\n * @returns -1 if no intersection, 0 of parallel or touching, 1 if intersection;\r\n */\r\nfunction lineXplane(l1, l2, p1, p2, p3) {\r\n    let test1 = signed_volume(p1, p2, p3, l1);\r\n    let test2 = signed_volume(p1, p2, p3, l2);\r\n    if (Math.abs(test1) < Const.TOLERANCE || Math.abs(test2) < Const.TOLERANCE) {\r\n        return 0; // triangle touches plane with an edge\r\n    }\r\n    else if ((test1 < 0 && test2 > 0) || (test1 > 0 && test2 < 0)) {\r\n        return 1; // if 1 test pos and other negative -> line intersects plane!\r\n    }\r\n    else {\r\n        return -1; // no intersection\r\n    }\r\n}\r\n/**\r\n * Calculate if line and triangle intersect\r\n *\r\n * NOTE we could expand on the \'return 0\' and explore if its touching a\r\n    vertex, line, or surface of triange\r\n * @returns 0  if line touches triangle\r\n            -1 if line misses  triangle\r\n             1  if line crosses triangle\r\n */\r\nfunction lineXtriangle(l1, l2, p1, p2, p3) {\r\n    // line points must be on opposite sides of the triangle\r\n    // return immidiately if -1: it means no intersection always\r\n    let test0 = lineXplane(l1, l2, p1, p2, p3);\r\n    if (test0 == -1)\r\n        return -1;\r\n    // plane tests\r\n    let test1 = lineXplane(p1, p2, l1, l2, p3);\r\n    if (test1 == -1)\r\n        return -1;\r\n    let test2 = lineXplane(p2, p3, l1, l2, p1);\r\n    if (test2 == -1)\r\n        return -1;\r\n    let test3 = lineXplane(p3, p1, l1, l2, p2);\r\n    if (test3 == -1)\r\n        return -1;\r\n    // debug\r\n    // print("points: ", l1, l2, p1, p2, p3)\r\n    // print(\'tests:\', test0, test1, test2, test3)\r\n    // figure out if the line touches the triangle, or if it intersects\r\n    if (test0 == 1 && test1 == 1 && test2 == 1 && test3 == 1) {\r\n        return 1;\r\n    }\r\n    else {\r\n        // TODO based upon the different tests, we could determine what is hit\r\n        return 0;\r\n    }\r\n}\r\nfunction signed_volume(a, b, c, d) {\r\n    // with vertices a,b,c,d: get signed volume\r\n    // remember: vectors always remain state. We dont want to alter the abcd vectors.\r\n    a = a.clone();\r\n    b = b.clone();\r\n    c = c.clone();\r\n    return ((1 / 6) *\r\n        a\r\n            .clone()\r\n            .sub(d)\r\n            .dot(c.sub(d).cross(b.sub(d))));\r\n}\r\nfunction IsRoughly(test1, arg1) {\r\n    throw new Error("Function not implemented.");\r\n}\r\n\n;// CONCATENATED MODULE: ./src/geo/line.ts\n\r\n\r\n// heavy weight Line class\r\nclass line_LineCurve2 {\r\n    constructor(from, to) {\r\n        this.from = from;\r\n        this.to = to;\r\n        this.vector = to.subbed(this.from);\r\n        this.normal = this.vector.normalized();\r\n        this.bounds = new Domain(0, this.vector.length());\r\n        this.length = this.vector.length();\r\n    }\r\n    at(t, bounded = true) {\r\n        if (bounded)\r\n            t = this.bounds.comform(t);\r\n        return Vector2.fromLerp(this.from, this.to, t / this.length);\r\n    }\r\n    atNormal(t, bounded = true) {\r\n        if (bounded)\r\n            t = new Domain(0, 1).comform(t);\r\n        return Vector2.fromLerp(this.from, this.to, t);\r\n    }\r\n    closestPoint(point, bounded = true) {\r\n        const d = this.vector.length();\r\n        if (d === 0)\r\n            return;\r\n        let lineToPoint = point.subbed(this.from);\r\n        let dot = lineToPoint.dot(this.vector);\r\n        return this.at(dot, bounded);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/geo/rectangle.ts\n\r\n\r\nclass Rectangle2 {\r\n    constructor(pose, domain) {\r\n        this.pose = pose;\r\n        this.domain = domain;\r\n    }\r\n    center() {\r\n        return this.pose.transformVector(new Vector2(0, 0));\r\n    }\r\n    getVertices() {\r\n        let verts = [\r\n            new Vector2(this.domain.x.t0, this.domain.y.t0),\r\n            new Vector2(this.domain.x.t1, this.domain.y.t0),\r\n            new Vector2(this.domain.x.t0, this.domain.y.t1),\r\n            new Vector2(this.domain.x.t1, this.domain.y.t1),\r\n        ];\r\n        verts.forEach((v) => this.pose.transformVector(v));\r\n        return verts;\r\n    }\r\n    to3D() {\r\n        let mat4 = this.pose.toMat4();\r\n        return new rectangle_Rectangle3(new Plane(mat4), this.domain);\r\n    }\r\n}\r\nclass rectangle_Rectangle3 {\r\n    constructor(plane, domain) {\r\n        this.plane = plane;\r\n        this.domain = domain;\r\n    }\r\n    getCorners() {\r\n        let corners = this.domain.corners();\r\n        let corners3 = corners.map((c) => this.plane.pushToWorld(c.to3D()));\r\n        return corners3;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/geo/triangle.ts\n\r\n\r\n\r\n\r\nclass triangle_Triangle2 {\r\n    constructor(a, b, c) {\r\n        this.a = a;\r\n        this.b = b;\r\n        this.c = c;\r\n    }\r\n    points() {\r\n        return Vector2Array.fromList([this.a, this.b, this.c]);\r\n    }\r\n    toBarycentric(point) {\r\n        let v0 = this.b.subbed(this.a);\r\n        let v1 = this.c.subbed(this.a);\r\n        let v2 = point.subbed(this.a);\r\n        let d00 = v0.dot(v0);\r\n        let d01 = v0.dot(v1);\r\n        let d11 = v1.dot(v1);\r\n        let d20 = v2.dot(v0);\r\n        let d21 = v2.dot(v1);\r\n        let denom = d00 * d11 - d01 * d01;\r\n        let v = (d11 * d20 - d01 * d21) / denom;\r\n        let w = (d00 * d21 - d01 * d20) / denom;\r\n        let u = 1.0 - v - w;\r\n        return new Vector3(u, v, w);\r\n    }\r\n    fromBarycentric(bari) {\r\n        let a = this.a.scaled(bari.x);\r\n        let b = this.b.scaled(bari.y);\r\n        let c = this.c.scaled(bari.z);\r\n        return a.add(b).add(c);\r\n    }\r\n    closestPoint(point) {\r\n        // figure out roughly where the point is.\r\n        // note:\r\n        let ab = point.sign(this.a, this.b);\r\n        let bc = point.sign(this.b, this.c);\r\n        let ca = point.sign(this.c, this.a);\r\n        // if its fully within, return it!\r\n        if ((ab < 0 && bc < 0 && ca < 0) || (ab > 0 && bc > 0 && ca > 0)) {\r\n            console.log("fully inside!");\r\n            return point;\r\n        }\r\n        else {\r\n            let abs = Math.abs(ab);\r\n            let bcs = Math.abs(bc);\r\n            let cas = Math.abs(ca);\r\n            if (abs < bcs && abs < cas) {\r\n                // ab\r\n                return new LineCurve2(this.a, this.b).closestPoint(point);\r\n            }\r\n            else if (bcs < cas) {\r\n                // bc\r\n                return new LineCurve2(this.b, this.c).closestPoint(point);\r\n            }\r\n            else {\r\n                // ca\r\n                return new LineCurve2(this.c, this.a).closestPoint(point);\r\n            }\r\n        }\r\n    }\r\n}\r\nclass triangle_Triangle3 {\r\n    constructor(a, b, c) {\r\n        this.a = a;\r\n        this.b = b;\r\n        this.c = c;\r\n    }\r\n    points() {\r\n        return [this.a, this.b, this.c];\r\n    }\r\n    getPlane() {\r\n        return Plane.from3pt(this.a, this.b, this.c);\r\n    }\r\n    to2D(plane = Plane.WorldXY()) {\r\n        return new triangle_Triangle2(plane.pullToPlane(this.a).to2D(), plane.pullToPlane(this.b).to2D(), plane.pullToPlane(this.c).to2D());\r\n    }\r\n    closestPoint(point) {\r\n        let plane = this.getPlane();\r\n        let [cp, _] = plane.closestPoint(point);\r\n        let planeCP = plane.pullToPlane(cp);\r\n        let planeTriangle = this.to2D(plane);\r\n        return point;\r\n    }\r\n    // Transcribed from Christer Ericson\'s Real-Time Collision Detection:\r\n    // http://realtimecollisiondetection.net/\r\n    toBarycentric(point) {\r\n        let v0 = this.b.subbed(this.a);\r\n        let v1 = this.c.subbed(this.a);\r\n        let v2 = point.subbed(this.a);\r\n        let d00 = v0.dot(v0);\r\n        let d01 = v0.dot(v1);\r\n        let d11 = v1.dot(v1);\r\n        let d20 = v2.dot(v0);\r\n        let d21 = v2.dot(v1);\r\n        let denom = d00 * d11 - d01 * d01;\r\n        let v = (d11 * d20 - d01 * d21) / denom;\r\n        let w = (d00 * d21 - d01 * d20) / denom;\r\n        let u = 1.0 - v - w;\r\n        return new Vector3(u, v, w);\r\n    }\r\n    fromBarycentric(bari) {\r\n        let a = this.a.clone().scale(bari.x);\r\n        let b = this.b.clone().scale(bari.y);\r\n        let c = this.c.clone().scale(bari.z);\r\n        return a.added(b).add(c);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/img/kernels.ts\n\r\n// kernels\r\nclass Kernels {\r\n    // inspired from https://github.com/yuta1984/CannyJS/blob/master/canny.js\r\n    static generateGaussianKernel(sigmma, size) {\r\n        // messy, probably auto-generated\r\n        var e, gaussian, i, j, kernel, s, sum, x, y, _i, _j, _k, _l, _ref, _ref1, _ref2, _ref3;\r\n        s = sigmma;\r\n        e = 2.718;\r\n        kernel = new float_matrix_FloatMatrix(size, size);\r\n        sum = 0;\r\n        for (i = _i = 0, _ref = size - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {\r\n            x = -(size - 1) / 2 + i;\r\n            for (j = _j = 0, _ref1 = size - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 0 <= _ref1 ? ++_j : --_j) {\r\n                y = -(size - 1) / 2 + j;\r\n                gaussian = (1 / (2 * Math.PI * s * s)) * Math.pow(e, -(x * x + y * y) / (2 * s * s));\r\n                kernel.set(i, j, gaussian);\r\n                sum += gaussian;\r\n            }\r\n        }\r\n        for (i = _k = 0, _ref2 = size - 1; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; i = 0 <= _ref2 ? ++_k : --_k) {\r\n            for (j = _l = 0, _ref3 = size - 1; 0 <= _ref3 ? _l <= _ref3 : _l >= _ref3; j = 0 <= _ref3 ? ++_l : --_l) {\r\n                kernel.set(i, j, kernel.get(i, j) / sum);\r\n            }\r\n        }\r\n        return kernel;\r\n    }\r\n}\r\nKernels.SmoothKernel = new float_matrix_FloatMatrix(3, 3, [1, 1, 1, 1, 1, 1, 1, 1, 1]).forEachValue((i) => (i * 1) / 9);\r\nKernels.SmoothKernel5 = new float_matrix_FloatMatrix(5, 5, [\r\n    1,\r\n    1,\r\n    1,\r\n    1,\r\n    1,\r\n    1,\r\n    1,\r\n    1,\r\n    1,\r\n    1,\r\n    1,\r\n    1,\r\n    1,\r\n    1,\r\n    1,\r\n    1,\r\n    1,\r\n    1,\r\n    1,\r\n    1,\r\n    1,\r\n    1,\r\n    1,\r\n    1,\r\n    1,\r\n]).forEachValue((v) => (v * 1) / 25);\r\nKernels.Gauss5 = new float_matrix_FloatMatrix(5, 5, [\r\n    2,\r\n    4,\r\n    5,\r\n    4,\r\n    2,\r\n    4,\r\n    9,\r\n    12,\r\n    9,\r\n    4,\r\n    5,\r\n    12,\r\n    15,\r\n    12,\r\n    5,\r\n    4,\r\n    9,\r\n    12,\r\n    9,\r\n    4,\r\n    2,\r\n    4,\r\n    5,\r\n    4,\r\n    2,\r\n]).forEachValue((v) => (v * 1) / 159);\r\nKernels.TestKernel = new float_matrix_FloatMatrix(3, 3, [1, 0, -1, 0, 0, 0, -1, 0, 1]);\r\nKernels.SobelLeft = new float_matrix_FloatMatrix(3, 3, [1, 2, 1, 0, 0, 0, -1, -2, -1]);\r\nKernels.SobelRight = new float_matrix_FloatMatrix(3, 3, [-1, -2, -1, 0, 0, 0, 1, 2, 1]);\r\nKernels.SobelUp = new float_matrix_FloatMatrix(3, 3, [1, 0, -1, 2, 0, -2, 1, 0, -1]);\r\nKernels.SobelDown = new float_matrix_FloatMatrix(3, 3, [-1, 0, 1, -2, 0, 2, -1, 0, 1]);\r\n\n;// CONCATENATED MODULE: ./src/mesh/line-array.ts\n// name:    line-render-data.ts\r\n// author:  Jos Feenstra\r\n// purpose: represents an object which can be fed directly to a linerenderer.\r\n//          use it to not continuously have to calculate these aspects if the underlying object is unchanged.\r\n\r\n\r\n\r\n// represents a collection of multiple lines. These could form 1 polyline, but this is not a requirement\r\nclass line_array_LineArray {\r\n    constructor(verts, ids) {\r\n        this.verts = verts;\r\n        if (ids == undefined) {\r\n            this.links = line_array_getDefaultIndices(verts.count());\r\n        }\r\n        else {\r\n            this.links = ids;\r\n        }\r\n    }\r\n    // this assumes even vectices are \'from\' points, and odd vertices are \'to\' points\r\n    static fromLines(verts) {\r\n        let data = vector_array_getGeneralFloatMatrix(verts);\r\n        return new line_array_LineArray(data);\r\n    }\r\n    // get all lines from a mesh\r\n    static fromMesh(rend, uv = false) {\r\n        // 3 edges per face, 2 indices per edge\r\n        let mesh = rend.mesh;\r\n        let count = mesh.links.count() * 6;\r\n        let data = new Uint16Array(count);\r\n        for (let i = 0; i < mesh.links.count(); i++) {\r\n            let iData = i * 6;\r\n            data[iData] = mesh.links.get(i, 0);\r\n            data[iData + 1] = mesh.links.get(i, 1);\r\n            data[iData + 2] = mesh.links.get(i, 1);\r\n            data[iData + 3] = mesh.links.get(i, 2);\r\n            data[iData + 4] = mesh.links.get(i, 2);\r\n            data[iData + 5] = mesh.links.get(i, 0);\r\n        }\r\n        if (uv) {\r\n            return new line_array_LineArray(rend.uvs, data);\r\n        }\r\n        else {\r\n            return new line_array_LineArray(mesh.verts, data);\r\n        }\r\n    }\r\n    // create lines as a grid centered at a plane\r\n    static fromGrid(plane, count, dis) {\r\n        let halfTotalSize = ((count - 1) * dis) / 2;\r\n        // 2 vectors per line, 2 lines per count\r\n        // plus 5 lines, for ihat and jhat icons\r\n        let lines = new vector_array_Vector3Array(count * 4);\r\n        // x lines\r\n        for (let i = 0; i < count; i++) {\r\n            let t = -halfTotalSize + dis * i;\r\n            lines.setVector(i * 2, new vector_Vector3(t, -halfTotalSize, 0));\r\n            lines.setVector(i * 2 + 1, new vector_Vector3(t, halfTotalSize, 0));\r\n        }\r\n        // y lines\r\n        for (let i = 0; i < count; i++) {\r\n            let t = -halfTotalSize + dis * i;\r\n            lines.setVector(2 * count + i * 2, new vector_Vector3(-halfTotalSize, -halfTotalSize + dis * i, 0));\r\n            lines.setVector(2 * count + i * 2 + 1, new vector_Vector3(halfTotalSize, -halfTotalSize + dis * i, 0));\r\n        }\r\n        // finally, transform everything to worldspace, and create the linerenderdata object\r\n        lines.forEach((v) => plane.pushToWorld(v));\r\n        return new line_array_LineArray(lines);\r\n    }\r\n    // get all lines from a plane\r\n    static fromPlane(plane) {\r\n        let count = const_Const.PLANE_RENDER_LINECOUNT;\r\n        let dis = const_Const.PLANE_RENDER_LINEDISTANCE;\r\n        let disSmall = dis / 10;\r\n        let halfTotalSize = ((count - 1) * dis) / 2;\r\n        // 2 vectors per line, 2 lines per count\r\n        // plus 5 lines, for ihat and jhat icons\r\n        let lines = new vector_array_Vector3Array(count * 4 + 5 * 2);\r\n        // x lines\r\n        for (let i = 0; i < count; i++) {\r\n            let t = -halfTotalSize + dis * i;\r\n            lines.setVector(i * 2, new vector_Vector3(t, -halfTotalSize, 0));\r\n            lines.setVector(i * 2 + 1, new vector_Vector3(t, halfTotalSize, 0));\r\n        }\r\n        // y lines\r\n        for (let i = 0; i < count; i++) {\r\n            let t = -halfTotalSize + dis * i;\r\n            lines.setVector(2 * count + i * 2, new vector_Vector3(-halfTotalSize, -halfTotalSize + dis * i, 0));\r\n            lines.setVector(2 * count + i * 2 + 1, new vector_Vector3(halfTotalSize, -halfTotalSize + dis * i, 0));\r\n        }\r\n        // icon I  to show ihat\r\n        let iconLine1 = lines.count() - 10;\r\n        lines.setVector(iconLine1, new vector_Vector3(halfTotalSize + disSmall, -disSmall, 0));\r\n        lines.setVector(iconLine1 + 1, new vector_Vector3(halfTotalSize + disSmall * 4, disSmall, 0));\r\n        let iconLine2 = lines.count() - 8;\r\n        lines.setVector(iconLine2, new vector_Vector3(halfTotalSize + disSmall, disSmall, 0));\r\n        lines.setVector(iconLine2 + 1, new vector_Vector3(halfTotalSize + disSmall * 4, -disSmall, 0));\r\n        // icon II to show jhat\r\n        let iconLine3 = lines.count() - 6;\r\n        lines.setVector(iconLine3, new vector_Vector3(0, halfTotalSize + disSmall * 2.5, 0));\r\n        lines.setVector(iconLine3 + 1, new vector_Vector3(disSmall, halfTotalSize + disSmall * 4, 0));\r\n        let iconLine4 = lines.count() - 4;\r\n        lines.setVector(iconLine4, new vector_Vector3(disSmall, halfTotalSize + disSmall, 0));\r\n        lines.setVector(iconLine4 + 1, new vector_Vector3(-disSmall, halfTotalSize + disSmall * 4, 0));\r\n        // icon III to show khat / normal direction\r\n        let iconLine5 = lines.count() - 2;\r\n        lines.setVector(iconLine5, new vector_Vector3(0, 0, 0));\r\n        lines.setVector(iconLine5 + 1, new vector_Vector3(0, 0, dis));\r\n        // finally, transform everything to worldspace, and create the linerenderdata object\r\n        lines.forEach((v) => plane.pushToWorld(v));\r\n        return new line_array_LineArray(lines);\r\n    }\r\n    // get all lines representing a circle in 2d. use an optional matrix to\r\n    static fromCircle(c) {\r\n        let count = const_Const.CIRCLE_SEGMENTS;\r\n        // let count = 12;\r\n        let verts = new vector_array_Vector3Array(count);\r\n        // x lines\r\n        for (let i = 0; i < count; i++) {\r\n            // radial fraction of a circle\r\n            let t = (i / count) * (Math.PI * 2);\r\n            verts.setVector(i, c.plane.pushToWorld(new vector_Vector3(Math.cos(t) * c.radius, Math.sin(t) * c.radius, 0)));\r\n        }\r\n        return new line_array_LineArray(verts, getPairIndices(count));\r\n    }\r\n    // turn a spline into a polyline, and render it\r\n    static fromSpline() {\r\n        throw "todo!";\r\n    }\r\n    static fromCube(cube) {\r\n        let verts = vector_array_Vector3Array.fromList(cube.getCorners());\r\n        return new line_array_LineArray(verts);\r\n    }\r\n    static fromJoin(lines) {\r\n        // join meshes, dont try to look for duplicate vertices\r\n        // TODO : make this the trouble of Matrices and Arrays\r\n        let idsCount = 0;\r\n        let vertCount = 0;\r\n        for (let line of lines) {\r\n            idsCount += line.links.length;\r\n            vertCount += line.verts.count();\r\n        }\r\n        let verts = new vector_array_Vector3Array(vertCount);\r\n        let ids = new Uint16Array(idsCount);\r\n        let accVerts = 0;\r\n        let accFaces = 0;\r\n        for (let lineset of lines) {\r\n            for (let i = 0; i < lineset.verts.count(); i++) {\r\n                verts.setRow(accVerts + i, lineset.verts.getRow(i));\r\n            }\r\n            for (let i = 0; i < lineset.links.length; i++) {\r\n                ids[accFaces + i] = lineset.links[i] + accVerts;\r\n            }\r\n            accVerts += lineset.verts.count();\r\n            accFaces += lineset.links.length;\r\n        }\r\n        return new line_array_LineArray(verts, ids);\r\n    }\r\n}\r\n// just get an int sequence from 0 to length.\r\nfunction line_array_getDefaultIndices(count) {\r\n    let data = new Uint16Array(count);\r\n    for (let i = 0; i < count; i++) {\r\n        data[i] = i;\r\n    }\r\n    return data;\r\n}\r\nfunction getPairIndices(count) {\r\n    // given count of 3 => return 0,1 | 1,2 | 2,0\r\n    let length = count * 2;\r\n    let data = new Uint16Array(length);\r\n    for (let i = 0; i < count; i++) {\r\n        data[i * 2] = i;\r\n        data[i * 2 + 1] = (i + 1) % count;\r\n    }\r\n    return data;\r\n}\r\n\n;// CONCATENATED MODULE: ./src/math/ray.ts\n// author:  Jos Feenstra\r\n// purpose: infinite Ray used for projection and similar actions\r\n// notes:   found some nice examples at https://www.cs.princeton.edu/courses/archive/fall00/cs426/lectures/raycast/sld004.htm\r\n\r\nclass Ray {\r\n    // i do this to force intent : from points, or from normal. Both vector3, so otherwise confusing\r\n    constructor(origin, normal) {\r\n        this.origin = origin;\r\n        this.normal = normal.normalize();\r\n    }\r\n    static fromNormal(origin, normal) {\r\n        return new Ray(origin, normal);\r\n    }\r\n    static fromPoints(origin, through) {\r\n        return new Ray(origin, through.subbed(origin).normalize());\r\n    }\r\n    at(t) {\r\n        return this.origin.added(this.normal.scaled(t));\r\n    }\r\n    xPlane(plane) {\r\n        // ray : pt = rOrigin + t * rNormal\r\n        // plane : a, b, c, d -> pNormal(a, b, c) , d\r\n        // plane : P . N + d = 0;\r\n        // substitute for p:\r\n        // t = -(rOrigin . N + d) / (V . N)\r\n        let ray = this; // to be clear\r\n        return -(ray.origin.dot(plane.normal) + plane.d) / ray.normal.dot(plane.normal);\r\n    }\r\n    toLine(length) {\r\n        let toPoint = this.at(length);\r\n        return line_array_LineArray.fromLines([this.origin, toPoint]);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/mesh/topo-mesh.ts\n\r\n\r\n\r\n\r\n\r\n\r\n// a mesh with topological information\r\nclass TopoMesh extends (/* unused pure expression or super */ null && (Renderable)) {\r\n    // private -> should only be used with factory methods\r\n    constructor(vertCount, normCount, uvCount, faceCount, texture = undefined) {\r\n        super(vertCount, normCount, uvCount, faceCount, texture);\r\n        this.lastTouched = 0; // needed for triangle walk\r\n        this.neighborMap = new IntMatrix(this.mesh.links.count(), 3);\r\n    }\r\n    static copyFromRenderable(rend) {\r\n        let topoMesh = new TopoMesh(rend.mesh.verts.count(), rend.norms.count(), rend.uvs.count(), rend.mesh.links.count());\r\n        topoMesh.mesh.verts = rend.mesh.verts.clone();\r\n        topoMesh.norms = rend.norms.clone();\r\n        topoMesh.uvs = rend.uvs.clone();\r\n        topoMesh.mesh.links = rend.mesh.links.clone();\r\n        topoMesh.setNeighborMap();\r\n        return topoMesh;\r\n    }\r\n    setNeighborMap() {\r\n        // this method fills this.neighborMap after data is loaded\r\n        //\r\n        let edges = new HashTable();\r\n        let pairs = new HashTable();\r\n        // 1 | per triangle\r\n        this.mesh.links.forEachRow((f, faceIndex) => {\r\n            let faceEdges = [\r\n                [f[0], f[1]],\r\n                [f[1], f[2]],\r\n                [f[2], f[0]],\r\n            ];\r\n            faceEdges.forEach((e) => {\r\n                // if (4, 1), orientation is True | if (1, 4), orientation is False\r\n                let orientation = e[0] > e[1];\r\n                // use this min max construction to only store one edge per triangle pair\r\n                // let edge: [number, number] = e.sort();\r\n                let edge = new Int32Array([Math.min(...e), Math.max(...e)]);\r\n                // console.log(edge);\r\n                if (!edges.has(edge)) {\r\n                    // orientation, first tr ID, second tr ID\r\n                    edges.set(edge, [orientation, faceIndex, -1]);\r\n                }\r\n                else {\r\n                    // an edge match is made!\r\n                    // console.log("matched!");\r\n                    let other = edges.get(edge);\r\n                    let nbOrientation = other[0];\r\n                    let nbIndex = other[1];\r\n                    other[2] = faceIndex;\r\n                    edges.set(edge, other); // edge is put away again, if an edge map is ever needed.\r\n                    // assign neighbours\r\n                    this.setNb(faceIndex, edge, nbIndex);\r\n                    this.setNb(nbIndex, edge, faceIndex);\r\n                    // use this info to fill self.pairs\r\n                    // if orientation != other orientation, edge is \'good\' -> False\r\n                    // else -> True, one of the neighbour triangles needs to be flipped\r\n                    let pair = [nbIndex, faceIndex];\r\n                    pair.sort();\r\n                    // pair = (Math.min(...pair), Math.max(...pair))\r\n                    if (orientation != nbOrientation)\r\n                        pairs.set(pair, false);\r\n                    else\r\n                        pairs.set(pair, true);\r\n                }\r\n            });\r\n        });\r\n        // Done. Give feedback\r\n        let count = 0;\r\n        // for pair in pairs.items():\r\n        //     if not pair: count +=1;\r\n        console.log("number of \'wrong\' face neighbours: ", count);\r\n        return;\r\n    }\r\n    /**\r\n     * Get the triangle based on a UV point somewhere on the mesh.\r\n     * Returns -1 if the point is not on the mesh TODO OR IF THE PATH HAS HOLES IN IT TODO FIX THIS!\r\n     * @param  {Vector2} point\r\n     * @returns triangleIndex, or -1 if failure\r\n     */\r\n    walkUV(point) {\r\n        // start where we last stopped\r\n        let faceIndex = this.lastTouched;\r\n        // make sure we never take more steps than triangles in the triangulation.\r\n        // this would mean something went wrong\r\n        let count = this.mesh.links.count();\r\n        for (let _ = 0; _ < count; _++) {\r\n            // i dont know how, but if we accidentally landed outside of the mesh\r\n            if (faceIndex == -1) {\r\n                return -1;\r\n            }\r\n            for (let i = 0; i < 3; i++) {\r\n                let j = (i + 1) % 3;\r\n                let face = this.mesh.links.getRow(faceIndex);\r\n                let edge = [face[i], face[j]];\r\n                let b = this.uvs.getVector(edge[0]);\r\n                let c = this.uvs.getVector(edge[1]);\r\n                let sign = point.sign(b, c);\r\n                if (sign < 0) {\r\n                    faceIndex = this.getNb(faceIndex, edge);\r\n                    // if its ouside, return -1\r\n                    if (faceIndex == -1)\r\n                        return -1;\r\n                    // else: go there immidiately\r\n                    this.lastTouched = faceIndex;\r\n                    break;\r\n                }\r\n                // if this ran 3 times, the point must be within the triangle\r\n                if (i == 2)\r\n                    return faceIndex;\r\n            }\r\n        }\r\n        // something went wrong\r\n        return -1;\r\n    }\r\n    // find the faces closest to the point\r\n    // -1 if the mesh does not contain triangles\r\n    closestFaces(point) {\r\n        let closestVertexId = this.mesh.verts.closestId(point);\r\n        // get all face ids containing closestVertex, along with their centers\r\n        let closestFaces = [];\r\n        //let centers: Vector3[] = []\r\n        this.mesh.links.forEachRow((tr, i) => {\r\n            if (tr.includes(closestVertexId)) {\r\n                closestFaces.push(i);\r\n                //let center = Vector3Array.fromList(this.getFacePoints(i, false)).average();\r\n                //centers.push(center);\r\n            }\r\n        });\r\n        // select the triangle with the closest baricenter\r\n        return closestFaces;\r\n    }\r\n    elevate(p) {\r\n        // \'elevate\' a point in UV space to vertex space using a barycentric remap\r\n        // figure out where this point is located on the mesh\r\n        let face = this.walkUV(p);\r\n        if (face == -1) {\r\n            console.warn("got a point not on triangle...");\r\n            return new Vector3(0, 0, 0);\r\n        }\r\n        let tr3 = this.getTriangle3(face);\r\n        let tr2 = this.getTriangle2(face);\r\n        let bari = tr2.toBarycentric(p);\r\n        return tr3.fromBarycentric(bari);\r\n    }\r\n    closestFace(p) {\r\n        // NOTE this doesnt really work all that well...\r\n        let faceIds = this.closestFaces(p);\r\n        let closestPoints = new Vector3Array(faceIds.length);\r\n        faceIds.forEach((id, i) => {\r\n            let tr = this.getTriangle3(id);\r\n            let cp = tr.closestPoint(p);\r\n            closestPoints.setVector(i, cp);\r\n        });\r\n        // find the closest closest point\r\n        let id = closestPoints.closestId(p);\r\n        return faceIds[id];\r\n    }\r\n    // \'flatten\' a point in vertex space to uv space using a barycentric remap\r\n    // NOTE : this is not exactly a \'project to closest triangle\', something like that wouldnt always work\r\n    flatten(p, face) {\r\n        let tr3 = this.getTriangle3(face);\r\n        let tr2 = this.getTriangle2(face);\r\n        let bari = tr3.toBarycentric(p);\r\n        return tr2.fromBarycentric(bari);\r\n    }\r\n    // combo\r\n    flattenClosestPoint(p) {\r\n        let face = this.closestFace(p);\r\n        return this.flatten(p, face);\r\n    }\r\n    closestPoint(p) {\r\n        let face = this.closestFace(p);\r\n        let triangle = this.getTriangle3(face);\r\n        let bari = triangle.toBarycentric(p);\r\n        return triangle.fromBarycentric(bari);\r\n    }\r\n    getTriangle2(id) {\r\n        let p = this.getFacePoints(id, true);\r\n        return new Triangle2(p[0], p[1], p[2]);\r\n    }\r\n    getTriangle3(id) {\r\n        let p = this.getFacePoints(id, false);\r\n        return new Triangle3(p[0], p[1], p[2]);\r\n    }\r\n    setNb(faceIndex, commonEdge, nbIndex) {\r\n        for (let j = 0; j < 3; j++) {\r\n            if (!commonEdge.includes(this.mesh.links.get(faceIndex, j))) {\r\n                this.neighborMap.set(faceIndex, j, nbIndex);\r\n                return;\r\n            }\r\n        }\r\n        console.log(this.mesh.links.getRow(faceIndex));\r\n        console.log(commonEdge);\r\n        throw "these are not actually neighbors!";\r\n    }\r\n    getNb(faceIndex, commonEdge) {\r\n        for (let j = 0; j < 3; j++) {\r\n            if (!commonEdge.includes(this.mesh.links.get(faceIndex, j))) {\r\n                return this.neighborMap.get(faceIndex, j);\r\n            }\r\n        }\r\n        console.log(this.mesh.links.getRow(faceIndex));\r\n        console.log(commonEdge);\r\n        throw "common edge does not match triangle index!";\r\n    }\r\n    getFacePoints(tr, uv) {\r\n        let pointIds = this.mesh.links.getRow(tr);\r\n        if (uv) {\r\n            return [this.uvs.getVector(pointIds[0]), this.uvs.getVector(pointIds[1]), this.uvs.getVector(pointIds[2])];\r\n        }\r\n        else {\r\n            return [\r\n                this.mesh.verts.getVector(pointIds[0]),\r\n                this.mesh.verts.getVector(pointIds[1]),\r\n                this.mesh.verts.getVector(pointIds[2]),\r\n            ];\r\n        }\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/render/camera.ts\n// author : Jos Feenstra\r\n// purpose : contain all logic regarding\r\n\r\n\r\n\r\n\r\n\r\nclass Camera {\r\n    constructor(canvas, z_offset = 1, canMove = false) {\r\n        this.angleAlpha = 0; // rotation x\r\n        this.angleBeta = 0; // rotation y\r\n        this.mousePos = vector_Vector2.zero();\r\n        // camera matrix properties\r\n        this.fov = (20 * Math.PI) / 100;\r\n        this.zFar = 10000;\r\n        this.zNear = 0.1;\r\n        // other consts\r\n        this.speed = 1;\r\n        this.worldPlane = plane_Plane.WorldXY();\r\n        this.canMove = canMove;\r\n        this.pos = new vector_Vector3(0, 0, 0);\r\n        this.z_offset = -z_offset;\r\n        this.offset = new vector_Vector3(0, 0, -z_offset);\r\n        this.updateMatrices(canvas);\r\n    }\r\n    new(canvas, zOffset = 1, canMove = false) {\r\n        return new Camera(canvas, zOffset, canMove);\r\n    }\r\n    update(state) {\r\n        this.updateControls(state);\r\n        this.updateMatrices(state.canvas);\r\n        this.updateClick(state);\r\n        if (state.IsKeyPressed("p")) {\r\n            console.log(`printing camera status. \n                pos: ${this.pos}, \n                offset: ${this.offset}, \n                speed: ${this.speed}, \n                alpha ${this.angleAlpha},\n                beta: ${this.angleBeta}`);\r\n            console.log("speed is now: " + this.speed);\r\n        }\r\n    }\r\n    set(offset, alpha, beta) {\r\n        this.z_offset = offset;\r\n        this.angleAlpha = alpha;\r\n        this.angleBeta = beta;\r\n    }\r\n    updateMatrices(canvas) {\r\n        this.worldMatrix = this.getWorldMatrix();\r\n        this.projectMatrix = this.getProjectionMatrix(canvas);\r\n        this.totalMatrix = this.worldMatrix.multiplied(this.projectMatrix);\r\n    }\r\n    lookat(position, target) {\r\n        // set matrices to the thing\r\n        let matrix = matrix_Matrix4.newLookAt(position, target, this.worldPlane.khat);\r\n    }\r\n    updateClick(state) {\r\n        // todo\r\n    }\r\n    updateControls(state) {\r\n        let deltaScroll = state.scrollValue * 1.2;\r\n        this.offset.z = Math.min(-0.001, this.z_offset - deltaScroll);\r\n        if (state.IsKeyPressed("Shift")) {\r\n            this.speed *= 2;\r\n        }\r\n        if (state.IsKeyPressed("Control")) {\r\n            this.speed = Math.max(this.speed * 0.5, 0.1);\r\n        }\r\n        // deal with mouse\r\n        let prevPos = this.mousePos.clone();\r\n        this.mousePos = state.mousePos.clone();\r\n        let delta = prevPos.clone().sub(this.mousePos);\r\n        this.getMouseWorldRay(state.canvas.width, state.canvas.height);\r\n        if (state.mouseRightDown) {\r\n            this.angleAlpha = GeonMath.clamp(this.angleAlpha + delta.y * 0.01, 0, Math.PI);\r\n            this.angleBeta += delta.x * -0.01;\r\n        }\r\n        function relativeUnitY(angle) {\r\n            let m = matrix_Matrix4.newZRotation(angle);\r\n            return m.multiplyVector(vector_Vector3.unitY());\r\n        }\r\n        function relativeUnitX(angle) {\r\n            let m = matrix_Matrix4.newZRotation(angle);\r\n            return m.multiplyVector(vector_Vector3.unitX());\r\n        }\r\n        if (!this.canMove) {\r\n            return;\r\n        }\r\n        if (state.IsKeyDown("s"))\r\n            this.pos.add(relativeUnitY(-this.angleBeta).scale(0.01 * this.speed));\r\n        if (state.IsKeyDown("w"))\r\n            this.pos.add(relativeUnitY(-this.angleBeta).scale(-0.01 * this.speed));\r\n        if (state.IsKeyDown("a"))\r\n            this.pos.add(relativeUnitX(-this.angleBeta).scale(0.01 * this.speed));\r\n        if (state.IsKeyDown("d"))\r\n            this.pos.add(relativeUnitX(-this.angleBeta).scale(-0.01 * this.speed));\r\n        if (state.IsKeyDown("q"))\r\n            this.pos.z += 0.01 * this.speed;\r\n        if (state.IsKeyDown("e"))\r\n            this.pos.z -= 0.01 * this.speed;\r\n    }\r\n    getCameraPoint() {\r\n        return this.worldMatrix.inverse().multiplyVector(new vector_Vector3(0, 0, 0));\r\n    }\r\n    getMouseWorldRay(canvasWidth, canvasHeight, useMouse = true) {\r\n        // get a ray from origin through mousepos\r\n        // mouse unit screen position:\r\n        //       -------------- -0.5\r\n        //       |            |\r\n        //       |      .(0,0)|\r\n        //       |            |\r\n        //       -------------- 0.5\r\n        //     -0.72        0.72\r\n        //    (0.72 = 0.5 * aspect)\r\n        //\r\n        let size = 0.5; // size indicator of the fustrum\r\n        let mp = this.mousePos;\r\n        let aspect = canvasWidth / canvasHeight;\r\n        let mouseUnitX = (-size + mp.x / canvasWidth) * aspect;\r\n        let mouseUnitY = -size + mp.y / canvasHeight;\r\n        let f = size / Math.tan(this.fov / 2); // focal length\r\n        let invWorld = this.worldMatrix.inverse();\r\n        let origin = invWorld.multiplyVector(new vector_Vector3(0, 0, 0));\r\n        // TODO instead of doing this, just extract the x, y, and z columns of invWorld\r\n        let iDestiny = invWorld.multiplyVector(new vector_Vector3(1, 0, 0));\r\n        let jDestiny = invWorld.multiplyVector(new vector_Vector3(0, 1, 0));\r\n        let kDestiny = invWorld.multiplyVector(new vector_Vector3(0, 0, -1));\r\n        let ihat = iDestiny.sub(origin).normalize();\r\n        let jhat = jDestiny.sub(origin).normalize();\r\n        let khat = kDestiny.sub(origin).normalize();\r\n        // pardon this insanely ugly statement\r\n        let screenPoint = useMouse\r\n            ? origin\r\n                .added(khat.scaled(f))\r\n                .add(ihat.scaled(mouseUnitX))\r\n                .add(jhat.scaled(-mouseUnitY))\r\n            : origin.added(khat.scaled(f));\r\n        return Ray.fromPoints(origin, screenPoint);\r\n    }\r\n    getWorldMatrix() {\r\n        let offset = this.offset;\r\n        let angleA = this.angleAlpha;\r\n        let angleB = this.angleBeta;\r\n        // translate so z means \'up\'\r\n        let yzFlip = new matrix_Matrix4([1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1]);\r\n        // translated to fit screen\r\n        let position = matrix_Matrix4.newTranslation(this.pos.x, this.pos.y, this.pos.z);\r\n        let mOffset = matrix_Matrix4.newTranslation(offset.x, offset.y, offset.z);\r\n        // rotated by user\r\n        let x_rotation = matrix_Matrix4.newXRotation(angleA);\r\n        let z_rotation = matrix_Matrix4.newZRotation(angleB);\r\n        let rotation = z_rotation.multiply(x_rotation);\r\n        // let transform = mOffset.multiply(rotation).multiply(position);\r\n        let transform = position.multiply(rotation).multiply(mOffset);\r\n        return transform;\r\n    }\r\n    getProjectionMatrix(canvas) {\r\n        // aspects\r\n        let aspect = canvas.width / canvas.height; // note: this should be constant\r\n        // let z_plane = -1. / Math.tan(pi / 8.);\r\n        // projection to screen\r\n        // let projection = Matrix4.newOrthographic(-1, 1, -1, 1, 0.1, 0.1);\r\n        let projection = matrix_Matrix4.newPerspective(this.fov, aspect, this.zNear, this.zFar);\r\n        return projection;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/render/combo.ts\n// name:    combo.ts\r\n// author:  Jos Feenstra\r\n// purpose:\r\n// - combination of state, bufferedState, and renderer:\r\n//\r\n// 1.      state\r\n//           ||\r\n//        (buffer)\r\n//           \\/\r\n// 2.     buffered\r\n//           ||\r\n//        (render)\r\n//           \\/\r\n// 3. rendered to screen\r\n//\r\n// TODO: maybe find a better name, but \'combo\' is quite distinct in a way\r\n// todo: force buffering a bit more. make a way that requiers this.buffered to be filled\r\n// staticcombo\r\n// dynacombo\r\n// multistaic combo\r\n// Vector3 & dotrenderer\r\nclass combo_Combi {\r\n    constructor(gl, state, renderConstructor) {\r\n        this.buffered = [];\r\n        this.state = [];\r\n        this.buffered;\r\n        this.renderer = renderConstructor(gl);\r\n    }\r\n    buffer() { }\r\n    render(context) {\r\n        for (let i = 0; i < this.buffered.length; i++) {\r\n            const b = this.buffered[i];\r\n            this.renderer.setAndRender(b, context);\r\n        }\r\n    }\r\n}\r\nclass Combo {\r\n    constructor(gl, state, renderConstructor) {\r\n        this.state = state;\r\n        this.buffered;\r\n        this.renderer = renderConstructor(gl);\r\n    }\r\n    buffer() { }\r\n    render(context) {\r\n        this.renderer.render(context);\r\n    }\r\n}\r\n// Combi\r\n// // small tie-together of data & renderer.\r\n// // used to interact with the rendering behaviour of a renderableMesh.\r\n// // TODO: typecheck if data & renderer are compatible\r\n// import { Renderer, DrawSpeed } from "./renderer";\r\n// import { Scene } from "./scene";\r\n// // TODO add this information to the new Renderable\r\n// export class StaticRenderUnit<R extends Renderer, D> {\r\n//     renderer: R;\r\n//     data: D;\r\n//     constructor(renderer: R, data: D) {\r\n//         this.renderer = renderer;\r\n//         this.data = data;\r\n//     }\r\n//     static new<A extends Renderer, B>(renderer: A, data: B): StaticRenderUnit<A, B> {\r\n//         return new StaticRenderUnit(renderer, data);\r\n//     }\r\n//     buffer() {\r\n//         this.renderer.buffer(this.data);\r\n//     }\r\n//     render(context: Scene) {\r\n//         this.renderer.render(context);\r\n//     }\r\n// }\r\n// export class DynamicRenderUnit<R extends Renderer, D> {\r\n//     renderer: R;\r\n//     data: D;\r\n//     constructor(renderer: R, data: D) {\r\n//         this.renderer = renderer;\r\n//         this.data = data;\r\n//     }\r\n//     static new<A extends Renderer, B>(renderer: A, data: B): DynamicRenderUnit<A, B> {\r\n//         return new DynamicRenderUnit(renderer, data);\r\n//     }\r\n//     render(context: Scene) {\r\n//         this.renderer.buffer();\r\n//         this.renderer.render(context);\r\n//     }\r\n// }\r\n\n;// CONCATENATED MODULE: ./src/render/light.ts\n// Name:    scene.ts\r\n// Author:  Jos Feenstra\r\n\r\nclass Light {\r\n    constructor(pos, color, spot, dir) {\r\n        this.pos = pos;\r\n        this.color = color;\r\n        this.spot = spot;\r\n        this.dir = dir;\r\n    }\r\n    static new(pos, color = [1, 1, 1, 1]) {\r\n        return new Light(pos, color, false, Vector3.zero());\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/render/context.ts\nclass Context {\r\n    constructor(camera) {\r\n        this.camera = camera;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/render/renderer.ts\n// webgl-helpers.ts\r\n//\r\n// author: Jos Feenstra\r\n// credits to : https://webglfundamentals.org/\r\n// note: im still figuring out how to organize this\r\n// import { Scene } from "./scene";\r\nvar nextTextureId = 0;\r\nvar rendercallsperframe = 0;\r\nvar renderer_DrawSpeed;\r\n(function (DrawSpeed) {\r\n    DrawSpeed[DrawSpeed["StaticDraw"] = 0] = "StaticDraw";\r\n    DrawSpeed[DrawSpeed["DynamicDraw"] = 1] = "DynamicDraw";\r\n})(renderer_DrawSpeed || (renderer_DrawSpeed = {}));\r\n// @param T = data to feed the renderer at \'set\'\r\nclass renderer_Renderer {\r\n    constructor(gl, vertexScript, fragmentScript) {\r\n        this.gl = gl;\r\n        this.program = renderer_Renderer.createProgramFromScripts(gl, vertexScript, fragmentScript);\r\n    }\r\n    setAndRender(r, context) {\r\n        this.set(r, renderer_DrawSpeed.DynamicDraw);\r\n        this.render(context);\r\n    }\r\n    // helpers. these could live somewhere else... maybe in Context?\r\n    //#region\r\n    static getNextTextureID() {\r\n        let id = nextTextureId;\r\n        nextTextureId += 1;\r\n        return id;\r\n    }\r\n    static resizeCanvas(gl) {\r\n        // Lookup the size the browser is displaying the canvas in CSS pixels.\r\n        let canvas = gl.canvas;\r\n        const displayWidth = canvas.clientWidth;\r\n        const displayHeight = canvas.clientHeight;\r\n        // Check if the canvas is not the same size.\r\n        const needResize = gl.canvas.width !== displayWidth || gl.canvas.height !== displayHeight;\r\n        if (needResize) {\r\n            // Make the canvas the same size\r\n            gl.canvas.width = displayWidth;\r\n            gl.canvas.height = displayHeight;\r\n        }\r\n        // Tell WebGL how to convert from clip space to pixels\r\n        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\r\n        return needResize;\r\n    }\r\n    convertDrawSpeed(speed) {\r\n        if (speed == renderer_DrawSpeed.DynamicDraw) {\r\n            return this.gl.DYNAMIC_DRAW;\r\n        }\r\n        else {\r\n            return this.gl.STATIC_DRAW;\r\n        }\r\n    }\r\n    static initWebglContext(canvas) {\r\n        let possiblyGl = canvas.getContext("webgl");\r\n        if (possiblyGl == undefined) {\r\n            console.log("webgl unavailable...");\r\n        }\r\n        let gl = possiblyGl;\r\n        gl.enable(gl.BLEND);\r\n        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n        gl.enable(gl.CULL_FACE);\r\n        gl.enable(gl.DEPTH_TEST);\r\n        gl.clearColor(0.0, 0.0, 0.0, 1.0);\r\n        gl.clearDepth(1);\r\n        return gl;\r\n    }\r\n    static compileShader(gl, shaderSource, shaderType) {\r\n        let shader = gl.createShader(shaderType);\r\n        gl.shaderSource(shader, shaderSource);\r\n        gl.compileShader(shader);\r\n        let success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n        if (!success) {\r\n            throw "could not compile shader:" + shaderSource + gl.getShaderInfoLog(shader);\r\n        }\r\n        return shader;\r\n    }\r\n    static createProgram(gl, vertexShader, fragmentShader) {\r\n        let program = gl.createProgram();\r\n        gl.attachShader(program, vertexShader);\r\n        gl.attachShader(program, fragmentShader);\r\n        gl.linkProgram(program);\r\n        let success = gl.getProgramParameter(program, gl.LINK_STATUS);\r\n        if (!success) {\r\n            throw "program failed to link:" + gl.getProgramInfoLog(program);\r\n        }\r\n        return program;\r\n    }\r\n    static createProgramFromScripts(gl, vertexScript, fragmentScript) {\r\n        let vertexShader = renderer_Renderer.compileShader(gl, vertexScript, gl.VERTEX_SHADER);\r\n        let fragmentShader = renderer_Renderer.compileShader(gl, fragmentScript, gl.FRAGMENT_SHADER);\r\n        return renderer_Renderer.createProgram(gl, vertexShader, fragmentShader);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/renderers/billboard-renderer.ts\n// name:    billboard-renderer.ts\r\n// author:  Jos Feenstra\r\n// purpose: Renderer images as billboards.\r\n\r\n// this is just a template for copy-pasting\r\nclass TemplateRenderer extends (/* unused pure expression or super */ null && (Renderer)) {\r\n    constructor(gl) {\r\n        let vs = "";\r\n        let fs = "";\r\n        super(gl, vs, fs);\r\n    }\r\n    static new(gl) {\r\n        return new TemplateRenderer(gl);\r\n    }\r\n    set(p, speed) {\r\n        // TODO\r\n    }\r\n    render(context) {\r\n        // TODO\r\n    }\r\n    setAndRender(pack, context) {\r\n        this.set(pack, DrawSpeed.StaticDraw);\r\n        this.render(context);\r\n    }\r\n}\r\n// export class TextRenderer {\r\n//     // TODO\r\n//     // use the billboard renderer to render series of ascii characters,\r\n//     // by using standard positions of certain font images.\r\n//     br: BillBoardRenderer;\r\n//     // todo horizontal justification\r\n//     // todo vertical justification\r\n//     constructor(gl: WebGLRenderingContext) {\r\n//         this.br = new BillBoardRenderer(gl);\r\n//     }\r\n//     set(strings: string[], locations: Vector3Array) {\r\n//         if (strings.length != locations.count()) {\r\n//             console.warn("couldnt set TextRenderer: strings not equal to locations...");\r\n//         }\r\n//         let length = strings.length;\r\n//         // TODO: set a whole bunch of stuff\r\n//     }\r\n//     render() {}\r\n// }\r\n\n;// CONCATENATED MODULE: ./src/renderers/dot-renderer2.ts\n// jos feenstra\r\n\r\nclass DotRenderer2 extends (/* unused pure expression or super */ null && (Renderer)) {\r\n    constructor(gl, size = 5, color = [1, 1, 1, 1], square = true) {\r\n        // note: I like vertex & fragments to be included in the script itself.\r\n        // when you change vertex or fragment, this class has to deal with it.\r\n        // putting them somewhere else doesnt make sense to me,\r\n        // they are coupled 1 to 1.\r\n        let vertexSource = `\n        attribute vec2 a_position;\n        \n        uniform vec2 u_resolution;\n        uniform float u_size;\n\n        void main() {\n            vec2 clipped = ((a_position / u_resolution) * 2.0) - 1.0;\n      \n            gl_PointSize = u_size;\n            gl_Position = vec4(clipped, 0, 1);\n            // gl_Position = vec4(0,0,0,1);\n        }\n        `;\r\n        let fragmentSourceSquare = `\n        precision mediump int;\n        precision mediump float;\n\n        uniform vec4 u_Color;\n        vec2 center = vec2(0.5, 0.5);\n\n        void main() {\n            gl_FragColor = vec4(1,1,1,1);\n        }\n        `;\r\n        let fragmentSourceRound = `\n        precision mediump int;\n        precision mediump float;\n\n        uniform vec4 u_Color;\n        vec2 center = vec2(0.5, 0.5);\n\n        void main() {\n            if (distance(center, gl_PointCoord) > 0.5) {\n               discard;\n            }\n            gl_FragColor = vec4(1,1,1,1);\n        }\n        `;\r\n        // setup program\r\n        if (square) {\r\n            super(gl, vertexSource, fragmentSourceSquare);\r\n        }\r\n        else {\r\n            super(gl, vertexSource, fragmentSourceRound);\r\n        }\r\n        this.u_resolution = gl.getUniformLocation(this.program, "u_resolution");\r\n        this.u_size = gl.getUniformLocation(this.program, "u_size");\r\n        this.u_color = gl.getUniformLocation(this.program, "u_color");\r\n        this.color = color;\r\n        this.size = size;\r\n        // Bind it to ARRAY_BUFFER (think of it as ARRAY_BUFFER = positionBuffer)\r\n        // look up where the vertex data needs to go.\r\n        this.a_position = gl.getAttribLocation(this.program, "a_position");\r\n        this.a_position_buffer = gl.createBuffer();\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n    }\r\n    set() { }\r\n    render(context) { }\r\n    // render 1 image to the screen\r\n    setAndRender(dots, context) {\r\n        let gl = this.gl;\r\n        // Tell it to use our program (pair of shaders)\r\n        gl.useProgram(this.program);\r\n        // set uniforms\r\n        gl.uniform2f(this.u_resolution, gl.canvas.width, gl.canvas.height);\r\n        gl.uniform1f(this.u_size, this.size);\r\n        gl.uniform4f(this.u_color, this.color[0], this.color[1], this.color[2], this.color[3]);\r\n        // // Bind the position buffer.\r\n        gl.enableVertexAttribArray(this.a_position);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        // // Tell the attribute how to get data out of positionBuffer (ARRAY_BUFFER)\r\n        var size = 2; // 2 components per iteration\r\n        var type = gl.FLOAT; // the data is 32bit floats\r\n        var normalize = false; // don\'t normalize the data\r\n        var stride = 0; // 0 = move forward size * sizeof(type) each iteration to get the next position\r\n        var offset = 0; // start at the beginning of the buffer\r\n        gl.vertexAttribPointer(this.a_position, size, type, normalize, stride, offset);\r\n        // fill with data;\r\n        let data = this.toFloat32Array(dots);\r\n        gl.bufferData(gl.ARRAY_BUFFER, data, gl.DYNAMIC_DRAW);\r\n        // Draw the point.\r\n        var primitiveType = gl.POINTS;\r\n        var offset = 0;\r\n        var count = dots.length;\r\n        gl.drawArrays(primitiveType, offset, count);\r\n    }\r\n    // Fill the buffer with the values that define a rectangle.\r\n    toFloat32Array(dots) {\r\n        let data = new Float32Array(dots.length * 2);\r\n        for (let i = 0; i < dots.length; i++) {\r\n            data[i * 2] = dots[i].x;\r\n            data[i * 2 + 1] = dots[i].y;\r\n        }\r\n        return data;\r\n    }\r\n    randomInt(range) {\r\n        return Math.floor(Math.random() * range);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/renderers/dot-renderer3.ts\n// jos feenstra\r\n\r\n\r\nclass dot_renderer3_DotRenderer3 extends (/* unused pure expression or super */ null && (Renderer)) {\r\n    constructor(gl, radius = 5, color = [1, 1, 1, 1], square = true) {\r\n        // note: I like vertex & fragments to be included in the script itself.\r\n        // when you change vertex or fragment, this class has to deal with it.\r\n        // putting them somewhere else doesnt make sense to me,\r\n        // they are coupled 1 to 1.\r\n        let vertexSource = `\n        precision mediump int;\n        precision mediump float;\n\n        uniform mat4 u_transform;\n        uniform vec4 u_color;\n        uniform float u_size;\n\n        attribute vec3 a_vertex;\n\n        void main() {\n            // Set the size of a rendered point.\n            gl_PointSize = u_size;\n\n            // Transform the location of the vertex.\n            gl_Position = u_transform * vec4(a_vertex, 1.0);\n        }\n\n        `;\r\n        let fragmentSourceSquare = `\n        precision mediump int;\n        precision mediump float;\n\n        uniform vec4 u_color;\n        // vec2 center = vec2(0.5, 0.5);\n\n        void main() {\n            gl_FragColor = u_color;\n        }\n        `;\r\n        let fragmentSourceRound = `\n        precision mediump int;\n        precision mediump float;\n\n        uniform vec4 u_color;\n        vec2 center = vec2(0.5, 0.5);\n\n        void main() {\n            if (distance(center, gl_PointCoord) > 0.5) {\n               discard;\n            }\n            gl_FragColor = u_color;\n        }\n        `;\r\n        // setup program\r\n        if (square) {\r\n            super(gl, vertexSource, fragmentSourceSquare);\r\n        }\r\n        else {\r\n            super(gl, vertexSource, fragmentSourceRound);\r\n        }\r\n        this.u_transform = gl.getUniformLocation(this.program, "u_transform");\r\n        this.u_size = gl.getUniformLocation(this.program, "u_size");\r\n        this.u_color = gl.getUniformLocation(this.program, "u_color");\r\n        this.color = color;\r\n        this.size = radius;\r\n        this.count = 0;\r\n        // Bind it to ARRAY_BUFFER (think of it as ARRAY_BUFFER = positionBuffer)\r\n        // look up where the vertex data needs to go.\r\n        this.a_position = gl.getAttribLocation(this.program, "a_vertex");\r\n        this.a_position_buffer = gl.createBuffer();\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n    }\r\n    set(points, speed) {\r\n        let gl = this.gl;\r\n        gl.useProgram(this.program);\r\n        // convert all possible entries to a general entry\r\n        let array = getGeneralFloatMatrix(points);\r\n        // from some other thing\r\n        this.count = array.count();\r\n        // // Bind the position buffer.\r\n        gl.enableVertexAttribArray(this.a_position);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        gl.vertexAttribPointer(this.a_position, array._width, gl.FLOAT, false, 0, 0);\r\n        gl.bufferData(gl.ARRAY_BUFFER, array.data, super.convertDrawSpeed(speed));\r\n    }\r\n    render(c) {\r\n        let gl = this.gl;\r\n        let matrix = c.camera.totalMatrix;\r\n        // Tell it to use our program (pair of shaders)\r\n        gl.useProgram(this.program);\r\n        // set uniforms\r\n        // console.log(matrix.data);\r\n        gl.uniformMatrix4fv(this.u_transform, false, matrix.data);\r\n        gl.uniform1f(this.u_size, this.size);\r\n        gl.uniform4f(this.u_color, this.color[0], this.color[1], this.color[2], this.color[3]);\r\n        // // Bind the position buffer.\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        gl.enableVertexAttribArray(this.a_position);\r\n        // Draw the point.\r\n        gl.drawArrays(gl.POINTS, 0, this.count);\r\n    }\r\n    setAndRender(data, c) {\r\n        this.set(data, DrawSpeed.DynamicDraw);\r\n        this.render(c);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/renderers/line-renderer.ts\n// name:    simple-line-renderer.ts\r\n// author:  Jos Feenstra\r\n// purpose: WebGL based rendering of lines.\r\n\r\n\r\n\r\nclass line_renderer_LineRenderer extends (/* unused pure expression or super */ null && (Renderer)) {\r\n    constructor(gl, color = [1, 0, 0, 0.5]) {\r\n        // note: I like vertex & fragments to be included in the script itself.\r\n        // when you change vertex or fragment, this class has to deal with it.\r\n        // putting them somewhere else doesnt make sense to me,\r\n        // they are coupled 1 to 1.\r\n        const vs = `\n        precision mediump int;\n        precision mediump float;\n\n        attribute vec4 a_position;\n        uniform mat4 u_transform;\n        uniform vec4 u_color;\n\n        void main() {\n            gl_Position = u_transform * a_position;\n        }\n        `;\r\n        const fs = `\n        precision mediump int;\n        precision mediump float;\n\n        uniform vec4 u_color;\n\n        void main () {\n            gl_FragColor = u_color;\n        }\n        `;\r\n        // setup program\r\n        super(gl, vs, fs);\r\n        this.u_transform = gl.getUniformLocation(this.program, "u_transform");\r\n        this.u_color = gl.getUniformLocation(this.program, "u_color");\r\n        // we need 2 buffers\r\n        this.a_position = gl.getAttribLocation(this.program, "a_position");\r\n        this.a_position_buffer = gl.createBuffer();\r\n        this.index_buffer = gl.createBuffer();\r\n        // set uniforms which wont change\r\n        gl.useProgram(this.program);\r\n        gl.uniform4f(this.u_color, color[0], color[1], color[2], color[3]);\r\n        this.count = 0;\r\n        this.vertCount = 0;\r\n    }\r\n    set(data, speed = DrawSpeed.StaticDraw, personal = Matrix4.newIdentity()) {\r\n        // save how many faces need to be drawn\r\n        let gl = this.gl;\r\n        let links;\r\n        let verts;\r\n        if (data instanceof Mesh) {\r\n            verts = data.verts;\r\n            links = data.links.getData();\r\n        }\r\n        else {\r\n            verts = data.verts;\r\n            links = data.links;\r\n        }\r\n        // console.log(links);\r\n        gl.useProgram(this.program);\r\n        this.count = links.length;\r\n        this.vertCount = verts._width;\r\n        let drawspeed = this.convertDrawSpeed(speed);\r\n        // vertices\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        gl.enableVertexAttribArray(this.a_position);\r\n        gl.vertexAttribPointer(this.a_position, this.vertCount, gl.FLOAT, false, 0, 0);\r\n        gl.bufferData(gl.ARRAY_BUFFER, verts.data, drawspeed);\r\n        // indices\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.index_buffer);\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, links.buffer, drawspeed);\r\n    }\r\n    render(c) {\r\n        let gl = this.gl;\r\n        let matrix = c.camera.totalMatrix;\r\n        // Tell it to use our program (pair of shaders)\r\n        // POINTERS MUST ALSO BE SET, DO EVERYTHING EXCEPT GL.BUFFERDATA\r\n        gl.useProgram(this.program);\r\n        //\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        gl.enableVertexAttribArray(this.a_position);\r\n        gl.vertexAttribPointer(this.a_position, this.vertCount, gl.FLOAT, false, 0, 0);\r\n        //\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.index_buffer);\r\n        // set uniforms\r\n        gl.uniformMatrix4fv(this.u_transform, false, matrix.data);\r\n        // Draw the point.\r\n        gl.drawElements(gl.LINES, this.count, gl.UNSIGNED_SHORT, 0);\r\n    }\r\n    setAndRender(data, c) {\r\n        this.set(data, DrawSpeed.DynamicDraw);\r\n        this.render(c);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/renderers/simple-mesh-renderer.ts\n// name:    mesh-renderer.ts\r\n// author:  Jos Feenstra\r\n// purpose: WebGL based rendering of a mesh.\r\n\r\nclass simple_mesh_renderer_SimpleMeshRenderer extends (/* unused pure expression or super */ null && (Renderer)) {\r\n    constructor(gl, color = [1, 0, 0, 0.25]) {\r\n        const vs = `\n        precision mediump int;\n        precision mediump float;\n\n        attribute vec4 a_position;\n        uniform mat4 u_transform;\n        uniform vec4 u_color;\n\n        void main() {\n            gl_Position = u_transform * a_position;\n        }\n        `;\r\n        const fs = `\n        precision mediump int;\n        precision mediump float;\n\n        uniform vec4 u_color;\n\n        void main () {\n            gl_FragColor = u_color;\n        }\n        `;\r\n        // setup program\r\n        super(gl, vs, fs);\r\n        this.u_transform = gl.getUniformLocation(this.program, "u_transform");\r\n        this.u_color = gl.getUniformLocation(this.program, "u_color");\r\n        gl.useProgram(this.program);\r\n        gl.uniform4f(this.u_color, color[0], color[1], color[2], color[3]);\r\n        this.count = 0;\r\n        this.size = 0;\r\n        // we need 2 buffers\r\n        // -> 1 float buffer for the positions of all vertices.\r\n        // -> 1 int buffer for the index of all triangles\r\n        this.a_position = gl.getAttribLocation(this.program, "a_position");\r\n        this.a_position_buffer = gl.createBuffer();\r\n        this.index_buffer = gl.createBuffer();\r\n    }\r\n    set(mesh, speed = DrawSpeed.StaticDraw) {\r\n        let gl = this.gl;\r\n        // save how many faces need to be drawn\r\n        gl.useProgram(this.program);\r\n        this.count = mesh.links.data.length;\r\n        // vertices\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        this.size = 3;\r\n        var type = gl.FLOAT;\r\n        var normalize = false;\r\n        gl.vertexAttribPointer(this.a_position, this.size, gl.FLOAT, false, 0, 0);\r\n        gl.bufferData(gl.ARRAY_BUFFER, mesh.verts.data, this.convertDrawSpeed(speed));\r\n        // indices\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.index_buffer);\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, mesh.links.data, this.convertDrawSpeed(speed));\r\n    }\r\n    // render 1 image to the screen\r\n    render(c) {\r\n        let gl = this.gl;\r\n        let matrix = c.camera.totalMatrix;\r\n        // Tell it to use our program (pair of shaders)\r\n        gl.useProgram(this.program);\r\n        gl.enableVertexAttribArray(this.a_position);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        gl.vertexAttribPointer(this.a_position, this.size, gl.FLOAT, false, 0, 0);\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.index_buffer);\r\n        // set uniforms\r\n        gl.uniformMatrix4fv(this.u_transform, false, matrix.data);\r\n        // Draw the point.\r\n        gl.drawElements(gl.TRIANGLES, this.count, gl.UNSIGNED_SHORT, 0);\r\n    }\r\n    setAndRender(r, context) {\r\n        this.set(r, DrawSpeed.DynamicDraw);\r\n        this.render(context);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/renderers/mesh-normals-renderer.ts\n// name:    simple-line-renderer.ts\r\n// author:  Jos Feenstra\r\n// purpose: WebGL based rendering of lines.\r\n\r\n\r\n\r\n\r\n\r\nclass mesh_normals_renderer_NormalRenderer extends (/* unused pure expression or super */ null && (Renderer)) {\r\n    constructor(gl) {\r\n        // note: I like vertex & fragments to be included in the script itself.\r\n        // when you change vertex or fragment, this class has to deal with it.\r\n        // putting them somewhere else doesnt make sense to me,\r\n        // they are coupled 1 to 1.\r\n        const vs = `\n        precision mediump int;\n        precision mediump float;\n\n        attribute vec4 a_vertex;\n        attribute vec4 a_vertex_color;\n\n        uniform mat4 u_transform;\n\n        varying vec4 v_color;\n\n        void main() {\n            gl_Position = u_transform * a_vertex;\n            v_color = a_vertex_color;\n        }\n        `;\r\n        const fs = `\n        precision mediump int;\n        precision mediump float;\n\n        varying vec4 v_color;\n\n        void main () {\n            gl_FragColor = v_color;\n        }\n        `;\r\n        // setup program\r\n        super(gl, vs, fs);\r\n        this.u_transform = gl.getUniformLocation(this.program, "u_transform");\r\n        // we need 2 buffers\r\n        this.a_position = gl.getAttribLocation(this.program, "a_vertex");\r\n        this.a_color = gl.getAttribLocation(this.program, "a_vertex_color");\r\n        this.a_position_buffer = gl.createBuffer();\r\n        this.a_color_buffer = gl.createBuffer();\r\n        this.index_buffer = gl.createBuffer();\r\n        gl.useProgram(this.program);\r\n        this.count = 0;\r\n        this.vertCount = 0;\r\n        this.scale = 0.4;\r\n    }\r\n    // take a general render mesh, and extract normals\r\n    set(rend, speed = DrawSpeed.StaticDraw) {\r\n        // save how many verts need to be drawn\r\n        let gl = this.gl;\r\n        gl.useProgram(this.program);\r\n        let drawspeed = this.convertDrawSpeed(speed);\r\n        this.vertCount = 3;\r\n        let lineverts;\r\n        let normals;\r\n        // different buffer fills based upon normal kind\r\n        let normalKind = rend.getNormalType();\r\n        if (normalKind == NormalKind.Face) {\r\n            let faceCount = rend.mesh.links.count();\r\n            this.count = faceCount * 2;\r\n            lineverts = new Vector3Array(this.count);\r\n            normals = new Vector3Array(this.count);\r\n            for (let f = 0; f < faceCount; f++) {\r\n                let center = rend.getFaceVertices(f).average();\r\n                let normal = rend.norms.getVector(f);\r\n                let i1 = f * 2;\r\n                let i2 = f * 2 + 1;\r\n                lineverts.setVector(i1, center);\r\n                lineverts.setVector(i2, center.add(normal.scaled(this.scale)));\r\n                let color = normal.add(new Vector3(1, 1, 1).div(2));\r\n                normals.setVector(i1, color);\r\n                normals.setVector(i2, color);\r\n            }\r\n        }\r\n        else if (normalKind == NormalKind.Vertex) {\r\n            let vertCount = rend.mesh.verts.count();\r\n            this.count = vertCount * 2;\r\n            lineverts = new Vector3Array(this.count);\r\n            normals = new Vector3Array(this.count);\r\n            for (let i = 0; i < vertCount; i++) {\r\n                let center = rend.mesh.verts.getVector(i);\r\n                let normal = rend.norms.getVector(i);\r\n                let i1 = i * 2;\r\n                let i2 = i * 2 + 1;\r\n                lineverts.setVector(i1, center);\r\n                lineverts.setVector(i2, center.add(normal.scaled(this.scale)));\r\n                let color = normal.add(new Vector3(1, 1, 1)).div(2);\r\n                normals.setVector(i1, color);\r\n                normals.setVector(i2, color);\r\n            }\r\n            // console.log(normals);\r\n        }\r\n        else {\r\n            console.warn("no normals for type", normalKind);\r\n            this.count = 0;\r\n            return;\r\n        }\r\n        // vertices\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        gl.enableVertexAttribArray(this.a_position);\r\n        gl.vertexAttribPointer(this.a_position, this.vertCount, gl.FLOAT, false, 0, 0);\r\n        gl.bufferData(gl.ARRAY_BUFFER, lineverts.data, drawspeed);\r\n        // normals\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_color_buffer);\r\n        gl.enableVertexAttribArray(this.a_color);\r\n        gl.vertexAttribPointer(this.a_color, this.vertCount, gl.FLOAT, false, 0, 0);\r\n        gl.bufferData(gl.ARRAY_BUFFER, normals.data, drawspeed);\r\n        // indices\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.index_buffer);\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, getDefaultIndices(this.count), drawspeed);\r\n    }\r\n    render(c) {\r\n        let gl = this.gl;\r\n        let matrix = c.camera.totalMatrix;\r\n        let camera = c.camera;\r\n        // Tell it to use our program (pair of shaders)\r\n        // POINTERS MUST ALSO BE SET, DO EVERYTHING EXCEPT GL.BUFFERDATA\r\n        gl.useProgram(this.program);\r\n        // buffer 1\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        gl.enableVertexAttribArray(this.a_position);\r\n        gl.vertexAttribPointer(this.a_position, this.vertCount, gl.FLOAT, false, 0, 0);\r\n        // buffer 2\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_color_buffer);\r\n        gl.enableVertexAttribArray(this.a_color);\r\n        gl.vertexAttribPointer(this.a_color, this.vertCount, gl.FLOAT, false, 0, 0);\r\n        // index buffer\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.index_buffer);\r\n        // set uniforms\r\n        gl.uniformMatrix4fv(this.u_transform, false, matrix.data);\r\n        // Draw the point.\r\n        gl.drawElements(gl.LINES, this.count, gl.UNSIGNED_SHORT, 0);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/render/meta-renderer.ts\n\r\nclass meta_renderer_MetaRenderer {\r\n    setAndRender(r, context) {\r\n        this.set(r, DrawSpeed.DynamicDraw);\r\n        this.render(context);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/renderers/mesh-debug-renderer.ts\n// name:    mesh-renderer.ts\r\n// author:  Jos Feenstra\r\n// purpose: WebGL based rendering of a mesh.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass MeshDebugRenderer extends (/* unused pure expression or super */ null && (MetaRenderer)) {\r\n    constructor(gl, faceColor = [1, 0, 0, 0.25], edgeColor = [1, 0, 0, 1], renderNormal = true) {\r\n        super();\r\n        this.faceRend = new SimpleMeshRenderer(gl, faceColor);\r\n        this.lineRend = new LineRenderer(gl, edgeColor);\r\n        this.personal = Matrix4.newIdentity();\r\n        if (renderNormal)\r\n            this.normRend = new NormalRenderer(gl);\r\n    }\r\n    static new(gl, faceColor = [1, 0, 0, 0.25], edgeColor = [1, 0, 0, 1], renderNormal = true) {\r\n        return new MeshDebugRenderer(gl, faceColor, edgeColor, renderNormal);\r\n    }\r\n    set(data, speed = DrawSpeed.StaticDraw) {\r\n        var _a;\r\n        this.personal = data.position;\r\n        this.faceRend.set(data.mesh);\r\n        this.lineRend.set(LineArray.fromMesh(data), speed);\r\n        (_a = this.normRend) === null || _a === void 0 ? void 0 : _a.set(data, speed);\r\n    }\r\n    render(c) {\r\n        var _a;\r\n        this.faceRend.render(c);\r\n        this.lineRend.render(c);\r\n        (_a = this.normRend) === null || _a === void 0 ? void 0 : _a.render(c);\r\n    }\r\n    setAndRender(r, c) {\r\n        this.set(r, DrawSpeed.DynamicDraw);\r\n        this.render(c);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/renderers/rectangle-renderer.ts\n// jos feenstra\r\n\r\nclass RectangleRenderer extends (/* unused pure expression or super */ null && (Renderer)) {\r\n    constructor(gl) {\r\n        // note: I like vertex & fragments to be included in the script itself.\r\n        // when you change vertex or fragment, this class has to deal with it.\r\n        // putting them somewhere else doesnt make sense to me,\r\n        // they are coupled 1 to 1.\r\n        let vertexSource = `\n        attribute vec2 a_position;\n\n        uniform vec2 u_resolution;\n\n        void main() {\n            // convert the rectangle from pixels to 0.0 to 1.0\n            vec2 zeroToOne = ((a_position / u_resolution) * 2.0) - 1.0;\n\n            // convert from 0->1 to 0->2\n            // vec2 zeroToTwo = zeroToOne * 2.0;\n\n            // convert from 0->2 to -1->+1 (clipspace)\n            // vec2 clipSpace = zeroToTwo - 1.0;\n\n            gl_Position = vec4(zeroToOne * vec2(1, -1), 0, 1);\n        }\n        `;\r\n        let fragmentSource = `\n        precision mediump float;\n\n        uniform vec4 u_color;\n        \n        void main() {\n           gl_FragColor = u_color;\n        }\n        `;\r\n        // setup program\r\n        super(gl, vertexSource, fragmentSource);\r\n        // look up where the vertex data needs to go.\r\n        this.a_position = gl.getAttribLocation(this.program, "a_position");\r\n        this.a_position_buffer = gl.createBuffer();\r\n        this.u_resolution = gl.getUniformLocation(this.program, "u_resolution");\r\n        this.u_color = gl.getUniformLocation(this.program, "u_color");\r\n        // Create a buffer to put three 2d clip space points in\r\n        // Bind it to ARRAY_BUFFER (think of it as ARRAY_BUFFER = positionBuffer)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n    }\r\n    set() {\r\n        throw "not used";\r\n    }\r\n    render() {\r\n        throw "not used!";\r\n    }\r\n    setAndRender(rs, c) {\r\n        // Clear the canvas\r\n        let gl = this.gl;\r\n        gl.clearColor(0, 0, 0, 0);\r\n        gl.clear(gl.COLOR_BUFFER_BIT);\r\n        // Tell it to use our program (pair of shaders)\r\n        gl.useProgram(this.program);\r\n        // Turn on the attribute\r\n        gl.enableVertexAttribArray(this.a_position);\r\n        gl.uniform2f(this.u_resolution, gl.canvas.width, gl.canvas.height);\r\n        // Bind the position buffer.\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        // Tell the attribute how to get data out of positionBuffer (ARRAY_BUFFER)\r\n        var size = 2; // 2 components per iteration\r\n        var type = gl.FLOAT; // the data is 32bit floats\r\n        var normalize = false; // don\'t normalize the data\r\n        var stride = 0; // 0 = move forward size * sizeof(type) each iteration to get the next position\r\n        var offset = 0; // start at the beginning of the buffer\r\n        gl.vertexAttribPointer(this.a_position, size, type, normalize, stride, offset);\r\n        // draw 50 random rectangles in random colors\r\n        for (let r of rs) {\r\n            // Setup a random rectangle\r\n            // This will write to positionBuffer because\r\n            // its the last thing we bound on the ARRAY_BUFFER\r\n            // bind point\r\n            this.setRectangle(gl, r);\r\n            // Set a random color.\r\n            gl.uniform4f(this.u_color, Math.random(), Math.random(), Math.random(), 1);\r\n            // Draw the rectangle.\r\n            var primitiveType = gl.TRIANGLES;\r\n            var offset = 0;\r\n            var count = 6;\r\n            gl.drawArrays(primitiveType, offset, count);\r\n        }\r\n    }\r\n    // Fill the buffer with the values that define a rectangle.\r\n    setRectangle(gl, r) {\r\n        let verts = r.getVertices();\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([\r\n            verts[0].x,\r\n            verts[0].y,\r\n            verts[1].x,\r\n            verts[1].y,\r\n            verts[2].x,\r\n            verts[2].y,\r\n            verts[2].x,\r\n            verts[2].y,\r\n            verts[1].x,\r\n            verts[1].y,\r\n            verts[3].x,\r\n            verts[3].y,\r\n        ]), gl.STATIC_DRAW);\r\n    }\r\n    randomInt(range) {\r\n        return Math.floor(Math.random() * range);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/renderers/shaded-mesh-renderer.ts\n// name:    mesh-renderer.ts\r\n// author:  Jos Feenstra\r\n// purpose: A shader wrapper for rendering shaded, textured, meshes\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass ShadedMeshRenderer extends (/* unused pure expression or super */ null && (Renderer)) {\r\n    constructor(gl) {\r\n        const vs = `\n\n        attribute vec4 a_vertex_position;\n        attribute vec3 a_vertex_normal;\n        attribute float a_vertex_ambi;\n    \n        uniform mat4 u_normal_matrix;\n        uniform mat4 u_personal_matrix;\n        uniform mat4 u_model_view_matrix;\n        uniform mat4 u_projection_matrix;\n\n        // should be uniforms constances\n        uniform vec3 u_ambient_light;\n        uniform vec3 u_dir_light_color;\n        uniform vec3 u_dir_light_vector;  \n\n        // varying vec2 v_texture_coord;\n        varying vec3 v_lighting;\n    \n        void main(void) {\n\n            gl_Position = u_projection_matrix * u_model_view_matrix * u_personal_matrix * a_vertex_position;\n            // v_texture_coord = a_texture_coord;\n        \n            // Apply lighting effect\n            // highpr is removed\n            vec4 transformedNormal = u_normal_matrix * vec4(a_vertex_normal, 1.0);\n            float directional = max(dot(transformedNormal.xyz, u_dir_light_vector), 0.0);\n            v_lighting = (u_ambient_light + (u_dir_light_color * directional));\n        }\n        `;\r\n        const fs = `\n        precision mediump float;\n\n        // Calculates the diffuse factor produced by the light illumination  \n        // if done like this, color could look nicer\n        // float diffuseFactor(vec3 normal, vec3 light_direction) {\n        //     float df = dot(normalize(normal), normalize(light_direction));\n        //     if (gl_FrontFacing) {\n        //         df = -df;\n        //     }\n        //     return max(0.0, df);\n        // }\n\n        varying vec3 v_lighting;\n\n        void main() {\n\n            // Fragment shader output\n            gl_FragColor = vec4(v_lighting, 1.0);\n        }\n        `;\r\n        // setup program\r\n        super(gl, vs, fs);\r\n        gl.useProgram(this.program);\r\n        this.count = 0;\r\n        this.size = 0;\r\n        // init uniforms\r\n        this.u_normal_matrix = gl.getUniformLocation(this.program, "u_normal_matrix");\r\n        this.u_model_view_matrix = gl.getUniformLocation(this.program, "u_model_view_matrix");\r\n        this.u_projection_matrix = gl.getUniformLocation(this.program, "u_projection_matrix");\r\n        this.u_personal_matrix = gl.getUniformLocation(this.program, "u_personal_matrix");\r\n        // light uniforms\r\n        this.u_ambient_light = gl.getUniformLocation(this.program, "u_ambient_light");\r\n        this.u_dir_light_color = gl.getUniformLocation(this.program, "u_dir_light_color");\r\n        this.u_dir_light_vector = gl.getUniformLocation(this.program, "u_dir_light_vector");\r\n        // init attributes: verts | normals | ambi\r\n        this.a_vertex_position = gl.getAttribLocation(this.program, "a_vertex_position");\r\n        this.a_vertex_postition_buffer = gl.createBuffer();\r\n        this.a_vertex_normal = gl.getAttribLocation(this.program, "a_vertex_normal");\r\n        this.a_vertex_normal_buffer = gl.createBuffer();\r\n        this.a_vertex_ambi = gl.getAttribLocation(this.program, "a_vertex_ambi");\r\n        this.a_vertex_ambi_buffer = gl.createBuffer();\r\n        this.index_buffer = gl.createBuffer();\r\n    }\r\n    set(rend, speed = DrawSpeed.StaticDraw) {\r\n        // NOTE: processing time is longer: we use DrawArray instead of DrawElements, to deal with normals & uv data\r\n        let gl = this.gl;\r\n        this.setShallow(gl, rend);\r\n        let normalType = rend.getNormalType();\r\n        if (normalType == NormalKind.Face) {\r\n            // save how many verts need to be drawn\r\n            gl.useProgram(this.program);\r\n            this.count = rend.mesh.links.data.length;\r\n            let ds = this.convertDrawSpeed(speed);\r\n            // convert to non-indexed verts & norms\r\n            let verts = new Vector3Array(this.count);\r\n            let norms = new Vector3Array(this.count);\r\n            let ambi = new Float32Array(this.count);\r\n            let faceCount = rend.mesh.links.count();\r\n            for (let i = 0; i < rend.mesh.links.count(); i++) {\r\n                let norm = rend.norms.getVector(i);\r\n                rend.mesh.links.getRow(i).forEach((v, j) => {\r\n                    let id = i * 3 + j;\r\n                    verts.setVector(id, rend.mesh.verts.getVector(v));\r\n                    norms.setVector(id, norm);\r\n                    ambi[id] = 1;\r\n                });\r\n            }\r\n            // buffer 1\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.a_vertex_postition_buffer);\r\n            gl.vertexAttribPointer(this.a_vertex_position, 3, gl.FLOAT, false, 0, 0);\r\n            gl.bufferData(gl.ARRAY_BUFFER, verts.data.buffer, ds);\r\n            // buffer 2\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.a_vertex_normal_buffer);\r\n            gl.vertexAttribPointer(this.a_vertex_normal, 3, gl.FLOAT, false, 0, 0);\r\n            gl.bufferData(gl.ARRAY_BUFFER, norms.data.buffer, ds);\r\n            // buffer 3\r\n            // gl.bindBuffer(gl.ARRAY_BUFFER, this.a_vertex_ambi_buffer);\r\n            // gl.vertexAttribPointer(this.a_vertex_ambi, 1, gl.FLOAT, false, 0, 0);\r\n            // gl.bufferData(gl.ARRAY_BUFFER, ambi, ds);\r\n            // index\r\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.index_buffer);\r\n            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, getDefaultIndices(this.count), this.convertDrawSpeed(speed));\r\n        }\r\n        else if (normalType == NormalKind.Vertex) {\r\n            // save how many verts need to be drawn\r\n            gl.useProgram(this.program);\r\n            let ds = this.convertDrawSpeed(speed);\r\n            // convert to non-indexed verts & norms\r\n            let ambi = rend.ambi;\r\n            let faceCount = rend.mesh.links.count();\r\n            this.count = rend.mesh.links.data.length;\r\n            // console.log(rend.mesh.links);\r\n            // buffer 1\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.a_vertex_postition_buffer);\r\n            gl.vertexAttribPointer(this.a_vertex_position, 3, gl.FLOAT, false, 0, 0);\r\n            gl.bufferData(gl.ARRAY_BUFFER, rend.mesh.verts.data, ds);\r\n            // buffer 2\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.a_vertex_normal_buffer);\r\n            gl.vertexAttribPointer(this.a_vertex_normal, 3, gl.FLOAT, false, 0, 0);\r\n            gl.bufferData(gl.ARRAY_BUFFER, rend.norms.data, ds);\r\n            // buffer 3\r\n            // gl.bindBuffer(gl.ARRAY_BUFFER, this.a_vertex_ambi_buffer);\r\n            // gl.vertexAttribPointer(this.a_vertex_ambi, 1, gl.FLOAT, false, 0, 0);\r\n            // gl.bufferData(gl.ARRAY_BUFFER, ambi, ds);\r\n            // index\r\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.index_buffer);\r\n            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, rend.mesh.links.data, ds);\r\n        }\r\n        else {\r\n            console.log("cannot render with this normal data");\r\n        }\r\n        // never render more than possible\r\n        if (this.count > Const.MAX_U16) {\r\n            this.count = Const.MAX_U16;\r\n            console.warn("mesh max reached.");\r\n        }\r\n    }\r\n    // set only the basic elements.\r\n    // use this to dynamicly alter things like position and color,\r\n    // without refilling all buffers with it\r\n    setShallow(gl, rend) {\r\n        // use the program\r\n        gl.useProgram(this.program);\r\n        // position\r\n        gl.uniformMatrix4fv(this.u_personal_matrix, false, rend.position.data);\r\n        // color\r\n        let color = rend.color;\r\n        // shift shadow to darker, slightly to blue\r\n        let shadowColor = color.map((x) => x * 0.25);\r\n        shadowColor[2] = Math.min(1, shadowColor[2] * 1.05);\r\n        // shift bright color slightly to yellow\r\n        let brightColor = color.map((x) => x);\r\n        brightColor[0] = Math.min(1, brightColor[0] * 1.05);\r\n        brightColor[1] = Math.min(1, brightColor[1] * 1.05);\r\n        brightColor[2] = Math.min(1, brightColor[2] * 1);\r\n        gl.uniform3fv(this.u_ambient_light, shadowColor.slice(0, 3));\r\n        gl.uniform3fv(this.u_dir_light_color, brightColor.slice(0, 3));\r\n    }\r\n    // render the previous set data to the screen\r\n    render(c) {\r\n        // console.log("rendering..");\r\n        let gl = this.gl;\r\n        let camera = c.camera;\r\n        // use the program\r\n        gl.useProgram(this.program);\r\n        // set uniforms\r\n        gl.uniformMatrix4fv(this.u_normal_matrix, false, Matrix4.newIdentity().data);\r\n        gl.uniformMatrix4fv(this.u_model_view_matrix, false, camera.worldMatrix.data);\r\n        gl.uniformMatrix4fv(this.u_projection_matrix, false, camera.projectMatrix.data);\r\n        // set light direction\r\n        let vec = camera.getMouseWorldRay(gl.canvas.width, gl.canvas.height, false).normal;\r\n        gl.uniform3fv(this.u_dir_light_vector, Vector3.unitX().add(Vector3.unitY()).add(Vector3.unitZ()).normalize().toArray());\r\n        // buffer 1\r\n        gl.enableVertexAttribArray(this.a_vertex_position);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_vertex_postition_buffer);\r\n        gl.vertexAttribPointer(this.a_vertex_position, 3, gl.FLOAT, false, 0, 0);\r\n        // buffer 2\r\n        gl.enableVertexAttribArray(this.a_vertex_normal);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_vertex_normal_buffer);\r\n        gl.vertexAttribPointer(this.a_vertex_normal, 3, gl.FLOAT, false, 0, 0);\r\n        // buffer 3\r\n        // gl.enableVertexAttribArray(this.a_vertex_ambi);\r\n        // gl.bindBuffer(gl.ARRAY_BUFFER, this.a_vertex_ambi_buffer);\r\n        // gl.vertexAttribPointer(this.a_vertex_normal, 3, gl.FLOAT, false, 0, 0);\r\n        // indices\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.index_buffer);\r\n        // draw!\r\n        gl.drawElements(gl.TRIANGLES, this.count, gl.UNSIGNED_SHORT, 0);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/renderers/texture-mesh-renderer.ts\n// name:    mesh-renderer.ts\r\n// author:  Jos Feenstra\r\n// purpose: WebGL based rendering of a mesh.\r\n\r\nclass texture_mesh_renderer_TextureMeshRenderer extends (/* unused pure expression or super */ null && (Renderer)) {\r\n    constructor(gl) {\r\n        const vs = `\n        // precision mediump int;\n        // precision mediump float;\n\n        attribute vec4 a_position;\n        attribute vec2 a_texcoord;\n\n        uniform mat4 u_transform;\n\n        varying vec2 v_texcoord;\n\n        void main() {\n            gl_Position = u_transform * a_position;\n            v_texcoord = a_texcoord;\n        }\n        `;\r\n        const fs = `\n        precision mediump float;\n\n        varying vec2 v_texcoord;\n\n        uniform sampler2D u_texture;\n\n        void main() {\n            gl_FragColor = texture2D(u_texture, v_texcoord);\n        }\n        `;\r\n        // setup program\r\n        super(gl, vs, fs);\r\n        gl.useProgram(this.program);\r\n        this.count = 0;\r\n        this.size = 0;\r\n        // init uniforms\r\n        this.u_transform = gl.getUniformLocation(this.program, "u_transform");\r\n        this.u_texture = gl.getUniformLocation(this.program, "u_texture");\r\n        // init three buffers: verts | uvs | links\r\n        this.a_position = gl.getAttribLocation(this.program, "a_position");\r\n        this.a_position_buffer = gl.createBuffer();\r\n        this.a_texcoord = gl.getAttribLocation(this.program, "a_texcoord");\r\n        this.a_texcoord_buffer = gl.createBuffer();\r\n        this.index_buffer = gl.createBuffer();\r\n        // init texture\r\n        this.texture_id = Renderer.getNextTextureID();\r\n        this.texture = gl.createTexture();\r\n    }\r\n    static new(gl) {\r\n        return new texture_mesh_renderer_TextureMeshRenderer(gl);\r\n    }\r\n    set(r, speed) {\r\n        let gl = this.gl;\r\n        if (!r.texture) {\r\n            console.warn("Mesh does not contain a texture!");\r\n            return;\r\n        }\r\n        // save how many faces need to be drawn\r\n        gl.useProgram(this.program);\r\n        this.count = r.mesh.links.data.length;\r\n        // buffer 1\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        gl.vertexAttribPointer(this.a_position, 3, gl.FLOAT, false, 0, 0);\r\n        gl.bufferData(gl.ARRAY_BUFFER, r.mesh.verts.data, this.convertDrawSpeed(speed));\r\n        // buffer 2\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_texcoord_buffer);\r\n        gl.vertexAttribPointer(this.a_texcoord, 2, gl.FLOAT, false, 0, 0);\r\n        gl.bufferData(gl.ARRAY_BUFFER, r.uvs.data, this.convertDrawSpeed(speed));\r\n        // buffer 3\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.index_buffer);\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(r.mesh.links.data), this.convertDrawSpeed(speed));\r\n        // texture\r\n        gl.activeTexture(gl.TEXTURE0 + this.texture_id);\r\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, r.texture);\r\n        // alternative texture -> Fill the texture with a 1x1 blue pixel.\r\n        // gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([0, 128, 128, 255]));\r\n        // gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, mesh.texture.data);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n        gl.generateMipmap(gl.TEXTURE_2D);\r\n    }\r\n    render(context) {\r\n        let gl = this.gl;\r\n        let camera = context.camera;\r\n        let matrix = camera.totalMatrix;\r\n        // console.log("rendering..");\r\n        // use the program\r\n        gl.useProgram(this.program);\r\n        // set uniforms\r\n        gl.uniformMatrix4fv(this.u_transform, false, matrix.data);\r\n        // set texture\r\n        gl.uniform1i(this.u_texture, this.texture_id);\r\n        gl.activeTexture(gl.TEXTURE0 + this.texture_id);\r\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\r\n        // buffer 1\r\n        gl.enableVertexAttribArray(this.a_position);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        gl.vertexAttribPointer(this.a_position, 3, gl.FLOAT, false, 0, 0);\r\n        // buffer 2\r\n        gl.enableVertexAttribArray(this.a_texcoord);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_texcoord_buffer);\r\n        gl.vertexAttribPointer(this.a_texcoord, 2, gl.FLOAT, false, 0, 0);\r\n        // buffer 3\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.index_buffer);\r\n        // draw!\r\n        gl.drawElements(gl.TRIANGLES, this.count, gl.UNSIGNED_SHORT, 0);\r\n    }\r\n    setAndRender(r, context) {\r\n        this.set(r, DrawSpeed.DynamicDraw);\r\n        this.render(context);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/renderers/graph-debug-renderer.ts\n// name:    mesh-renderer.ts\r\n// author:  Jos Feenstra\r\n// purpose: WebGL based rendering of a mesh.\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass GraphDebugRenderer extends (/* unused pure expression or super */ null && (MetaRenderer)) {\r\n    constructor(gl, faceColor = [1, 0, 0, 0.25], edgeColor = [1, 0, 0, 1], renderNormal = true) {\r\n        super();\r\n        this.faceRend = new SimpleMeshRenderer(gl, faceColor);\r\n        this.lineRend = new LineRenderer(gl, edgeColor);\r\n        this.pointRend = new DotRenderer3(gl, 7, edgeColor, false);\r\n        if (renderNormal)\r\n            this.normRend = new NormalRenderer(gl);\r\n    }\r\n    set(graph, speed = DrawSpeed.StaticDraw) {\r\n        //this.faceRend.setMesh(gl, mesh);\r\n        this.pointRend.set(graph.allVertPositions(), speed);\r\n        this.lineRend.set(graph.toLines(), speed);\r\n        // this.normRend?.setWithLists(graph.allVertPositions(), graph.allNorms(), speed);\r\n    }\r\n    // render 1 image to the screen\r\n    render(c) {\r\n        this.pointRend.render(c);\r\n        // this.faceRend.render(gl, camera.totalMatrix);\r\n        this.lineRend.render(c);\r\n        // this.normRend?.render(gl, camera);\r\n    }\r\n    setAndRender(r, context) {\r\n        throw new Error("Method not implemented.");\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/system/domwrappers.ts\n// domwrappers.ts\r\n// author : Jos Feenstra\r\n// purpuse : wrap certain DOM functionalities\r\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nfunction addDropFileEventListeners(canvas, filesCallback) {\r\n    console.log("setting up drag events...");\r\n    canvas.addEventListener("dragenter", function (ev) {\r\n        // ev.stopPropagation();\r\n        ev.preventDefault();\r\n        console.log("entering entering...");\r\n        return true;\r\n    }, true);\r\n    // setup file upload\r\n    canvas.addEventListener("dragover", function (ev) {\r\n        //add hover class when drag over\r\n        // ev.stopPropagation();\r\n        ev.preventDefault();\r\n        console.log("over drag....");\r\n        return true;\r\n    }, true);\r\n    canvas.addEventListener("dragleave", function (ev) {\r\n        //remove hover class when drag out\r\n        // ev.stopPropagation();\r\n        ev.preventDefault();\r\n        console.log("leaving drag....");\r\n        return true;\r\n    }, true);\r\n    canvas.addEventListener("drop", function (ev) {\r\n        //prevent browser from open the file when drop off\r\n        ev.stopPropagation();\r\n        ev.preventDefault();\r\n        //retrieve uploaded files data\r\n        var files = ev.dataTransfer.files;\r\n        filesCallback(files);\r\n        return true;\r\n    }, true);\r\n}\r\nfunction loadImageTest(files) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        let image = yield loadImageFromFile(files.item(0));\r\n    });\r\n}\r\nfunction loadTextFromFile(file) {\r\n    return new Promise((resolve, reject) => {\r\n        let reader = new FileReader();\r\n        reader.readAsText(file);\r\n        reader.onload = () => {\r\n            // console.log(reader.result);\r\n            resolve(reader.result);\r\n        };\r\n        reader.onerror = (error) => reject(error);\r\n    });\r\n}\r\nfunction loadJSONFromFile(file) {\r\n    return new Promise((resolve, reject) => {\r\n        let reader = new FileReader();\r\n        reader.readAsText(file);\r\n        reader.onload = () => {\r\n            // console.log(reader.result);\r\n            resolve(JSON.parse(reader.result));\r\n        };\r\n        reader.onerror = (error) => reject(error);\r\n    });\r\n}\r\nfunction loadImageFromFile(file) {\r\n    return new Promise((resolve, reject) => {\r\n        let reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        reader.onload = () => loadImageHelper1(reader).then((imageData) => resolve(imageData), (error) => reject(error));\r\n    });\r\n}\r\nfunction loadImageFromBlob(blob) {\r\n    return new Promise((resolve, reject) => {\r\n        let reader = new FileReader();\r\n        reader.readAsDataURL(blob);\r\n        reader.onload = () => loadImageHelper1(reader).then((imageData) => resolve(imageData), (error) => reject(error));\r\n    });\r\n}\r\nfunction loadImageHelper1(fileReader) {\r\n    return new Promise(function (resolve, reject) {\r\n        let img = document.createElement("img");\r\n        img.src = fileReader.result;\r\n        img.onload = () => resolve(loadImageHelper2(img));\r\n        img.onerror = () => reject(new Error(`Script load error for ${img}`));\r\n    });\r\n}\r\nfunction loadImageHelper2(image) {\r\n    var _a;\r\n    // turn it into image data by building a complete canvas and sampling it\r\n    let canvas = document.createElement("canvas");\r\n    canvas.width = image.width;\r\n    canvas.height = image.height;\r\n    let ctx = canvas.getContext("2d");\r\n    ctx.drawImage(image, 0, 0);\r\n    let data = ctx.getImageData(0, 0, image.width, image.height);\r\n    (_a = canvas.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(canvas);\r\n    return data;\r\n}\r\n\n;// CONCATENATED MODULE: ./src/system/input-state.ts\n// CanvasInputHandler.ts\r\n// author : Jos Feenstra\r\n// purpose : handle all input events.\r\n\r\nvar Key;\r\n(function (Key) {\r\n    Key[Key["A"] = 0] = "A";\r\n    Key[Key["B"] = 1] = "B";\r\n    Key[Key["C"] = 2] = "C";\r\n    Key[Key["D"] = 3] = "D";\r\n    Key[Key["E"] = 4] = "E";\r\n    Key[Key["F"] = 5] = "F";\r\n    Key[Key["G"] = 6] = "G";\r\n    Key[Key["H"] = 7] = "H";\r\n    Key[Key["I"] = 8] = "I";\r\n    Key[Key["J"] = 9] = "J";\r\n    Key[Key["K"] = 10] = "K";\r\n    Key[Key["L"] = 11] = "L";\r\n    Key[Key["M"] = 12] = "M";\r\n    Key[Key["N"] = 13] = "N";\r\n    Key[Key["O"] = 14] = "O";\r\n    Key[Key["P"] = 15] = "P";\r\n    Key[Key["Q"] = 16] = "Q";\r\n    Key[Key["R"] = 17] = "R";\r\n    Key[Key["S"] = 18] = "S";\r\n    Key[Key["T"] = 19] = "T";\r\n    Key[Key["U"] = 20] = "U";\r\n    Key[Key["V"] = 21] = "V";\r\n    Key[Key["W"] = 22] = "W";\r\n    Key[Key["X"] = 23] = "X";\r\n    Key[Key["Y"] = 24] = "Y";\r\n    Key[Key["Z"] = 25] = "Z";\r\n    Key[Key["Up"] = 26] = "Up";\r\n    Key[Key["Down"] = 27] = "Down";\r\n    Key[Key["Left"] = 28] = "Left";\r\n    Key[Key["Right"] = 29] = "Right";\r\n    Key[Key["Space"] = 30] = "Space";\r\n    Key[Key["Control"] = 31] = "Control";\r\n    Key[Key["Alt"] = 32] = "Alt";\r\n    Key[Key["Shift"] = 33] = "Shift";\r\n    Key[Key["Enter"] = 34] = "Enter";\r\n    Key[Key["Esc"] = 35] = "Esc";\r\n    Key[Key["N1"] = 36] = "N1";\r\n    Key[Key["N2"] = 37] = "N2";\r\n    Key[Key["N3"] = 38] = "N3";\r\n    Key[Key["N4"] = 39] = "N4";\r\n    Key[Key["N5"] = 40] = "N5";\r\n    Key[Key["N6"] = 41] = "N6";\r\n    Key[Key["N7"] = 42] = "N7";\r\n    Key[Key["N8"] = 43] = "N8";\r\n    Key[Key["N9"] = 44] = "N9";\r\n    Key[Key["N0"] = 45] = "N0";\r\n    Key[Key["Plus"] = 46] = "Plus";\r\n    Key[Key["Minus"] = 47] = "Minus";\r\n    Key[Key["Backspace"] = 48] = "Backspace";\r\n})(Key || (Key = {}));\r\nfunction toMapping(key) {\r\n    switch (key) {\r\n        case Key.A:\r\n            return 1;\r\n        case Key.B:\r\n            return 2;\r\n        case Key.C:\r\n            return 3;\r\n        case Key.D:\r\n            return 4;\r\n        case Key.E:\r\n            return 5;\r\n        case Key.F:\r\n            return 6;\r\n        default:\r\n            return 0;\r\n    }\r\n}\r\nclass InputState {\r\n    constructor(canvas) {\r\n        this.mousePos = vector_Vector2.zero();\r\n        this.mouseDelta = vector_Vector2.zero();\r\n        this.mouseLeftDown = false;\r\n        this.mouseLeftPressed = false;\r\n        this.mouseLeftPrev = false;\r\n        this.mouseRightDown = false;\r\n        this.mouseRightPressed = false;\r\n        this.mouseRightPrev = false;\r\n        this.mouseMiddleDown = false;\r\n        this.mouseMiddlePressed = false;\r\n        this.mouseMiddlePrev = false;\r\n        this.keysDown = {};\r\n        this.keysPressed = [];\r\n        this.scrollValue = 0;\r\n        // link\r\n        this.canvas = canvas;\r\n        // time\r\n        this.tick = 0;\r\n        this.oldTime = Date.now();\r\n        this.newTime = this.oldTime;\r\n        this.startTime = Date.now();\r\n        this.minimumTick = 1000 / 144;\r\n        // mouse\r\n        canvas.addEventListener("mousemove", this.setMousePos.bind(this));\r\n        canvas.addEventListener("mousedown", this.setMouseDown.bind(this));\r\n        canvas.addEventListener("mouseup", this.setMouseUp.bind(this));\r\n        canvas.addEventListener("contextmenu", (e) => {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n        });\r\n        canvas.addEventListener("mousemove", this.setMousePos.bind(this));\r\n        canvas.addEventListener("wheel", this.setMouseScroll.bind(this));\r\n        canvas.addEventListener("touchmove", this.setTouch.bind(this));\r\n        canvas.addEventListener("touchstart", this.setTouch.bind(this));\r\n        canvas.addEventListener("touchend", this.setTouchUp.bind(this));\r\n        for (let i = 0; i < 223; i++)\r\n            this.keysDown[i] = false;\r\n        // keyboard\r\n        canvas.addEventListener("keydown", this.onKeyDown.bind(this));\r\n        // canvas.addEventListener("keypressed", this.onKeyPressed.bind(this));\r\n        canvas.addEventListener("keyup", this.onKeyUp.bind(this));\r\n        // final\r\n        canvas.focus();\r\n    }\r\n    preUpdate() {\r\n        // this must be called every tick within whatever context this is used\r\n        // update time\r\n        this.newTime = Date.now();\r\n        this.tick = this.newTime - this.oldTime;\r\n        this.oldTime = this.newTime;\r\n        // update mouse\r\n        this.mouseLeftPressed = this.mouseLeftPrev != this.mouseLeftDown && this.mouseLeftDown;\r\n        this.mouseRightPressed = this.mouseRightPrev != this.mouseRightDown && this.mouseRightDown;\r\n        this.mouseMiddlePressed =\r\n            this.mouseMiddlePrev != this.mouseMiddleDown && this.mouseMiddleDown;\r\n        this.mouseLeftPrev = this.mouseLeftDown;\r\n        this.mouseRightPrev = this.mouseRightDown;\r\n        this.mouseMiddlePrev = this.mouseMiddleDown;\r\n    }\r\n    postUpdate() {\r\n        // this also must be called for keyIsPressed to work\r\n        // refresh keypresses\r\n        this.keysPressed = [];\r\n    }\r\n    IsKeyDown(key) {\r\n        return this.keysDown[key];\r\n    }\r\n    IsKeyPressed(key) {\r\n        return this.keysPressed.includes(key);\r\n    }\r\n    onKeyDown(e) {\r\n        if (this.keysDown[e.key] == true)\r\n            return;\r\n        console.log(e.key);\r\n        this.keysDown[e.key.toLowerCase()] = true;\r\n        this.keysPressed.push(e.key);\r\n    }\r\n    onKeyUp(e) {\r\n        this.keysDown[e.key.toLowerCase()] = false;\r\n    }\r\n    onKeyPressed(e) {\r\n        // NOTE: i made a different system to handle this, see onKeyDown\r\n    }\r\n    setTouch(e) {\r\n        e.preventDefault();\r\n        this.mousePos = new vector_Vector2(e.touches[0].clientX, e.touches[0].clientY);\r\n        this.mouseLeftDown = true;\r\n    }\r\n    setTouchUp(e) {\r\n        e.preventDefault();\r\n        this.mouseLeftDown = false;\r\n    }\r\n    setMouseScroll(e) {\r\n        // console.log("we be scrollin\' now...")\r\n        // normalize all scrolling behaviour\r\n        let value = 0.1;\r\n        if (e.deltaY < 0)\r\n            value = -0.1;\r\n        // we dont want negative scroll values...\r\n        this.scrollValue = Math.max(0, this.scrollValue + value);\r\n    }\r\n    setMousePos(e) {\r\n        // this is a bit messy, BUT, multiply by camera parameters\r\n        this.mousePos = new vector_Vector2(e.clientX, e.clientY);\r\n    }\r\n    setMouseUp(e) {\r\n        let code = e.buttons;\r\n        if (code < 4) {\r\n            this.mouseMiddleDown = false;\r\n        }\r\n        if (code < 2) {\r\n            this.mouseRightDown = false;\r\n        }\r\n        if (code < 1) {\r\n            this.mouseLeftDown = false;\r\n        }\r\n    }\r\n    setMouseDown(e) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        this.canvas.focus();\r\n        let code = e.buttons;\r\n        if (code >= 4) {\r\n            code -= 4;\r\n            this.mouseMiddleDown = true;\r\n        }\r\n        if (code >= 2) {\r\n            code -= 2;\r\n            this.mouseRightDown = true;\r\n        }\r\n        if (code >= 1) {\r\n            code -= 1;\r\n            this.mouseLeftDown = true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/system/fpsCounter.ts\nclass FpsCounter {\r\n    constructor() {\r\n        this.fps = 0;\r\n        this.updateEveryXTicks = 100;\r\n        this.elapsed = 0;\r\n        this.frames = 0;\r\n    }\r\n    update(state) {\r\n        this.frames += 1;\r\n        this.elapsed += state.tick;\r\n        if (this.elapsed > this.updateEveryXTicks) {\r\n            this.setFps();\r\n            this.elapsed = 0;\r\n            this.frames = 0;\r\n        }\r\n    }\r\n    setFps() {\r\n        this.fps = Math.round((this.frames / this.elapsed) * 1000);\r\n    }\r\n    getFps() {\r\n        return this.fps;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/system/core.ts\n// Author: Jos Feenstra\r\n// Purpose: The Core app. This can hold multiple other apps with their own Update and Draw calls.\r\n// Use this to switch between Apps, or run multiple Apps.\r\n\r\n\r\n\r\nclass Core {\r\n    constructor(canvas, gl, uiFrame) {\r\n        this.STOP = false;\r\n        this.canvas = canvas;\r\n        this.gl = gl;\r\n        this.state = new InputState(canvas);\r\n        this.fpsCounter = new FpsCounter();\r\n        this.ui = new UI(uiFrame);\r\n        this.apps = new Map();\r\n    }\r\n    // todo: cycle through apps\r\n    addApp(app) {\r\n        this.apps.set(app.name, app);\r\n        this.activateApp(app);\r\n    }\r\n    removeApp(appName) {\r\n        this.ui.removeContext(appName);\r\n        this.apps.delete(appName);\r\n    }\r\n    activateApp(app) {\r\n        this.ui.addContext(app.name);\r\n        this.ui.addText(app.description);\r\n        app.ui(this.ui);\r\n        app.start();\r\n    }\r\n    update() {\r\n        this.state.preUpdate();\r\n        this.fpsCounter.update(this.state);\r\n        if (this.state.IsKeyPressed("Esc"))\r\n            this.STOP = true;\r\n        this.apps.forEach((app) => {\r\n            app.update(this.state);\r\n        });\r\n        this.state.postUpdate();\r\n    }\r\n    draw() {\r\n        const canvas = this.canvas;\r\n        const gl = this.gl;\r\n        // put fps in the title\r\n        // document.title = "fps: " + this.fpsCounter.getFps();\r\n        // pre-gl business\r\n        if (window.innerHeight != canvas.height || window.innerWidth != canvas.width) {\r\n            canvas.height = window.innerHeight;\r\n            // canvas.clientHeight = window.innerHeight;\r\n            canvas.style.height = window.innerHeight.toString();\r\n            canvas.width = window.innerWidth;\r\n            // canvas.clientWidth = window.innerWidth;\r\n            canvas.style.width = window.innerWidth.toString();\r\n            gl.viewport(0, 0, window.innerWidth, window.innerHeight);\r\n        }\r\n        // Renderer.resizeCanvas(this.gl);\r\n        this.gl.clearColor(0, 0, 0, 0);\r\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT);\r\n        // render all apps\r\n        // TODO : reverse order\r\n        this.apps.forEach((app) => {\r\n            app.draw(this.gl);\r\n        });\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/rendercombos/image-combi.ts\n\r\n\r\nclass ImageCombi extends (/* unused pure expression or super */ null && (Combi)) {\r\n    constructor(gl) {\r\n        super(gl, [], TextureMeshRenderer.new);\r\n    }\r\n    static new(gl) {\r\n        return new ImageCombi(gl);\r\n    }\r\n    buffer() {\r\n        // i was having trouble rendering images... this is a workaround:\r\n        // convert the this.images[] list into the this.imageMeshes list. then render that with the normal renderer\r\n        this.buffered = [];\r\n        let size = 256;\r\n        let accHeight = 0;\r\n        this.state.forEach((s, i) => {\r\n            let height = s.height;\r\n            let width = s.width;\r\n            let rec = new Rectangle3(Plane.fromPVV(new Vector3(0, 0, 0), new Vector3(0, 0, 1), new Vector3(-1, 0, 0)), Domain2.fromBounds(10, 10 + width, accHeight, accHeight + height));\r\n            let mesh = Mesh.fromRect(rec);\r\n            mesh.setTexture(s.resize(size, size).toImageData()); // note: webgl can only work with 2^x * 512 images\r\n            this.buffered.push(mesh);\r\n            accHeight += height + 10;\r\n        });\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/lib.ts\n// purpose: make sure the entire library is callable from one point.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n;// CONCATENATED MODULE: ./demo/apps/spherical/spherical.ts\n\r\nfunction createGraph(liftType, subcount, quadsubcount, randomEdges) {\r\n    // 0 | setup\r\n    const mesh = mesh_Mesh.newIcosahedron(0.5);\r\n    let graph = mesh.toGraph();\r\n    let center = new vector_Vector3(0, 0, 0);\r\n    let radius = 1;\r\n    // 1 | subdivide\r\n    for (let i = 0; i < subcount; i++) {\r\n        graph.subdivide();\r\n        // lift to sphere after every subdivision\r\n        if (liftType > 0) {\r\n            let count = graph.getVertexCount();\r\n            for (let i = 0; i < count; i++) {\r\n                let pos = graph.getVertexPos(i);\r\n                let normal = pos;\r\n                let dis = center.disTo(pos);\r\n                let lift = radius - dis;\r\n                if (liftType > 1) {\r\n                    pos.add(normal.scaled(lift));\r\n                }\r\n                else {\r\n                    pos.add(normal.normalized().scaled(lift));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // 2 | remove random edges\r\n    if (randomEdges == 1) {\r\n        quadification(graph);\r\n    }\r\n    // 3 | subdivide quad\r\n    for (let i = 0; i < quadsubcount; i++) {\r\n        graph.subdivideQuad();\r\n    }\r\n    // lift to sphere after every subdivision\r\n    if (liftType > 0) {\r\n        let count = graph.getVertexCount();\r\n        for (let i = 0; i < count; i++) {\r\n            let pos = graph.getVertexPos(i);\r\n            let normal = graph.getVertexNormal(i);\r\n            let dis = center.disTo(pos);\r\n            let lift = radius - dis;\r\n            if (liftType > 1) {\r\n                pos.add(normal.scaled(lift));\r\n            }\r\n            else {\r\n                pos.add(normal.normalized().scaled(lift));\r\n            }\r\n        }\r\n    }\r\n    // quad relaxation from beginning?\r\n    return graph;\r\n}\r\nfunction createTileWorld(count, height) {\r\n    let m = new IntMatrix(count, height);\r\n    for (let i = 0; i < m._height; i++) {\r\n        let val = randomInt(m._width + 1);\r\n        for (let j = 0; j < m._width; j++) {\r\n            if (j < val) {\r\n                m.set(i, j, 1);\r\n            }\r\n            else {\r\n                m.set(i, j, 0);\r\n            }\r\n        }\r\n    }\r\n    return m;\r\n}\r\nfunction meshifyGraphSurface(graph) {\r\n    // init result\r\n    let meshes = [];\r\n    // per quad\r\n    let loops = graph.allVertLoopsAsInts();\r\n    for (let i = 0; i < loops.length; i++) {\r\n        const loop = loops[i];\r\n        if (loop.length < 4) {\r\n            console.log("invalids");\r\n            continue;\r\n        }\r\n        let vecs = loop.map((j) => graph.getVertexPos(j));\r\n        let m = Mesh.newQuad([vecs[0], vecs[3], vecs[1], vecs[2]]);\r\n        meshes.push(m);\r\n    }\r\n    let rend = Mesh.fromJoin(meshes).toRenderable();\r\n    rend.calculateVertexNormals();\r\n    return rend;\r\n}\r\nfunction meshifyTileWorld(graph, tiles, radius, // base\r\nstoreyHeight) {\r\n    // init result\r\n    let meshes = [];\r\n    // per quad\r\n    let loops = graph.allVertLoopsAsInts();\r\n    for (let i = 0; i < loops.length; i++) {\r\n        const loop = loops[i];\r\n        if (loop.length < 4) {\r\n            console.log("invalids");\r\n            continue;\r\n        }\r\n        let vecs = loop.map((j) => graph.getVertexPos(j));\r\n        let row = tiles.getRow(i);\r\n        // fill row\r\n        for (let j = 0; j < tiles._width; j++) {\r\n            let tileType = row[j];\r\n            if (tileType == 0) {\r\n                continue;\r\n            }\r\n            let level = radius + j * storeyHeight;\r\n            let level2 = radius + (j + 1) * storeyHeight;\r\n            let m = Mesh.newOct([\r\n                vecs[0].scaled(level),\r\n                vecs[1].scaled(level),\r\n                vecs[3].scaled(level),\r\n                vecs[2].scaled(level),\r\n                vecs[0].scaled(level2),\r\n                vecs[1].scaled(level2),\r\n                vecs[3].scaled(level2),\r\n                vecs[2].scaled(level2),\r\n            ]);\r\n            meshes.push(m);\r\n        }\r\n    }\r\n    let rend = Mesh.fromJoin(meshes).toRenderable();\r\n    rend.calculateVertexNormals();\r\n    return rend;\r\n}\r\nfunction constructMeshFromSphereGraph(graph, radius, // to project back\r\nliftBot, //\r\nliftTop, //\r\nrand) {\r\n    // recalculate world mesh\r\n    let scaler1 = 1 + liftBot / radius;\r\n    let scaler2 = 1 + liftTop / radius;\r\n    let meshes = [];\r\n    let loops = graph.allVertLoopsAsInts();\r\n    for (let loop of loops) {\r\n        if (Math.random() > rand) {\r\n            continue;\r\n        }\r\n        if (loop.length < 4) {\r\n            continue;\r\n        }\r\n        let vecs = loop.map((j) => graph.getVertexPos(j));\r\n        let m = mesh_Mesh.newOct([\r\n            vecs[0].scaled(scaler1),\r\n            vecs[1].scaled(scaler1),\r\n            vecs[3].scaled(scaler1),\r\n            vecs[2].scaled(scaler1),\r\n            vecs[0].scaled(scaler2),\r\n            vecs[1].scaled(scaler2),\r\n            vecs[3].scaled(scaler2),\r\n            vecs[2].scaled(scaler2),\r\n        ]);\r\n        meshes.push(m);\r\n    }\r\n    let rend = mesh_Mesh.fromJoin(meshes);\r\n    return rend;\r\n}\r\nfunction averageEdgeLength(graph) {\r\n    let count = 0;\r\n    let sum = 0;\r\n    graph.forEveryEdgeVerts((a, b) => {\r\n        sum += a.disTo(b);\r\n        count += 1;\r\n    });\r\n    let average = sum / count;\r\n    return average;\r\n}\r\nfunction edgeSmooth(graph, average, scale) {\r\n    graph.forEveryEdgeVerts((a, b) => {\r\n        let distance = a.disTo(b);\r\n        let diff = average - distance;\r\n        let vector = b.subbed(a);\r\n        a.add(vector.scaled(-diff * scale));\r\n        b.add(vector.scaled(diff * scale));\r\n    });\r\n}\r\nfunction laPlacian(graph) {\r\n    let count = graph.getVertexCount();\r\n    let news = [];\r\n    // get center of nbs\r\n    for (let vi = 0; vi < count; vi++) {\r\n        let v = graph.getVert(vi);\r\n        if (v.dead)\r\n            continue;\r\n        let sum = Vector3.zero();\r\n        let nbs = graph.getVertNeighbors(vi);\r\n        for (let nb of nbs) {\r\n            sum.add(graph.getVertexPos(nb));\r\n        }\r\n        sum.scale(1 / nbs.length);\r\n        news.push(sum);\r\n    }\r\n    // set\r\n    for (let vi = 0; vi < count; vi++) {\r\n        graph.getVertexPos(vi).copy(news[vi]);\r\n    }\r\n}\r\nfunction squarification(graph, centerCornerAverage) {\r\n    // make the quad graph as \'square\' as possible\r\n    // prepare\r\n    let faces = graph.allVertLoopsAsInts();\r\n    let count = faces.length;\r\n    let centers = new Array(count);\r\n    let movers = new Array(graph.verts.length);\r\n    let counters = new Array(graph.verts.length);\r\n    for (let i = 0; i < movers.length; i++) {\r\n        movers[i] = Vector3.new(0, 0, 0);\r\n        counters[i] = 0;\r\n    }\r\n    let cca = 0;\r\n    // iterate per face\r\n    for (let i = 0; i < count; i++) {\r\n        // get face, center and corners\r\n        let center = centers[i];\r\n        let face = faces[i];\r\n        let faceCount = face.length;\r\n        if (face.length == 0) {\r\n            throw "HELP, WE ARE NOT DEALING WITH QUADS HERE!";\r\n        }\r\n        center = Vector3.new(0, 0, 0);\r\n        let corners = new Array(faceCount);\r\n        for (let j = 0; j < faceCount; j++) {\r\n            let vi = face[j];\r\n            corners[j] = graph.getVertexPos(vi);\r\n            center.add(corners[j]);\r\n        }\r\n        center.scale(1 / faceCount);\r\n        // now that we have center, calculate cca\r\n        let local_cca = 0;\r\n        for (let j = 0; j < faceCount; j++) {\r\n            local_cca = center.disTo(corners[j]);\r\n        }\r\n        local_cca /= faceCount;\r\n        cca += local_cca;\r\n        // but use the given one if present\r\n        let scaler;\r\n        let cca_diff;\r\n        if (centerCornerAverage) {\r\n            scaler = centerCornerAverage;\r\n            cca_diff = centerCornerAverage - local_cca;\r\n        }\r\n        else {\r\n            scaler = local_cca;\r\n            cca_diff = 0;\r\n        }\r\n        // rotate all corners into the same space, and get the average of that\r\n        // TODO SAVE TIME BY DOING THIS:\r\n        // new Vector2(v.dot(ihat), v.dot(jhat)).angle()\r\n        let plane = Plane.from3pt(center, corners[0], corners[1]);\r\n        let normedCorners = new Array(face.length);\r\n        let normedCenter = Vector3.new(0, 0, 0);\r\n        let delta = 2 / faceCount;\r\n        for (let j = 0; j < faceCount; j++) {\r\n            normedCorners[j] = plane.rotateVector(corners[j], j * Math.PI * delta);\r\n            normedCenter.add(normedCorners[j]);\r\n        }\r\n        // scale this averaged to the center corner average\r\n        normedCenter.scale(1 / 4);\r\n        let normal = normedCenter.subbed(center).normalize();\r\n        let perfectCorner = center.added(normal.scaled(local_cca));\r\n        // increate gunfactor if square is very small (awww)\r\n        let gunfactor = 1;\r\n        let equalizer = 200;\r\n        gunfactor += Math.max(-1 * cca_diff * equalizer, 0);\r\n        // console.log(gunfactor);\r\n        // rotate this average back, and add it to the movers of every vertex\r\n        for (let j = 0; j < faceCount; j++) {\r\n            let vi = face[j];\r\n            let v = plane.rotateVector(perfectCorner, j * Math.PI * delta);\r\n            movers[vi].add(v.scaled(gunfactor));\r\n            counters[vi] += 1;\r\n        }\r\n    }\r\n    // now, move the graph\r\n    for (let i = 0; i < movers.length; i++) {\r\n        let mover = movers[i];\r\n        let counter = counters[i];\r\n        if (counter < 1) {\r\n            continue;\r\n        }\r\n        let v = graph.getVertexPos(i);\r\n        v.add(mover.scale(1 / counter));\r\n    }\r\n    // return the center corner average, to be used in the next cycle\r\n    cca /= count;\r\n    return cca;\r\n}\r\nfunction quadification(graph) {\r\n    // edge deletion heuristic:\r\n    // remove edges between two triangles to create a quad.\r\n    // keep removing edges until no triangle neighbors another triangle.\r\n    // prepare\r\n    let count = graph.edges.length;\r\n    let edgeIds = new Array(count);\r\n    let visited = new Array(count);\r\n    graph.edges.forEach((e, i) => {\r\n        edgeIds[i] = i;\r\n        visited[i] = false;\r\n    });\r\n    // shuffle\r\n    let shuffler = (a, b) => {\r\n        return 0.5 - Math.random();\r\n    };\r\n    edgeIds.sort(shuffler);\r\n    // per edge\r\n    for (let i = 0; i < count; i++) {\r\n        let ei = edgeIds[i];\r\n        let e = graph.edges[ei];\r\n        if (e.dead || visited[ei]) {\r\n            continue;\r\n        }\r\n        let loops = graph.getLoopsAdjacentToEdge(ei);\r\n        // only delete edges between triangles\r\n        if (loops[0].length > 3 || loops[1].length > 3) {\r\n            continue;\r\n        }\r\n        // the edges of this new quad should not be touched!\r\n        for (let loop of loops) {\r\n            for (let edgeIndex of loop) {\r\n                visited[edgeIndex] = true;\r\n            }\r\n        }\r\n        // now remove this edge itself\r\n        graph.deleteEdgeByIndex(ei);\r\n    }\r\n}\r\nfunction randomInt(max) {\r\n    return Math.floor(Math.random() * max);\r\n}\r\n\n;// CONCATENATED MODULE: ./src/renderers/transform-line-renderer.ts\n// name:    simple-line-renderer.ts\r\n// author:  Jos Feenstra\r\n// purpose: WebGL based rendering of lines.\r\n\r\n\r\nclass TransformLineRenderer extends renderer_Renderer {\r\n    constructor(gl, color = [1, 0, 0, 0.5]) {\r\n        // note: I like vertex & fragments to be included in the script itself.\r\n        // when you change vertex or fragment, this class has to deal with it.\r\n        // putting them somewhere else doesnt make sense to me,\r\n        // they are coupled 1 to 1.\r\n        const vs = `\n        precision mediump int;\n        precision mediump float;\n\n        attribute vec4 a_position;\n        uniform mat4 u_transform;\n        uniform mat4 u_personal;\n        uniform vec4 u_color;\n\n        void main() {\n            gl_Position = u_transform * u_personal * a_position;\n        }\n        `;\r\n        const fs = `\n        precision mediump int;\n        precision mediump float;\n\n        uniform vec4 u_color;\n\n        void main () {\n            gl_FragColor = u_color;\n        }\n        `;\r\n        // setup program\r\n        super(gl, vs, fs);\r\n        this.u_transform = gl.getUniformLocation(this.program, "u_transform");\r\n        this.u_personal = gl.getUniformLocation(this.program, "u_personal");\r\n        this.u_color = gl.getUniformLocation(this.program, "u_color");\r\n        // we need 2 buffers\r\n        this.a_position = gl.getAttribLocation(this.program, "a_position");\r\n        this.a_position_buffer = gl.createBuffer();\r\n        this.index_buffer = gl.createBuffer();\r\n        // set uniforms which wont change\r\n        gl.useProgram(this.program);\r\n        this.count = 0;\r\n        this.vertCount = 0;\r\n        this.personal = matrix_Matrix4.newIdentity();\r\n        this.color = color;\r\n    }\r\n    static new(gl, color = [1, 0, 0, 0.5]) {\r\n        return new TransformLineRenderer(gl, color);\r\n    }\r\n    set(data, speed = renderer_DrawSpeed.StaticDraw) {\r\n        // save how many faces need to be drawn\r\n        let gl = this.gl;\r\n        let links;\r\n        let verts;\r\n        // extract\r\n        verts = data.mesh.verts;\r\n        links = data.mesh.toLines().links.getData();\r\n        this.personal = data.position;\r\n        this.color = data.linecolor;\r\n        // set it\r\n        gl.useProgram(this.program);\r\n        this.count = links.length;\r\n        this.vertCount = verts._width;\r\n        let drawspeed = this.convertDrawSpeed(speed);\r\n        // vertices\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        gl.enableVertexAttribArray(this.a_position);\r\n        gl.vertexAttribPointer(this.a_position, this.vertCount, gl.FLOAT, false, 0, 0);\r\n        gl.bufferData(gl.ARRAY_BUFFER, verts.data, drawspeed);\r\n        // indices\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.index_buffer);\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, links.buffer, drawspeed);\r\n    }\r\n    render(c) {\r\n        let gl = this.gl;\r\n        let matrix = c.camera.totalMatrix;\r\n        // Tell it to use our program (pair of shaders)\r\n        // POINTERS MUST ALSO BE SET, DO EVERYTHING EXCEPT GL.BUFFERDATA\r\n        gl.useProgram(this.program);\r\n        //\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        gl.enableVertexAttribArray(this.a_position);\r\n        gl.vertexAttribPointer(this.a_position, this.vertCount, gl.FLOAT, false, 0, 0);\r\n        //\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.index_buffer);\r\n        gl.uniform4f(this.u_color, this.color[0], this.color[1], this.color[2], this.color[3]);\r\n        // set uniforms\r\n        gl.uniformMatrix4fv(this.u_transform, false, matrix.data);\r\n        gl.uniformMatrix4fv(this.u_personal, false, this.personal.data);\r\n        // Draw the point.\r\n        gl.drawElements(gl.LINES, this.count, gl.UNSIGNED_SHORT, 0);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/renderers/transform-mesh-renderer.ts\n// name:    mesh-renderer.ts\r\n// author:  Jos Feenstra\r\n// purpose: WebGL based rendering of a mesh.\r\n\r\nclass TransformMeshRenderer extends renderer_Renderer {\r\n    constructor(gl, color = [1, 0, 0, 0.25]) {\r\n        const vs = `\n        precision mediump int;\n        precision mediump float;\n\n        attribute vec4 a_position;\n        uniform mat4 u_transform;\n        uniform mat4 u_personal;\n        uniform vec4 u_color;\n\n        void main() {\n            gl_Position = u_transform * u_personal * a_position;\n        }\n        `;\r\n        const fs = `\n        precision mediump int;\n        precision mediump float;\n\n        uniform vec4 u_color;\n\n        void main () {\n            gl_FragColor = u_color;\n        }\n        `;\r\n        // setup program\r\n        super(gl, vs, fs);\r\n        this.u_transform = gl.getUniformLocation(this.program, "u_transform");\r\n        this.u_personal = gl.getUniformLocation(this.program, "u_personal");\r\n        this.u_color = gl.getUniformLocation(this.program, "u_color");\r\n        gl.useProgram(this.program);\r\n        this.count = 0;\r\n        this.size = 0;\r\n        // we need 2 buffers\r\n        // -> 1 float buffer for the positions of all vertices.\r\n        // -> 1 int buffer for the index of all triangles\r\n        this.a_position = gl.getAttribLocation(this.program, "a_position");\r\n        this.a_position_buffer = gl.createBuffer();\r\n        this.index_buffer = gl.createBuffer();\r\n        this.personal = matrix_Matrix4.newIdentity();\r\n        this.color = color;\r\n    }\r\n    set(data, speed = renderer_DrawSpeed.StaticDraw) {\r\n        let gl = this.gl;\r\n        let mesh = data.mesh;\r\n        this.color = data.color;\r\n        this.personal = data.position;\r\n        // save how many faces need to be drawn\r\n        gl.useProgram(this.program);\r\n        this.count = mesh.links.data.length;\r\n        // vertices\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        this.size = 3;\r\n        var type = gl.FLOAT;\r\n        var normalize = false;\r\n        gl.vertexAttribPointer(this.a_position, this.size, gl.FLOAT, false, 0, 0);\r\n        gl.bufferData(gl.ARRAY_BUFFER, mesh.verts.data, this.convertDrawSpeed(speed));\r\n        // indices\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.index_buffer);\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, mesh.links.data, this.convertDrawSpeed(speed));\r\n    }\r\n    // render 1 image to the screen\r\n    render(c) {\r\n        let gl = this.gl;\r\n        let matrix = c.camera.totalMatrix;\r\n        // Tell it to use our program (pair of shaders)\r\n        gl.useProgram(this.program);\r\n        gl.enableVertexAttribArray(this.a_position);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        gl.vertexAttribPointer(this.a_position, this.size, gl.FLOAT, false, 0, 0);\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.index_buffer);\r\n        // set uniforms\r\n        gl.uniformMatrix4fv(this.u_transform, false, matrix.data);\r\n        gl.uniformMatrix4fv(this.u_personal, false, this.personal.data);\r\n        gl.uniform4f(this.u_color, this.color[0], this.color[1], this.color[2], this.color[3]);\r\n        // Draw the point.\r\n        gl.drawElements(gl.TRIANGLES, this.count, gl.UNSIGNED_SHORT, 0);\r\n    }\r\n    setAndRender(r, context) {\r\n        this.set(r, renderer_DrawSpeed.DynamicDraw);\r\n        this.render(context);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/rendercombos/mesh-combo.ts\n\r\n\r\n\r\n\r\nclass StaticMeshCombo extends Combo {\r\n    constructor(gl) {\r\n        super(gl, mesh_Mesh.newEmpty(0, 0, 0), TransformLineRenderer.new);\r\n        this.color = [0, 0, 0, 0.8];\r\n        this.linecolor = [0.3, 0.3, 0.3, 1];\r\n        this.renderer2 = new TransformMeshRenderer(gl);\r\n    }\r\n    static new(gl) {\r\n        return new StaticMeshCombo(gl);\r\n    }\r\n    set(mesh) {\r\n        this.state = mesh;\r\n        this.buffer();\r\n    }\r\n    // how to convert from state to buffered\r\n    buffer() {\r\n        this.buffered = this.state.toRenderable();\r\n        this.buffered.calculateFaceNormals();\r\n        this.buffered.color = this.color;\r\n        this.buffered.linecolor = this.linecolor;\r\n        this.commit();\r\n    }\r\n    commit() {\r\n        this.buffered.color = this.color;\r\n        this.buffered.linecolor = this.linecolor;\r\n        this.renderer.set(this.buffered, renderer_DrawSpeed.StaticDraw);\r\n        this.renderer2.set(this.buffered, renderer_DrawSpeed.StaticDraw);\r\n    }\r\n    render(context) {\r\n        this.renderer2.render(context);\r\n        this.renderer.render(context);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./demo/apps/spherical/spherical-landing.ts\n// TODO\r\n// - improve quadification: less triangles!\r\n// - improve squarification: speed & equal sizes\r\n\r\n\r\n\r\n\r\nclass SphericalLandingApp extends App {\r\n    constructor(gl) {\r\n        super(gl, "Multiple Layers of spherical geometry");\r\n        this.radius = 0.1;\r\n        this.smoothlimit = 0;\r\n        this.worlds = [];\r\n        this.lerpColorState = 0;\r\n        this.mousePos = new vector_Vector2(0, 0);\r\n        this.lerpSpeed = 0.1;\r\n        this.color = [0, 0, 0, 0.8];\r\n        this.linecolor = [0.3, 0.3, 0.3, 1];\r\n        let canvas = gl.canvas;\r\n        this.c = new Context(new Camera(canvas, 1, true));\r\n        this.c.camera.pos = new vector_Vector3(-0.41347096487880547, 1.4944804848730606, 0.8300000000000006);\r\n        this.c.camera.set(-1, 2.379899, 0.751);\r\n        // this.c.camera.set(-4.08, 1.24, -0.71);\r\n    }\r\n    ui(ui) {\r\n        let reset = () => {\r\n            // this.rotate.set(0);\r\n            this.start();\r\n        };\r\n        this.rotate = new Parameter("rotate", 1, 0, 1, 1);\r\n        this.randomEdges = new Parameter("delete edges", 1, 0, 1, 1);\r\n        this.smooth = new Parameter("smooth", 0, 0, 1, 1);\r\n        this.subCount = new Parameter("sub count", 2, 0, 4, 1);\r\n        this.quadSubCount = new Parameter("sub count quad", 1, 0, 2, 1);\r\n        this.liftType = EnumParameter.new("lift type", 1, ["none", "sphere", "buggy"]);\r\n        ui.hide();\r\n        ui.addBooleanParameter(this.rotate);\r\n        ui.addBooleanParameter(this.randomEdges, reset);\r\n        ui.addBooleanParameter(this.smooth);\r\n        ui.addParameter(this.subCount, reset);\r\n        ui.addParameter(this.quadSubCount, reset);\r\n        ui.addParameter(this.liftType, reset);\r\n        ui.addButton("recalculate", reset);\r\n    }\r\n    start() {\r\n        // set some values\r\n        this.radius = 1;\r\n        this.smoothlimit = 0;\r\n        // create the graph\r\n        this.graph = createGraph(1, this.subCount.get(), this.quadSubCount.get(), this.randomEdges.get());\r\n        // 5 | convert\r\n        this.average = averageEdgeLength(this.graph);\r\n        this.bufferWorld();\r\n        let canvas = this.gl.canvas;\r\n        let goto = canvas.getAttribute("data-goto");\r\n        console.log(goto);\r\n    }\r\n    bufferWorld() {\r\n        this.worlds = [];\r\n        let levels = [0, 0.1, 0.2, 0.3];\r\n        let freqs = [0.7, 0.5, 0.3];\r\n        for (let i = 0; i < 3; i++) {\r\n            let bot = levels[i];\r\n            let top = levels[i + 1];\r\n            let freq = freqs[i];\r\n            let mc = StaticMeshCombo.new(this.gl);\r\n            mc.set(constructMeshFromSphereGraph(this.graph, this.radius, bot, top, freq));\r\n            this.worlds.push(mc);\r\n        }\r\n    }\r\n    update(state) {\r\n        this.c.camera.update(state);\r\n        // update rotation\r\n        let speedb = 0.00007;\r\n        let scalar = 1 + 5 * Math.log10(1 + this.mousePos.disTo(state.mousePos));\r\n        this.mousePos = state.mousePos;\r\n        speedb *= scalar;\r\n        this.lerpSpeed = GeonMath.lerp(this.lerpSpeed, speedb, 0.03);\r\n        // rotate mesh\r\n        if (this.rotate.get() == 1) {\r\n            // rotate\r\n            let alpha = this.lerpSpeed * state.tick;\r\n            let rotx = matrix_Matrix4.newXRotation(alpha);\r\n            let roty = matrix_Matrix4.newYRotation(alpha);\r\n            let rot = rotx.multiply(roty);\r\n            this.worlds[0].buffered.position.multiply(rot);\r\n            this.worlds[1].buffered.position.multiply(matrix_Matrix4.newXRotation(-alpha));\r\n            this.worlds[2].buffered.position.multiply(matrix_Matrix4.newZRotation(-alpha));\r\n        }\r\n        // update color\r\n        this.updateColors(state);\r\n        // commit\r\n        for (let world of this.worlds) {\r\n            world.commit();\r\n        }\r\n    }\r\n    updateColors(state) {\r\n        let canvas = this.gl.canvas;\r\n        const step = 0.003;\r\n        let filled = canvas.getAttribute("data-filled");\r\n        if (filled == "1" && this.lerpColorState < 1) {\r\n            // fill it\r\n            console.log("fill");\r\n            this.lerpColorState += step;\r\n        }\r\n        else if (filled == "0" && this.lerpColorState > 0) {\r\n            // empty it\r\n            console.log("empty");\r\n            this.lerpColorState -= step;\r\n        }\r\n        else {\r\n            return;\r\n        }\r\n        let fade1 = GeonMath.fade(this.lerpColorState);\r\n        let fade2 = GeonMath.fade(Math.min(this.lerpColorState * 2, 1));\r\n        this.worlds.forEach((w) => {\r\n            w.color = blendColor(this.color, [0, 0, 0, 0], 1 - fade1);\r\n            w.linecolor = blendColor(this.linecolor, [0, 0, 0, 0], 1 - fade2);\r\n        });\r\n        this.lerpSpeed *= fade1;\r\n    }\r\n    draw(gl) {\r\n        if (this.lerpColorState == 0) {\r\n            return;\r\n        }\r\n        for (let world of this.worlds) {\r\n            world.render(this.c);\r\n        }\r\n    }\r\n}\r\nfunction blendColor(a, b, delta) {\r\n    return a.map((v, i) => {\r\n        return v * (1 - delta) + b[i] * delta;\r\n    });\r\n}\r\n\n;// CONCATENATED MODULE: ./demo/index.ts\n// Name:    index.ts\r\n// Author:  Jos Feenstra\r\n// Purpose: Entry point\r\n\r\n\r\nvar core;\r\nfunction main() {\r\n    // get references of all items on the canvas\r\n    let canvas = document.getElementById("canvas");\r\n    let video = document.getElementById("camera");\r\n    let ui = document.getElementById("interface");\r\n    let cameraOn = document.getElementById("camera-on");\r\n    let cameraStop = document.getElementById("camera-off");\r\n    let buttonPredict = document.getElementById("predict");\r\n    // init core\r\n    let gl = renderer_Renderer.initWebglContext(canvas);\r\n    core = new Core(canvas, gl, ui);\r\n    // init swap app\r\n    let appCollection = [SphericalLandingApp];\r\n    let swapApp = new SwapApp(gl, core, appCollection);\r\n    core.addApp(swapApp);\r\n    swapApp.swap(0);\r\n    // infinite loop\r\n    function loop() {\r\n        if (core.STOP) {\r\n            // TODO : notify the User that we have stopped running...\r\n            return;\r\n        }\r\n        core.update();\r\n        core.draw();\r\n        requestAnimationFrame(loop);\r\n    }\r\n    requestAnimationFrame(loop);\r\n}\r\nwindow.addEventListener("load", function () {\r\n    main();\r\n}, false);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///374\n')})();
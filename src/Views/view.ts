// Author : Jos Feenstra
import { App } from "../system/app";
import { Route, RouteType } from "../system/app-helpers";
import { dom, Dom } from "../system/dom";
import { getExtension } from "../utils/stringhelpers";

let showdown  = require('../plugins/showdown');
const converter = new showdown.Converter();

// base class for every autogenerated html page
export class View 
{
    route: Route;
    title: string;

    constructor(route: Route) 
    {
        this.route = route;
        this.title = "Jos Feenstra - " + route.name;
        document.title = this.title; 
    }

    onLoad() 
    {
        App.RenderNav();

        let article  = App.ClearArticle();
        this.loadArticle(article);
        this.afterLoadArticle(article);

        App.RenderFooter();
    }

    async loadArticle(context: HTMLElement) 
    {  
        let path = this.route.page!;
        let res = await fetch(path);
        let text = await res.text();
        this.initMarkdownPage(context, text, ["button", "img"]);

        // // fade in of the sphere
        dom.toId("canvas");
        dom.set("data-filled", "1");
        if (this.route.hash =="#about") { 
            dom.set("data-goto", "side");
        } else if (this.route.hash =="#website") {
            dom.set("data-goto", "inside");
        } else {
            dom.set("data-goto", "bottom");
        }
    }

    // fill the entire context with whatever we find in markdown
    // build two columns, put all 'extractnodes' into the first, and the text in the second 
    private initMarkdownPage(context : HTMLElement, markdown : string, extractNodes: string[])
    {
        let html = converter.makeHtml(markdown);

        let article = Dom.AddDiv(context, "container mt-5");

        if (this.route.type == RouteType.portfolio) {
            let div = Dom.AddDiv(article, "row mb-4 justify-content-center m-0");
            let btn = Dom.AddLink(div, "#works", "", "btn btn-block btn-outline-light col-2")
            btn.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-up" viewBox="0 0 16 16">
                <path fill-rule="evenodd" d="M8 15a.5.5 0 0 0 .5-.5V2.707l3.146 3.147a.5.5 0 0 0 .708-.708l-4-4a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L7.5 2.707V14.5a.5.5 0 0 0 .5.5z"/>
            </svg>
            `
        }

        let columns = Dom.AddDiv(article, "row mt-5 justify-content-center");
        let col1 = Dom.AddDiv(columns, "col-md-6 my-5");

        if (this.route.hash == "#about") {
            columns.classList.replace("justify-content-center", "justify-content-right")
        }


        let mdwrapper = Dom.AddDiv(col1, "mb-5");
        mdwrapper.innerHTML = html;

        let imageWrapper = Dom.AddDiv(col1, "mt-5");
        extractNodes.forEach(nodename => {
            col1.querySelectorAll(nodename).forEach(img => {
                img.className = "img-fluid mb-2";
                imageWrapper.appendChild(img);
            });
        });
    }

    afterLoadArticle(context: HTMLElement)
    {

    }

    onUnload() 
    {
        App.ClearFooter();
    }
}
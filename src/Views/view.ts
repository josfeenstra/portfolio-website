// Author : Jos Feenstra
import { App } from "../system/app";
import { Route, RouteType } from "../system/app-helpers";
import { dom, Dom } from "../system/dom";
import { getExtension } from "../utils/stringhelpers";

let showdown  = require('../plugins/showdown');
const converter = new showdown.Converter();

// base class for every autogenerated html page
export class View 
{
    route: Route;
    title: string;

    constructor(route: Route) 
    {
        this.route = route;
        this.title = "Jos Feenstra - " + route.name;
        document.title = this.title; 
    }

    onLoad() 
    {
        App.RenderNav();

        let article  = App.ClearArticle();
        this.loadArticle(article);
        this.afterLoadArticle(article);

        App.RenderFooter();
    }

    async loadArticle(context: HTMLElement) 
    {  
        // // fade in of the sphere
        dom.toId("canvas");
        dom.set("data-filled", "1");
        if (this.route.hash =="#about") { 
            dom.set("data-goto", "side");
        } else if (this.route.hash =="#website") {
            dom.set("data-goto", "inside");
        } else {
            dom.set("data-goto", "bottom");
        }

        let path = this.route.page!;
        let res = await fetch(path);
        let text = await res.text();

        this.initMarkdownPage(context, text);

    }

    // fill the entire context with whatever we find in markdown
    // build two columns, put all 'extractnodes' into the first, and the text in the second 
    private initMarkdownPage(context : HTMLElement, markdown : string)
    {
        // start processing the html, dont add it to the page yet, we will do some post-processing
        let html = converter.makeHtml(markdown);
        let article = Dom.AddDiv(context, "container mt-5");

        // create an arrow back to the `works` menu, if this is a portfolio item
        if (this.route.type == RouteType.portfolio) {
            let div = Dom.AddDiv(article, "row mb-4 justify-content-center m-0");
            let btn = Dom.AddLink(div, "#works", `<i class="bi bi-caret-up-fill"></i>`, "btn btn-block btn-outline-light col-2")
        }

        // spacing
        let columns = Dom.AddDiv(article, "row mt-5 justify-content-center");
        let col1 = Dom.AddDiv(columns, "col-lg-6 my-5");

        // make sure non-portfolio items are spaced differently
        if (this.route.type != RouteType.portfolio) {
            columns.classList.replace("justify-content-center", "justify-content-end")
        }

        // finally, load the html
        let mdwrapper = Dom.AddDiv(col1, "mb-5");
        mdwrapper.innerHTML = html;

        col1.querySelectorAll("h1").forEach(h1 => {
            h1.classList.add("display-1");
        })

        // turn links in `blockquote` blocks into wide buttons.
        col1.querySelectorAll("blockquote").forEach(block => {
            block.querySelectorAll("a").forEach(a => {

                // set an icon
                // console.log(document.location);
                let icon = "";
                if (a.href.includes("github")) {
                    icon = "github";
                } else if (a.href.includes(document.location.origin)) {
                    icon = "caret-right-fill"
                } else {
                    icon = "globe";
                } 
                a.innerHTML = `<i class="bi bi-${icon}"></i> ` + a.innerHTML;
                a?.classList.add("btn","btn-outline-light","btn-block", "m-2");
            });
        });

        // put all images at the bottom of the page
        let imageWrapper = Dom.AddDiv(col1, "mt-5");

        col1.querySelectorAll("img").forEach(img => {
            img.className = "img-fluid mb-2";
            imageWrapper.appendChild(img);
        });

    }

    afterLoadArticle(context: HTMLElement)
    {

    }

    onUnload() 
    {
        App.ClearFooter();
    }
}